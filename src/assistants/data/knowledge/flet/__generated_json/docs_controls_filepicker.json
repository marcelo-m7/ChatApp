{
    "file": "docs_controls_filepicker.py",
    "description": "O código apresentado inclui o uso da biblioteca Flet para criar uma interface de usuário (UI) simples e uma aplicação web com FastAPI para manipular uploads e downloads de arquivos. Vamos analisar cada parte do código separadamente:\n\n### Parte 1: Código Flet\n\n1. **Importação e Definição da Função Main:**\n   ```python\n   import flet as ft\n\n   def main(page: ft.Page):\n   ```\n   Importa a biblioteca Flet e define a função principal `main`, que aceita um objeto `page` do tipo `ft.Page`.\n\n2. **Função Interna para Resultado de Seleção de Arquivos:**\n   ```python\n   def pick_files_result(e: ft.FilePickerResultEvent):\n       selected_files.value = (\n           \", \".join(map(lambda f: f.name, e.files)) if e.files else \"Cancelled!\"\n       )\n       selected_files.update()\n   ```\n   Esta função é chamada quando o usuário seleciona arquivos usando o diálogo de seleção de arquivos. Os nomes dos arquivos selecionados são juntados em uma string e atribuídos a um componente `Text` para exibição. Se nenhum arquivo for selecionado, exibe \"Cancelled!\".\n\n3. **Configuração do Diálogo de Seleção de Arquivos e Componentes UI:**\n   ```python\n   pick_files_dialog = ft.FilePicker(on_result=pick_files_result)\n   selected_files = ft.Text()\n   page.overlay.append(pick_files_dialog)\n   ```\n   Cria um `FilePicker` que é usado para selecionar arquivos e um componente `Text` para exibir os nomes dos arquivos selecionados. O `FilePicker` é adicionado ao overlay da página, o que significa que ele pode aparecer sobre outros componentes.\n\n4. **Adição de Botão e Texto à Página:**\n   ```python\n   page.add(\n       ft.Row(\n           [\n               ft.ElevatedButton(\n                   \"Pick files\",\n                   icon=ft.Icons.UPLOAD_FILE,\n                   on_click=lambda _: pick_files_dialog.pick_files(\n                       allow_multiple=True\n                   ),\n               ),\n               selected_files,\n           ]\n       )\n   )\n   ```\n   Adiciona um botão que, quando clicado, abre o diálogo de seleção de arquivos com a capacidade de selecionar múltiplos arquivos. O botão e o texto são organizados horizontalmente usando `ft.Row`.\n\n### Parte 2: Código FastAPI\n\n1. **Integração com FastAPI e Definição de Rota:**\n   ```python\n   from fastapi import FastAPI, Response\n   from fastapi.responses import FileResponse\n\n   app = flet_fastapi.app(main)\n\n   @app.get(\"/download/{filename}\")\n   def download(filename: str):\n       path = prepare_file(filename)\n       return FileResponse(path)\n   ```\n   Define uma aplicação FastAPI integrada com a aplicação Flet. A rota `/download/{filename}` serve para baixar arquivos, onde `prepare_file` seria uma função definida pelo usuário para localizar o caminho do arquivo no servidor.\n\n2. **Botão de Download e URL de Upload:**\n   ```python\n   ft.ElevatedButton(\"Download myfile\", on_click=lambda _: page.launch_url(\"/download/myfile.txt\"))\n\n   upload_url = page.get_upload_url(\"dir/filename.ext\", 60)\n   ```\n   Cria um botão na aplicação Flet que, ao ser clicado, direciona para a URL de download do arquivo. `page.get_upload_url` gera uma URL temporária para upload de arquivos.\n\n3. **Configuração do Diretório de Upload:**\n   ```python\n   ft.app(main, upload_dir=\"uploads\")\n   ```\n   Inicia a aplicação Flet especificando o diretório onde os arquivos carregados serão armazenados.\n\n### Conclusão\n\nO código utiliza a biblioteca Flet para criar uma interface gráfica que permite aos usuários selecionar arquivos para upload e baixar arquivos, integrando funcionalidades de backend através de FastAPI para o manuseio de arquivos, tanto para upload quanto para download.",
    "examples": "Para expandir o exemplo dado e mostrar diferentes formas de utilização do código com a biblioteca Flet, podemos criar variações nos componentes e funcionalidades, explorando mais características da biblioteca. Vamos dividir isso em três cenários diferentes.\n\n### Cenário 1: Uso de Filtros de Tipo de Arquivo no FilePicker\nNeste exemplo, vamos modificar o `FilePicker` para permitir que o usuário selecione apenas arquivos de imagem.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def pick_files_result(e: ft.FilePickerResultEvent):\n        selected_files.value = (\n            \", \".join(map(lambda f: f.name, e.files)) if e.files else \"Cancelled!\"\n        )\n        selected_files.update()\n\n    # Permitir apenas imagens\n    pick_files_dialog = ft.FilePicker(\n        on_result=pick_files_result,\n        file_types=[\".png\", \".jpg\", \".jpeg\"]\n    )\n    \n    selected_files = ft.Text()\n    page.overlay.append(pick_files_dialog)\n    page.add(\n        ft.Row([\n            ft.ElevatedButton(\n                \"Pick image files\",\n                icon=ft.Icons.IMAGE,\n                on_click=lambda _: pick_files_dialog.pick_files(\n                    allow_multiple=True\n                ),\n            ),\n            selected_files,\n        ])\n    )\n\nft.app(main)\n```\n\n### Cenário 2: Adicionando um Campo de Texto para Filtro de Arquivo\nEste exemplo adiciona um campo de entrada de texto para o usuário especificar um tipo de arquivo antes de abrir o diálogo de seleção de arquivos.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    file_type_input = ft.TextField(hint_text=\"Enter file type (e.g., .txt, .pdf)\")\n\n    def on_button_click(_):\n        file_type = file_type_input.value.strip()\n        if file_type:\n            pick_files_dialog.file_types = [file_type]\n        pick_files_dialog.pick_files(allow_multiple=True)\n    \n    def pick_files_result(e: ft.FilePickerResultEvent):\n        selected_files.value = (\n            \", \".join(map(lambda f: f.name, e.files)) if e.files else \"Cancelled!\"\n        )\n        selected_files.update()\n\n    pick_files_dialog = ft.FilePicker(on_result=pick_files_result)\n    selected_files = ft.Text()\n    page.overlay.append(pick_files_dialog)\n    page.add(\n        ft.Column([\n            file_type_input,\n            ft.ElevatedButton(\n                \"Pick files\",\n                icon=ft.Icons.FOLDER_OPEN,\n                on_click=on_button_click\n            ),\n            selected_files,\n        ])\n    )\n\nft.app(main)\n```\n\n### Cenário 3: Download de Arquivos com FastAPI\nIntegrar o botão de download que ao ser clicado, desencadeia o download de um arquivo específico usando FastAPI.\n\n```python\nfrom fastapi import FastAPI, Response, FileResponse\nimport flet as ft\n\ndef main(page: ft.Page):\n    def download_file(_):\n        page.launch_url(\"/download/sample.txt\")\n\n    page.add(\n        ft.ElevatedButton(\n            \"Download Sample File\",\n            icon=ft.Icons.DOWNLOAD,\n            on_click=download_file\n        )\n    )\n\napp = flet.fastapi.app(main)\n\n@app.get(\"/download/{filename}\")\ndef download(filename: str):\n    path = f\"/path/to/your/files/{filename}\"  # Ajuste ao caminho correto\n    return FileResponse(path)\n\nft.app(main)\n```\n\nEsses exemplos mostram como ajustar o comportamento do diálogo de seleção de arquivos, adicionar campos de entrada para especificar tipos de arquivo e integrar com FastAPI para realizar downloads de arquivos."
}