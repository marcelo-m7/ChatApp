{
    "file": "docs_controls_linechart.py",
    "description": "O código Python que você forneceu utiliza a biblioteca Flet, que é uma ferramenta para criar aplicativos web interativos usando Python. O código define uma interface gráfica para visualizar dados em um gráfico de linhas e permite alternar entre dois conjuntos de dados. Vamos analisar as principais partes do código:\n\n### Importação e Estado Global\n```python\nimport flet as ft\n\nclass State:\n    toggle = True\n\ns = State()\n```\n- A biblioteca Flet é importada com o alias `ft`.\n- Uma classe `State` é definida com um atributo booleano `toggle` para controlar a alternância entre dois conjuntos de dados.\n- Uma instância de `State` é criada e armazenada em `s`.\n\n### Função `main`\n```python\ndef main(page: ft.Page):\n    ...\n```\nEsta função é o ponto de entrada para o aplicativo Flet e aceita um objeto `Page` como argumento, que representa a página web onde os elementos da UI serão renderizados.\n\n### Dados para o Gráfico\n```python\ndata_1 = [...]\ndata_2 = [...]\n```\n- `data_1` e `data_2` são listas contendo objetos `ft.LineChartData`. Cada objeto define um conjunto de pontos (`ft.LineChartDataPoint`) para ser plotado no gráfico. Os parâmetros como `stroke_width`, `color`, `curved`, e `stroke_cap_round` são usados para estilizar as linhas do gráfico.\n\n### Criação do Gráfico\n```python\nchart = ft.LineChart(...)\n```\n- Um `LineChart` é criado com um dos conjuntos de dados (`data_series`), configurações de estilo para o gráfico como bordas, linhas de grade, eixos e tooltips. Propriedades como `min_y`, `max_y`, `min_x`, `max_x` definem os limites dos eixos.\n\n### Função de Alternância\n```python\ndef toggle_data(e):\n    ...\n```\n- Esta função é chamada quando o usuário interage com o botão na interface. Ela verifica o estado atual de `s.toggle`, alterna os dados do gráfico entre `data_1` e `data_2`, e altera outras configurações relacionadas ao gráfico (como interatividade). A função `chart.update()` é chamada para atualizar o gráfico na interface do usuário.\n\n### Adição de Elementos à Página\n```python\npage.add(ft.ElevatedButton(\"avg\", on_click=toggle_data), chart)\n```\n- Um botão (`ElevatedButton`) e o gráfico (`chart`) são adicionados à página. O botão é configurado para chamar `toggle_data` quando clicado.\n\n### Execução do App\n```python\nft.app(main)\n```\n- A função `main` é passada para `ft.app()`, que executa o aplicativo Flet.\n\n### Resumo\nO código cria um aplicativo web interativo com Flet que exibe dados em um gráfico de linhas. Os usuários podem alternar entre dois conjuntos de dados usando um botão, permitindo visualizações dinâmicas dos dados. Este tipo de aplicativo é útil para análise de dados e visualizações interativas em dashboards ou relatórios.",
    "examples": "O código fornecido mostra como criar gráficos de linha interativos usando a biblioteca Flet em Python. Abaixo, vou fornecer exemplos adicionais com diferentes formas de uso, destacando variações nos dados, estilos de gráfico e interações.\n\n### Exemplo 1: Gráfico de Linha com Múltiplas Séries de Dados e Animação\n\n```python\nimport flet as ft\n\nclass State:\n    toggle = True\n\ns = State()\n\ndef main(page: ft.Page):\n    # Dados para o gráfico de linha - duas séries de dados distintas\n    data_1 = [\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(i, i**0.5) for i in range(1, 15)\n            ],\n            stroke_width=2,\n            color=ft.Colors.BLUE,\n            curved=True\n        ),\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(i, i) for i in range(1, 15)\n            ],\n            stroke_width=2,\n            color=ft.Colors.RED,\n            curved=False\n        )\n    ]\n    \n    # Configuração inicial do gráfico\n    chart = ft.LineChart(\n        data_series=data_1,\n        animate=1000,  # Animação de 1000 ms ao carregar dados\n        min_y=0,\n        max_y=15,\n        min_x=1,\n        max_x=14,\n        expand=True\n    )\n    \n    # Função para alternar entre curvas e linhas retas\n    def toggle_curve(e):\n        if s.toggle:\n            for data in chart.data_series:\n                data.curved = False\n        else:\n            for data in chart.data_series:\n                data.curved = True\n        s.toggle = not s.toggle\n        chart.update()\n\n    page.add(ft.IconButton(ft.Icons.REFRESH, on_click=toggle_curve), chart)\n\nft.app(main)\n```\n\n### Exemplo 2: Gráfico de Linha com Efeitos de Transparência e Background Colorido\n\n```python\nimport flet as ft\n\nclass State:\n    toggle = True\n\ns = State()\n\ndef main(page: ft.Page):\n    # Dados para o gráfico de linha com efeito de transparência\n    data_1 = [\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(i, 2*i % 5 + 1) for i in range(1, 20)\n            ],\n            stroke_width=3,\n            color=ft.Colors.with_opacity(0.75, ft.Colors.GREEN),\n            below_line_bgcolor=ft.Colors.with_opacity(0.1, ft.Colors.GREEN)\n        )\n    ]\n\n    chart = ft.LineChart(\n        data_series=data_1,\n        min_y=0,\n        max_y=6,\n        min_x=1,\n        max_x=19,\n        expand=True\n    )\n\n    page.add(chart)\n\nft.app(main)\n```\n\n### Exemplo 3: Gráfico de Linha com Interação para Atualizar Dados\n\n```python\nimport flet as ft\nimport random\n\nclass State:\n    update = True\n\ns = State()\n\ndef main(page: ft.Page):\n    # Dados iniciais\n    data_series = [\n        ft.LineChartData(\n            data_points=[ft.LineChartDataPoint(x, random.uniform(0, 10)) for x in range(10)],\n            color=ft.Colors.BLUE\n        )\n    ]\n    \n    chart = ft.LineChart(\n        data_series=data_series,\n        min_y=0, max_y=10, min_x=0, max_x=10,\n        expand=True\n    )\n\n    # Função para atualizar os dados\n    def update_data(e):\n        new_data = [\n            ft.LineChartData(\n                data_points=[ft.LineChartDataPoint(x, random.uniform(0, 10)) for x in range(10)],\n                color=ft.Colors.RED if s.update else ft.Colors.BLUE\n            )\n        ]\n        chart.data_series = new_data\n        s.update = not s.update\n        chart.update()\n\n    page.add(ft.IconButton(ft.Icons.REFRESH, on_click=update_data), chart)\n\nft.app(main)\n```\n\nCada um desses exemplos mostra maneiras diferentes de manipular e apresentar dados em gráficos de linha usando Flet, permitindo visualizações interativas e dinâmicas."
}