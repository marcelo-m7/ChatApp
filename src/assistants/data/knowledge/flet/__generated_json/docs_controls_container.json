{
    "file": "docs_controls_container.py",
    "description": "Vou descrever cada um dos códigos apresentados, explicando suas funções e propriedades em detalhes. O Flet é uma biblioteca Python que permite a construção de aplicativos de interface gráfica (GUI) com uma sintaxe que lembra o Flutter.\n\n### Primeiro Código: Containers Clicáveis e Não Clicáveis\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Containers - clickable and not\"\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.add(\n        ft.Row(\n            [\n                ft.Container(\n                    content=ft.Text(\"Non clickable\"),\n                    margin=10,\n                    padding=10,\n                    alignment=ft.alignment.center,\n                    bgcolor=ft.Colors.AMBER,\n                    width=150,\n                    height=150,\n                    border_radius=10,\n                ),\n                ft.Container(\n                    content=ft.Text(\"Clickable without Ink\"),\n                    margin=10,\n                    padding=10,\n                    alignment=ft.alignment.center,\n                    bgcolor=ft.Colors.GREEN_200,\n                    width=150,\n                    height=150,\n                    border_radius=10,\n                    on_click=lambda e: print(\"Clickable without Ink clicked!\"),\n                ),\n                ft.Container(\n                    content=ft.Text(\"Clickable with Ink\"),\n                    margin=10,\n                    padding=10,\n                    alignment=ft.alignment.center,\n                    bgcolor=ft.Colors.CYAN_200,\n                    width=150,\n                    height=150,\n                    border_radius=10,\n                    ink=True,\n                    on_click=lambda e: print(\"Clickable with Ink clicked!\"),\n                ),\n                ft.Container(\n                    content=ft.Text(\"Clickable transparent with Ink\"),\n                    margin=10,\n                    padding=10,\n                    alignment=ft.alignment.center,\n                    width=150,\n                    height=150,\n                    border_radius=10,\n                    ink=True,\n                    on_click=lambda e: print(\"Clickable transparent with Ink clicked!\"),\n                ),\n            ],\n            alignment=ft.MainAxisAlignment.CENTER,\n        ),\n    )\n\nft.app(main)\n```\n\nEste código cria um aplicativo com quatro containers. Cada container possui diferentes configurações de interatividade:\n\n1. **Non Clickable**: Um container simples sem interação.\n2. **Clickable without Ink**: Um container clicável que imprime uma mensagem no console ao ser clicado, mas não mostra efeito visual de clique (ink).\n3. **Clickable with Ink**: Similar ao anterior, mas com um efeito visual (ink) ao ser clicado.\n4. **Clickable Transparent with Ink**: Um container clicável com efeito visual, mas sem cor de fundo definida, mostrando apenas o efeito ao clicar.\n\nOs containers estão organizados em uma `Row` com alinhamento centralizado tanto vertical quanto horizontalmente.\n\n### Segundo Código: Stack com Containers\n\n```python\nft.Stack(\n    [\n        ft.Container(\n            content=ft.Text(\"Hello\"),\n            image_src=\"https://picsum.photos/100/100\",\n            width=100,\n            height=100,\n        ),\n        ft.Container(\n            width=50,\n            height=50,\n            blur=10,\n            bgcolor=\"#44CCCC00\",\n        ),\n        ft.Container(\n            width=50,\n            height=50,\n            left=10,\n            top=60,\n            blur=(0, 10),\n        ),\n        ft.Container(\n            top=10,\n            left=60,\n            blur=ft.Blur(10, 0, ft.BlurTileMode.MIRROR),\n            width=50,\n            height=50,\n            bgcolor=\"#44CCCCCC\",\n            border=ft.border.all(2, ft.Colors.BLACK),\n        ),\n    ]\n)\n```\n\nEste trecho de código parece estar incompleto pois não está dentro de uma função ou não inicia uma aplicação Flet com `ft.app()`. Presumindo que fosse parte de um contexto maior, o bloco define uma pilha (`Stack`) de containers que:\n1. Exibe uma imagem e texto.\n2. Aplica um efeito de desfoque.\n3. Posiciona containers com desfoque específico e bordas.\n\n### Terceiro Código: Container com Mudança de Cor ao Passar o Mouse\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def on_hover(e):\n        e.control.bgcolor = \"blue\" if e.data == \"true\" else \"red\"\n        e.control.update()\n    page.add(\n        ft.Container(width=100, height=100, bgcolor=\"red\", ink=False, on_hover=on_hover)\n    )\n\nft.app(main)\n```\n\nEste script cria um container que muda sua cor de fundo para azul quando o cursor do mouse está sobre ele e volta para vermelho quando o cursor sai. A função `on_hover` manipula esse comportamento.\n\n### Quarto Código: Eventos de Clique e Pressão Longa\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    def on_long_press(e):\n        print(\"on long press\")\n        page.add(ft.Text(\"on_long_press triggered\"))\n    def on_click(e):\n        print(\"on click\")\n        page.add(ft.Text(\"on_click triggered\"))\n    def on_tap_down(e: ft.ContainerTapEvent):\n        print(\"on tap down\", e.local_x, e.local_y)\n        page.add(ft.Text(\"on_tap_down triggered\"))\n    c = ft.Container(\n        bgcolor=ft.Colors.RED,\n        content=ft.Text(\"Test Long Press\"),\n        height=100,\n        width=100,\n        on_click=on_click,\n        on_long_press=on_long_press,\n        on_tap_down=on_tap_down,\n    )\n    page.add(c)\n\nft.app(main)\n```\n\nEste código cria um container que responde a diferentes tipos de interações: clique normal, pressão longa e toque. Cada evento imprime uma mensagem no console e adiciona um texto na página, demonstrando a interação. \n\nEsses exemplos demonstram como o Flet pode ser usado para criar interfaces interativas com facilidade em Python, aproveitando eventos, estilos e alinhamentos para manipular a experiência do usuário.",
    "examples": "Os exemplos de código fornecidos ilustram várias maneiras de utilizar containers em Flet, uma biblioteca Python para criar interfaces gráficas. Cada exemplo aborda um cenário distinto, e abaixo, vamos criar exemplos adicionais que demonstram outras variações de uso dessas funcionalidades em Flet.\n\n### 1. Containers com diferentes tipos de alinhamento\n\nEste exemplo mostra como alinhar conteúdo dentro de containers usando diferentes propriedades de alinhamento.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Row([\n            ft.Container(\n                content=ft.Text(\"Left Align\"),\n                padding=10,\n                bgcolor=ft.Colors.BLUE_100,\n                width=200,\n                height=100,\n                alignment=ft.alignment.top_left,\n            ),\n            ft.Container(\n                content=ft.Text(\"Center Align\"),\n                padding=10,\n                bgcolor=ft.Colors.GREEN_100,\n                width=200,\n                height=100,\n                alignment=ft.alignment.center,\n            ),\n            ft.Container(\n                content=ft.Text(\"Right Align\"),\n                padding=10,\n                bgcolor=ft.Colors.RED_100,\n                width=200,\n                height=100,\n                alignment=ft.alignment.bottom_right,\n            ),\n        ])\n    )\n\nft.app(main)\n```\n\n### 2. Container com bordas e sombra\n\nEste exemplo mostra como adicionar bordas e sombra a um container para criar um efeito de elevação visual.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Container(\n            content=ft.Text(\"Elevated Container\"),\n            width=200,\n            height=100,\n            padding=20,\n            bgcolor=ft.Colors.PURPLE_100,\n            border=ft.border.all(3, ft.Colors.PURPLE_700),\n            elevation=10\n        )\n    )\n\nft.app(main)\n```\n\n### 3. Container Interativo com Efeito de Hover\n\nEste exemplo cria um container interativo que muda de cor quando o mouse passa sobre ele.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def on_hover(e):\n        e.control.bgcolor = ft.Colors.YELLOW_200 if e.data == \"true\" else ft.Colors.ORANGE_200\n        e.control.update()\n\n    page.add(\n        ft.Container(\n            content=ft.Text(\"Hover over me!\"),\n            width=200,\n            height=100,\n            bgcolor=ft.Colors.ORANGE_200,\n            ink=True,\n            on_hover=on_hover\n        )\n    )\n\nft.app(main)\n```\n\n### 4. Container com Texto Multilinha e Imagem\n\nEste exemplo mostra como combinar texto e imagens dentro de um container, ideal para criar cartões ou painéis informativos.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Container(\n            content=ft.Column([\n                ft.Image(src=\"https://picsum.photos/200/100\"),\n                ft.Text(\"This is a beautiful scenery!\", max_lines=2)\n            ]),\n            padding=10,\n            bgcolor=ft.Colors.LIGHT_BLUE_100,\n            width=220,\n            height=200,\n            border_radius=10\n        )\n    )\n\nft.app(main)\n```\n\nCada um desses exemplos explora diferentes aspectos da personalização de containers no Flet, mostrando como você pode manipular propriedades visuais e interações para atender às necessidades específicas de suas aplicações."
}