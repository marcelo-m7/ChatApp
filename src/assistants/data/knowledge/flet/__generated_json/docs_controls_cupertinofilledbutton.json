{
    "file": "docs_controls_cupertinofilledbutton.py",
    "description": "O código que você forneceu é um exemplo de aplicativo simples usando a biblioteca Flet em Python. Flet é uma biblioteca que permite criar aplicativos web usando uma abordagem semelhante ao Flutter, mas com Python como linguagem de programação. Vamos detalhar cada parte do código:\n\n1. **Importação da biblioteca Flet:**\n   ```python\n   import flet as ft\n   ```\n   Aqui, a biblioteca `flet` é importada com o alias `ft` para facilitar o acesso às suas classes e métodos.\n\n2. **Definição da função `main`:**\n   ```python\n   def main(page: ft.Page):\n   ```\n   Esta função é definida para manipular a lógica principal do aplicativo. Ela recebe um parâmetro `page`, que é uma instância de `ft.Page`. Este objeto `page` representa a página web onde os elementos UI (interface de usuário) serão renderizados.\n\n3. **Adicionando um botão ao `page`:**\n   ```python\n   page.add(\n       ft.CupertinoFilledButton(\n           content=ft.Text(\"CupertinoFilled\"),\n           opacity_on_click=0.3,\n           on_click=lambda e: print(\"CupertinoFilledButton clicked!\"),\n       ),\n   )\n   ```\n   Dentro da função `main`, um botão do tipo `CupertinoFilledButton` é adicionado à página. Este botão possui as seguintes propriedades e comportamentos:\n   - `content`: Define o conteúdo do botão, que neste caso é um texto \"CupertinoFilled\". O texto é criado usando `ft.Text(\"CupertinoFilled\")`.\n   - `opacity_on_click`: Define a opacidade do botão quando clicado. O valor `0.3` implica que o botão se tornará 30% opaco quando clicado.\n   - `on_click`: É um evento que é chamado quando o botão é clicado. Aqui, ele é definido usando uma expressão lambda que simplesmente imprime uma mensagem no console. `lambda e: print(\"CupertinoFilledButton clicked!\")` é uma função anônima que recebe um evento `e` e executa o `print`.\n\n4. **Iniciando o aplicativo Flet:**\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia o aplicativo usando a função `main` como ponto de entrada. Quando o aplicativo é iniciado, a função `main` é chamada com um objeto `page` criado pela biblioteca Flet, e o UI especificado na função `main` é renderizado na página web.\n\nEssencialmente, este código cria um aplicativo web simples com um único botão que altera sua opacidade ao ser clicado e imprime uma mensagem no console. É um exemplo básico de como usar componentes e eventos em um aplicativo Flet.",
    "examples": "Claro! O código que você forneceu é um exemplo de aplicação simples usando a biblioteca Flet para criar uma interface de usuário com um botão do estilo Cupertino. Vou criar alguns exemplos adicionais destacando diferentes formas de uso, alterando propriedades do botão, adicionando mais componentes e interações.\n\n### Exemplo 1: Alterando a Cor e o Texto do Botão\n\nEste exemplo mostra como mudar a cor e o texto do botão.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.CupertinoFilledButton(\n            content=ft.Text(\"Clique Aqui!\"),\n            color=ft.colors.BLUE,\n            on_click=lambda e: print(\"Botão clicado!\"),\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Usando IconButton e Respondendo a Eventos\n\nAqui, usamos um `IconButton` para uma ação mais visual, como um botão de 'play'.\n\n```python\nimport flet as ft\n\ndef on_play_clicked(e):\n    print(\"Play button clicked!\")\n\ndef main(page: ft.Page):\n    play_icon = ft.Icon(name=\"play_arrow\", size=32)\n    play_button = ft.CupertinoFilledButton(\n        content=play_icon,\n        color=ft.colors.GREEN,\n        on_click=on_play_clicked\n    )\n    page.add(play_button)\n\nft.app(main)\n```\n\n### Exemplo 3: Múltiplos Botões com Layout Horizontal\n\nEste exemplo organiza vários botões horizontalmente usando `Row`.\n\n```python\nimport flet as ft\n\ndef on_button_click(e, button_name):\n    print(f\"{button_name} button clicked!\")\n\ndef main(page: ft.Page):\n    buttons = ft.Row([\n        ft.CupertinoFilledButton(\n            content=ft.Text(\"Botão 1\"),\n            on_click=lambda e: on_button_click(e, \"Botão 1\")\n        ),\n        ft.CupertinoFilledButton(\n            content=ft.Text(\"Botão 2\"),\n            color=ft.colors.RED,\n            on_click=lambda e: on_button_click(e, \"Botão 2\")\n        ),\n        ft.CupertinoFilledButton(\n            content=ft.Text(\"Botão 3\"),\n            color=ft.colors.PURPLE,\n            on_click=lambda e: on_button_click(e, \"Botão 3\")\n        ),\n    ])\n    page.add(buttons)\n\nft.app(main)\n```\n\n### Exemplo 4: Botão com Ícone e Texto\n\nCombina um ícone com texto no mesmo botão.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    button_content = ft.Row([\n        ft.Icon(name=\"face\", size=24),\n        ft.Text(\"Perfil\")\n    ], alignment=\"center\")\n    profile_button = ft.CupertinoFilledButton(\n        content=button_content,\n        on_click=lambda e: print(\"Perfil clicado!\")\n    )\n    page.add(profile_button)\n\nft.app(main)\n```\n\nEstes exemplos demonstram como você pode manipular e expandir o uso de `CupertinoFilledButton` em aplicações Flet, ajustando propriedades, respondendo a eventos, e integrando com outros widgets para criar uma interface de usuário rica e interativa."
}