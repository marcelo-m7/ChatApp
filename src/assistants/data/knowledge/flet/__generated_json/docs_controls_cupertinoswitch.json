{
    "file": "docs_controls_cupertinoswitch.py",
    "description": "O código fornecido é um exemplo de uma aplicação utilizando a biblioteca Flet para criar uma interface de usuário (UI) com diferentes tipos de componentes de switch (interruptores) em um ambiente web. Aqui está uma descrição detalhada de cada parte do código:\n\n1. **Importação de Módulos e Configuração de Logging**:\n   ```python\n   import logging\n   import flet as ft\n   import asyncio\n   logging.basicConfig(level=logging.DEBUG)\n   ```\n   - `logging`: Utilizado para configurar o registro de mensagens de depuração, informação, avisos, entre outros. Aqui, o nível de log é definido como `DEBUG`, o que significa que todas as mensagens de nível DEBUG e acima serão logadas.\n   - `flet`: É a biblioteca para construir aplicações GUI que podem ser acessadas através de navegadores web.\n   - `asyncio`: Uma biblioteca para escrever código concorrente usando a sintaxe `async`/`await`.\n\n2. **Definição da Função Principal**:\n   ```python\n   def main(page: ft.Page):\n   ```\n   Esta função `main` aceita um parâmetro `page`, que é um objeto `Page` do Flet. Este objeto é usado para adicionar e gerenciar os componentes da UI na página.\n\n3. **Adicionando Componentes à Página**:\n   ```python\n   page.add(...)\n   ```\n   O método `add` é usado para adicionar componentes à página. Vamos detalhar os componentes adicionados:\n\n   - **CupertinoSwitch**:\n     ```python\n     ft.CupertinoSwitch(\n         label=\"Cupertino Switch\",\n         value=True,\n     )\n     ```\n     Este componente representa um switch no estilo iOS (Cupertino). `label` define o texto ao lado do switch e `value` define o estado inicial (ligado ou desligado, `True` para ligado).\n\n   - **Switch (Material Design)**:\n     ```python\n     ft.Switch(\n         label=\"Material Switch\",\n         value=True,\n         thumb_color={ft.ControlState.SELECTED: ft.Colors.BLUE},\n         track_color=ft.Colors.YELLOW,\n         focus_color=ft.Colors.PURPLE,\n     )\n     ```\n     Este é um switch no estilo Material Design. Além de `label` e `value`, ele tem propriedades adicionais para personalizar a cor: `thumb_color` para a cor da alavanca quando selecionada, `track_color` para a cor do trilho, e `focus_color` para a cor quando o componente está focado.\n\n   - **Container**:\n     ```python\n     ft.Container(height=20)\n     ```\n     Um componente que serve como um espaço vazio (spacer) para adicionar espaço entre elementos na UI.\n\n   - **Text**:\n     ```python\n     ft.Text(\"Adaptive Switch shows as CupertinoSwitch on macOS and iOS and as Switch on other platforms:\")\n     ```\n     Um componente de texto para adicionar informação na página.\n\n   - **Switch Adaptativo**:\n     ```python\n     ft.Switch(\n         adaptive=True,\n         label=\"Adaptive Switch\",\n         value=True,\n     )\n     ```\n     Um switch adaptativo que automaticamente muda sua aparência para CupertinoSwitch em plataformas macOS e iOS, e para Switch estilo Material em outras plataformas.\n\n4. **Execução da Aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação chamando a função `main` com a página que será servida aos usuários.\n\nO código acima ilustra bem como criar uma interface simples com diferentes tipos de switches usando a biblioteca Flet, permitindo a criação de aplicações GUI de forma rápida e acessível através de navegadores web.",
    "examples": "O código que você forneceu é um exemplo de utilização de diferentes tipos de switches (interruptores) na biblioteca Flet, que é uma biblioteca para criar aplicações web com Python. O exemplo inclui o uso de `CupertinoSwitch`, `Switch` e um `Switch` adaptativo que muda de aparência conforme a plataforma em que é executado. Vamos explorar mais algumas variações e usos desses componentes para tornar seu exemplo ainda mais robusto e ilustrativo.\n\n### Exemplo 1: Switch com Eventos\nAdicionando a funcionalidade de capturar mudanças de estado do switch, que pode ser útil em cenários reais de aplicativos:\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def on_switch_change(e):\n        page.controls[1].value = \"Switch está \" + (\"ON\" if e.control.value else \"OFF\")\n        page.update()\n\n    switch = ft.Switch(value=False, on_change=on_switch_change)\n    status_label = ft.TextField(value=\"Switch está OFF\", enabled=False)\n    \n    page.add(switch, status_label)\n\nft.app(main)\n```\n\n### Exemplo 2: Switch com Diferentes Cores e Estados\nExplorando mais a personalização visual dos switches:\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Switch(\n            label=\"Custom Color Switch\",\n            value=True,\n            thumb_color={\n                ft.ControlState.SELECTED: ft.Colors.GREEN,\n                ft.ControlState.UNSELECTED: ft.Colors.RED\n            },\n            track_color={\n                ft.ControlState.SELECTED: ft.Colors.LIGHT_GREEN,\n                ft.ControlState.UNSELECTED: ft.Colors.LIGHT_PINK\n            }\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Grupo de Switches com Layout\nOrganizando switches em um layout vertical ou horizontal:\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Column([\n            ft.Switch(label=\"Switch 1\", value=True),\n            ft.Switch(label=\"Switch 2\", value=False),\n            ft.Switch(label=\"Switch 3\", value=True)\n        ])\n    )\n\nft.app(main)\n```\n\n### Exemplo 4: Switches com Tamanhos Diferentes\nUtilizando switches de diferentes tamanhos, o que pode ser útil para diferentes dispositivos ou importância visual:\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Switch(\n            label=\"Large Switch\",\n            value=True,\n            size=ft.SwitchSize.LARGE\n        ),\n        ft.Switch(\n            label=\"Small Switch\",\n            value=False,\n            size=ft.SwitchSize.SMALL\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 5: Switches em um Formulário com Botão de Envio\nIntegrando switches em um formulário com um botão para submeter os estados:\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def submit_form(e):\n        values = [switch1.value, switch2.value]\n        page.controls[2].value = \"Valores: \" + str(values)\n        page.update()\n\n    switch1 = ft.Switch(label=\"Accept Terms\", value=False)\n    switch2 = ft.Switch(label=\"Receive Newsletter\", value=True)\n    submit_button = ft.ElevatedButton(text=\"Submit\", on_click=submit_form)\n    result_label = ft.TextField(value=\"\", enabled=False)\n\n    page.add(switch1, switch2, submit_button, result_label)\n\nft.app(main)\n```\n\nEsses exemplos mostram diferentes maneiras de utilizar e personalizar switches na biblioteca Flet, adequando-se a uma variedade de necessidades em interfaces de usuário."
}