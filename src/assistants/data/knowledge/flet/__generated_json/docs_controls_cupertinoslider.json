{
    "file": "docs_controls_cupertinoslider.py",
    "description": "O código que você forneceu é um exemplo de como utilizar a biblioteca Flet para criar uma aplicação simples com interface gráfica em Python. O código cria uma aplicação que consiste em um controle deslizante (slider) com alguns eventos associados. Vamos analisar cada parte do código:\n\n1. **Importação da biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Esta linha importa a biblioteca Flet, que é usada para criar interfaces gráficas de usuário (GUI).\n\n2. **Definição da função `main`**:\n   ```python\n   def main(page):\n   ```\n   Esta função é chamada quando a aplicação é iniciada. O argumento `page` representa a página principal da aplicação.\n\n3. **Configurações da página**:\n   ```python\n   page.horizontal_alignment = page.vertical_alignment = \"center\"\n   page.theme_mode = ft.ThemeMode.LIGHT\n   ```\n   - `horizontal_alignment` e `vertical_alignment` são configurados para \"center\" para centralizar os controles na página.\n   - `theme_mode` é definido como `ft.ThemeMode.LIGHT`, o que aplica um tema claro à página.\n\n4. **Eventos do Slider**:\n   - `handle_change_start(e)`: Função chamada quando o usuário começa a mover o slider. Ela atualiza o texto de `slider_status` para \"Sliding\".\n   - `handle_change(e)`: Função chamada enquanto o valor do slider está mudando. Atualiza o texto de `slider_value` para mostrar o valor atual do slider.\n   - `handle_change_end(e)`: Função chamada quando o usuário termina de mover o slider. Define o `slider_status` para \"Finished sliding\".\n\n5. **Adicionando controles à página**:\n   ```python\n   page.add(\n       slider_value := ft.Text(\"0.0\"),\n       ft.CupertinoSlider(\n           divisions=5,\n           max=100,\n           active_color=ft.Colors.PURPLE,\n           thumb_color=ft.Colors.PURPLE,\n           on_change_start=handle_change_start,\n           on_change_end=handle_change_end,\n           on_change=handle_change,\n       ),\n       slider_status := ft.Text(),\n   )\n   ```\n   - `slider_value` é uma instância de `ft.Text` inicializada com o texto \"0.0\". Este texto mostra o valor atual do slider.\n   - `ft.CupertinoSlider` cria um controle deslizante estilo Cupertino com:\n     - `divisions=5`: Divide o slider em 5 partes.\n     - `max=100`: Define o valor máximo do slider como 100.\n     - `active_color` e `thumb_color` definidos como roxo (`ft.Colors.PURPLE`).\n     - Eventos `on_change_start`, `on_change` e `on_change_end` associados às funções definidas anteriormente.\n   - `slider_status` é outra instância de `ft.Text` que mostra o estado atual do slider (\"Sliding\" ou \"Finished sliding\").\n\n6. **Iniciando a aplicação com Flet**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação chamando a função `main`.\n\nEsse código exemplifica como criar uma interface de usuário interativa com um slider usando a biblioteca Flet, gerenciando eventos de interação do usuário e atualizando a interface com base nas ações do usuário.",
    "examples": "O código Python que você forneceu utiliza a biblioteca Flet para criar uma interface gráfica simples com um controle deslizante (slider) e texto que reflete o valor do slider e o status da ação de deslizar. Vamos explorar algumas variações desse código para demonstrar diferentes formas de uso e estilização dos componentes na biblioteca Flet.\n\n### Exemplo 1: Adicionando Título e Alterando o Tema\n\nNeste exemplo, adicionaremos um título à página e mudaremos o tema para o modo escuro.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.add(ft.Text(\"Slider Demo\", size=30, weight=\"bold\"))  # Adicionando um título\n    page.horizontal_alignment = page.vertical_alignment = \"center\"\n    page.theme_mode = ft.ThemeMode.DARK  # Mudando para tema escuro\n\n    def handle_change_start(e):\n        slider_status.value = \"Sliding\"\n        page.update()\n\n    def handle_change(e):\n        slider_value.value = str(e.control.value)\n        page.update()\n\n    def handle_change_end(e):\n        slider_status.value = \"Finished sliding\"\n        page.update()\n\n    page.add(\n        slider_value := ft.Text(\"0.0\"),\n        ft.CupertinoSlider(\n            divisions=10,  # Aumentando o número de divisões\n            max=200,  # Aumentando o valor máximo\n            active_color=ft.Colors.GREEN,  # Mudando a cor ativa\n            thumb_color=ft.Colors.GREEN,  # Mudando a cor do polegar\n            on_change_start=handle_change_start,\n            on_change_end=handle_change_end,\n            on_change=handle_change,\n        ),\n        slider_status := ft.Text(),\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Slider com Valores Iniciais e Final Diferentes\n\nAqui, vamos configurar um slider que começa de um valor não-zero e tem um valor final específico.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = page.vertical_alignment = \"center\"\n    page.theme_mode = ft.ThemeMode.LIGHT\n\n    def handle_change_start(e):\n        slider_status.value = \"Sliding\"\n        page.update()\n\n    def handle_change(e):\n        slider_value.value = f\"{e.control.value:.2f}\"\n        page.update()\n\n    def handle_change_end(e):\n        slider_status.value = \"Finished sliding\"\n        page.update()\n\n    page.add(\n        slider_value := ft.Text(\"25.0\"),\n        ft.CupertinoSlider(\n            min=25,  # Definindo valor inicial\n            max=75,  # Definindo valor final\n            value=25,  # Valor inicial do controle deslizante\n            divisions=5,\n            active_color=ft.Colors.BLUE,\n            thumb_color=ft.Colors.BLUE,\n            on_change_start=handle_change_start,\n            on_change_end=handle_change_end,\n            on_change=handle_change,\n        ),\n        slider_status := ft.Text(),\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Vários Sliders com Diferentes Configurações\n\nPor fim, vamos criar uma interface com múltiplos sliders, cada um com configurações diferentes, para demonstrar a flexibilidade de estilização e funcionalidade.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = page.vertical_alignment = \"center\"\n    page.theme_mode = ft.ThemeMode.LIGHT\n\n    def handle_change(e, slider_id):\n        if slider_id == 1:\n            slider1_value.value = str(e.control.value)\n        elif slider_id == 2:\n            slider2_value.value = str(e.control.value)\n        page.update()\n\n    slider1_value = ft.Text(\"0\")\n    slider2_value = ft.Text(\"0\")\n\n    page.add(\n        slider1_value,\n        ft.CupertinoSlider(\n            min=0, max=100, divisions=10, value=50,\n            active_color=ft.Colors.RED, thumb_color=ft.Colors.RED,\n            on_change=lambda e: handle_change(e, 1),\n        ),\n        ft.Text(\"Slider 2\"),\n        slider2_value,\n        ft.CupertinoSlider(\n            min=0, max=200, divisions=20, value=100,\n            active_color=ft.Colors.GREEN, thumb_color=ft.Colors.GREEN,\n            on_change=lambda e: handle_change(e, 2),\n        ),\n    )\n\nft.app(main)\n```\n\nCada um desses exemplos mostra como você pode utilizar e personalizar a interação com sliders no Flet, ajustando parâmetros como valor inicial, máximo, divisões, cores, entre outros, para se adequar a diferentes necessidades e preferências de design de interface."
}