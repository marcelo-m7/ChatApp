{
    "file": "docs_controls_barchart.py",
    "description": "O código fornecido é um exemplo de como usar a biblioteca Flet em Python para criar aplicações web com gráficos interativos. Vamos analisar cada parte do código detalhadamente:\n\n### Primeiro Bloco de Código\n\nEste bloco mostra como criar um gráfico de barras simples usando a classe `BarChart` da biblioteca Flet.\n\n1. **Importação da Biblioteca**:\n   ```python\n   import flet as ft\n   ```\n   Importa a biblioteca Flet, que é usada para construir interfaces de usuário.\n\n2. **Função Principal**:\n   ```python\n   def main(page: ft.Page):\n   ```\n   Define a função principal que recebe um objeto `Page` como argumento. Este objeto representa a página web onde o gráfico será exibido.\n\n3. **Criação do Gráfico de Barras**:\n   - **`BarChart`**:\n     Cria um gráfico de barras com várias propriedades como bordas, eixos e linhas de grade. Alguns pontos importantes:\n     - `bar_groups`: Define grupos de barras. Cada grupo pode ter uma ou mais barras.\n     - `BarChartRod`: Define a barra individual com propriedades como altura, cor, largura e bordas.\n     - `ChartAxis`: Define os eixos do gráfico, incluindo os rótulos nos eixos.\n     - `ChartGridLines`: Adiciona linhas de grade horizontais para melhor visualização dos valores.\n   - **Eventos e Interações**:\n     - `interactive`: Permite interações com o gráfico, como destacar ao passar o mouse.\n   - **Adição ao Page**:\n     ```python\n     page.add(chart)\n     ```\n     Adiciona o gráfico à página.\n\n4. **Execução da Aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Inicia a aplicação chamando a função `main`.\n\n### Segundo Bloco de Código\n\nEste bloco mostra uma implementação mais avançada com interatividade e customização de barras.\n\n1. **Classe Customizada `SampleRod`**:\n   - Herda de `BarChartRod` e adiciona comportamentos personalizados, como mudar a cor e adicionar bordas quando a barra é destacada (hover).\n   - Métodos `_before_build_command` e `_build` são sobrescritos para modificar propriedades antes da construção da barra.\n\n2. **Função Principal com Eventos**:\n   - **`on_chart_event`**:\n     Define um manipulador de eventos que atualiza o estado de \"hover\" das barras baseado na interação do usuário.\n   - **Criação do `BarChart` com `SampleRod`**:\n     Usa a classe `SampleRod` para criar barras que respondem ao evento de hover.\n   - **Container**:\n     Envolve o gráfico em um `Container` com propriedades visuais adicionais como cor de fundo e bordas arredondadas.\n\nAmbos os blocos de código ilustram como construir gráficos interativos em uma aplicação web usando a biblioteca Flet em Python. As personalizações adicionadas no segundo exemplo demonstram a flexibilidade da biblioteca para atender a necessidades específicas de design e interação do usuário.",
    "examples": "Aqui estão alguns exemplos adicionais que demonstram diferentes formas de usar o código original do gráfico de barras e o exemplo com `SampleRod`, modificando aspectos como o tipo de dados apresentados, a estilização e a interatividade. Cada exemplo foi criado para ilustrar como você pode adaptar o gráfico para diferentes cenários.\n\n### Exemplo 1: Gráfico de Barras com Dados Dinâmicos e Eventos de Mouse\n\nEste exemplo mostra como você pode modificar a altura das barras de forma dinâmica ao passar o mouse, fornecendo uma interação visual mais direta.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def on_chart_event(e: ft.BarChartEvent):\n        if e.type == ft.BarChartEventType.ROD_HOVER:\n            for group in chart.bar_groups:\n                for rod in group.bar_rods:\n                    if rod == e.rod:\n                        rod.to_y *= 1.1  # Aumenta a barra ao passar o mouse\n                    else:\n                        rod.to_y /= 1.1  # Reduz as outras barras\n            chart.update()\n\n    data_values = [10, 20, 30, 40, 50, 60]\n    bar_groups = [\n        ft.BarChartGroup(\n            x=i,\n            bar_rods=[ft.BarChartRod(from_y=0, to_y=data_values[i], color=ft.Colors.BLUE)]\n        ) for i in range(len(data_values))\n    ]\n    \n    chart = ft.BarChart(\n        bar_groups=bar_groups,\n        on_chart_event=on_chart_event,\n        interactive=True,\n        expand=True,\n    )\n    page.add(chart)\n\nft.app(main)\n```\n\n### Exemplo 2: Gráfico de Barras com Cores Gradientes\n\nEste exemplo ilustra como aplicar cores gradientes a cada barra para uma apresentação visual mais atraente.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    data_values = [20, 40, 60, 80, 100]\n    colors = [ft.Colors.RED, ft.Colors.ORANGE, ft.Colors.YELLOW, ft.Colors.GREEN, ft.Colors.BLUE]\n\n    bar_groups = [\n        ft.BarChartGroup(\n            x=i,\n            bar_rods=[\n                ft.BarChartRod(\n                    from_y=0,\n                    to_y=data_values[i],\n                    color=colors[i],\n                    gradient=ft.Gradient(colors[i], ft.Colors.with_opacity(0.4, colors[i]))\n                )\n            ]\n        ) for i in range(len(data_values))\n    ]\n\n    chart = ft.BarChart(\n        bar_groups=bar_groups,\n        expand=True,\n    )\n    page.add(chart)\n\nft.app(main)\n```\n\n### Exemplo 3: Gráfico de Barras com Animação na Inicialização\n\nEste exemplo adiciona uma animação simples que mostra as barras crescendo desde o zero até o valor final quando a página é carregada.\n\n```python\nimport flet as ft\nimport time\n\ndef main(page: ft.Page):\n    data_values = [35, 50, 45, 60, 55]\n    bar_groups = [\n        ft.BarChartGroup(\n            x=i,\n            bar_rods=[ft.BarChartRod(from_y=0, to_y=0, color=ft.Colors.PURPLE)]\n        ) for i in range(len(data_values))\n    ]\n\n    chart = ft.BarChart(bar_groups=bar_groups, expand=True)\n    page.add(chart)\n\n    # Animação de crescimento das barras\n    for increment in range(1, 11):  # 10 passos de animação\n        for i, group in enumerate(chart.bar_groups):\n            group.bar_rods[0].to_y = data_values[i] * (increment / 10)\n        chart.update()\n        time.sleep(0.1)  # Pausa entre atualizações para visualizar a animação\n\nft.app(main)\n```\n\nCada um desses exemplos mostra diferentes maneiras de utilizar os gráficos de barra com a biblioteca Flet, permitindo a criação de visualizações de dados interativas e visualmente agradáveis."
}