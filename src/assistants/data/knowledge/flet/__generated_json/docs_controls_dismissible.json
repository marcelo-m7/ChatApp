{
    "file": "docs_controls_dismissible.py",
    "description": "O código fornecido é um exemplo de aplicativo usando a biblioteca Flet, que permite criar interfaces de usuário interativas e modernas para aplicações Python. O código cria uma interface onde itens em uma lista podem ser deslizados para serem excluídos, com uma confirmação adicional para a exclusão. Vamos analisar cada parte do código:\n\n### Importação da Biblioteca\n```python\nimport flet as ft\n```\nEsta linha importa a biblioteca Flet, que será usada para construir a interface gráfica.\n\n### Função Principal\n```python\ndef main(page):\n```\nDefine a função principal que é chamada quando a aplicação é iniciada. O parâmetro `page` representa a página da aplicação onde os elementos da UI são adicionados.\n\n### Lista de Itens Deslizáveis\nDentro da função principal, uma lista de itens deslizáveis (`ft.Dismissible`) é criada com um loop. Cada item pode ser deslizado para a esquerda ou para a direita para ser excluído:\n\n- **ft.ListView**: Um contêiner que permite a rolagem dos itens adicionados.\n- **ft.Dismissible**: Um widget que pode ser deslizado para realizar ações (neste caso, excluir o item). Cada item tem:\n  - **content**: O conteúdo visível, aqui um `ft.ListTile` com um título.\n  - **dismiss_direction**: Define as direções permitidas para deslizar o item.\n  - **background** e **secondary_background**: Cores de fundo que aparecem quando o item é deslizado.\n  - **on_dismiss**, **on_update**, **on_confirm_dismiss**: Funções de callback que tratam eventos diferentes relacionados ao deslizamento do item.\n\n### Diálogo de Confirmação\nUm diálogo de alerta é criado para confirmar a exclusão do item:\n- **ft.AlertDialog**: Cria um diálogo modal com um título e conteúdo.\n- **actions**: Botões \"Yes\" e \"No\" para confirmar ou cancelar a ação.\n  - **on_click**: Callback que trata o clique no botão.\n\n### Manipuladores de Eventos\n- **handle_dlg_action_clicked**: Fecha o diálogo e executa a ação baseada na escolha do usuário.\n- **handle_confirm_dismiss**: Abre o diálogo de confirmação se o item foi deslizado para a direita. Se deslizado para a esquerda, confirma automaticamente a exclusão.\n- **handle_dismiss**: Remove o item da lista e atualiza a página.\n- **handle_update**: Imprime informações sobre o progresso do deslizamento do item.\n\n### Execução da Aplicação\nNo final do arquivo, a função `ft.app(main)` inicia a aplicação chamando a função `main`.\n\n### Observação Sobre o Código Extra\nO trecho extra de código no final da sua questão parece ser um exemplo isolado de configuração de `ft.Dismissible` que não está conectado diretamente ao resto do código fornecido. Ele define diferentes limiares de deslizamento para direções verticais e da esquerda para a direita.",
    "examples": "No código fornecido, você demonstra o uso de `ft.Dismissible` dentro de uma `ft.ListView` em um aplicativo Flet, permitindo que os usuários deslizem itens para confirmar ações, como deletar um item. Abaixo, vou criar exemplos adicionais que exploram outras funcionalidades e configurações para `ft.Dismissible` e `ft.AlertDialog`, destacando diferentes maneiras de usar esses widgets em contextos variados.\n\n### Exemplo 1: Uso de `ft.Dismissible` com diferentes direções de deslizamento\n\nEste exemplo mostra como configurar `ft.Dismissible` para ser deslizado apenas em uma direção específica, como de cima para baixo.\n\n```python\nimport flet as ft\n\ndef main(page):\n    def handle_dismiss(e):\n        print(\"Item dismissed\")\n        e.control.parent.controls.remove(e.control)\n        page.update()\n\n    page.add(\n        ft.ListView(\n            expand=True,\n            controls=[\n                ft.Dismissible(\n                    content=ft.ListTile(title=ft.Text(f\"Vertical Item {i}\")),\n                    dismiss_direction=ft.DismissDirection.VERTICAL,\n                    background=ft.Container(bgcolor=ft.Colors.BLUE),\n                    on_dismiss=handle_dismiss,\n                    dismiss_thresholds={\n                        ft.DismissDirection.UP_TO_DOWN: 0.3,\n                        ft.DismissDirection.DOWN_TO_UP: 0.3,\n                    },\n                )\n                for i in range(5)\n            ],\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Customizando o `ft.AlertDialog` com diferentes estilos\n\nEste exemplo mostra como personalizar o estilo do `ft.AlertDialog`, incluindo cores de fundo e estilos de texto.\n\n```python\nimport flet as ft\n\ndef main(page):\n    def handle_dlg_action_clicked(e):\n        page.close(dlg)\n\n    dlg = ft.AlertDialog(\n        modal=True,\n        title=ft.Text(\"Custom Styled Dialog\", color=ft.Colors.YELLOW),\n        content=ft.Text(\"Do you want to proceed with the action?\", color=ft.Colors.WHITE),\n        actions=[\n            ft.TextButton(\"Confirm\", on_click=handle_dlg_action_clicked, bgcolor=ft.Colors.GREEN),\n            ft.TextButton(\"Cancel\", on_click=handle_dlg_action_clicked, bgcolor=ft.Colors.RED),\n        ],\n        bgcolor=ft.Colors.DARK_BLUE,\n        actions_alignment=ft.MainAxisAlignment.CENTER,\n    )\n\n    page.add(\n        ft.TextButton(\"Open Dialog\", on_click=lambda e: page.open(dlg))\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Uso de `ft.Dismissible` com feedback visual durante o deslizamento\n\nEste exemplo adiciona feedback visual para mostrar o progresso do deslizamento.\n\n```python\nimport flet as ft\n\ndef main(page):\n    def handle_update(e: ft.DismissibleUpdateEvent):\n        print(f\"Update - direction: {e.direction}, progress: {e.progress}\")\n        if e.progress > 0.5:\n            e.control.background.bgcolor = ft.Colors.ORANGE\n        else:\n            e.control.background.bgcolor = ft.Colors.GREEN\n        page.update()\n\n    def handle_dismiss(e):\n        e.control.parent.controls.remove(e.control)\n        page.update()\n\n    page.add(\n        ft.ListView(\n            expand=True,\n            controls=[\n                ft.Dismissible(\n                    content=ft.ListTile(title=ft.Text(f\"Dynamic Background Item {i}\")),\n                    dismiss_direction=ft.DismissDirection.HORIZONTAL,\n                    background=ft.Container(bgcolor=ft.Colors.GREEN),\n                    on_dismiss=handle_dismiss,\n                    on_update=handle_update,\n                    dismiss_thresholds={\n                        ft.DismissDirection.END_TO_START: 0.2,\n                        ft.DismissDirection.START_TO_END: 0.2,\n                    },\n                )\n                for i in range(10)\n            ],\n        )\n    )\n\nft.app(main)\n```\n\nCada um desses exemplos oferece uma maneira diferente de explorar o uso de `ft.Dismissible` e `ft.AlertDialog` em aplicativos Flet, adaptando-os para necessidades específicas de interação e visualização."
}