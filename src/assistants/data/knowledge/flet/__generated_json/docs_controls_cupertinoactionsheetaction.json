{
    "file": "docs_controls_cupertinoactionsheetaction.py",
    "description": "O código fornecido é um script Python que utiliza a biblioteca Flet para criar uma interface de usuário GUI (Graphical User Interface) que funciona tanto na web quanto no desktop. O aplicativo mostra como usar o `CupertinoActionSheet` e `CupertinoBottomSheet` para apresentar ao usuário uma série de opções e ações.\n\nAqui está uma análise detalhada de cada parte do código:\n\n### Importação da Biblioteca\n\n```python\nimport flet as ft\n```\nEsta linha importa a biblioteca Flet, que é usada para construir a aplicação GUI.\n\n### Função Principal\n\n```python\ndef main(page):\n```\nDefine a função principal que manipula a página da aplicação.\n\n### Configuração da Página\n```python\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n```\nEsta linha configura o alinhamento horizontal dos elementos na página para o centro.\n\n### Função de Manipulação do Clique\n```python\n    def handle_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.content.value}\"))\n        page.close(bottom_sheet)\n```\nEsta é uma função interna que será chamada quando qualquer ação no `CupertinoActionSheet` for clicada. Ela adiciona um texto à página indicando qual ação foi clicada e fecha a folha de ação (`CupertinoBottomSheet`).\n\n### CupertinoActionSheet\n```python\n    action_sheet = ft.CupertinoActionSheet(\n        ...\n    )\n```\nEsta parte do código cria um `CupertinoActionSheet`, que é um componente estilo iOS para mostrar um conjunto de opções ao usuário.\n\n#### Componentes do ActionSheet\n- `title`: Um widget `Row` contendo um widget `Text` para o título.\n- `message`: Um widget `Row` contendo um widget `Text` para a descrição.\n- `cancel`: Um botão de cancelar que também usa a função `handle_click` quando clicado.\n- `actions`: Uma lista de ações, cada uma representada por `CupertinoActionSheetAction`. Cada ação tem um conteúdo de texto e pode ser marcada como ação padrão (`is_default_action=True`) ou ação destrutiva (`is_destructive_action=True`).\n\n### CupertinoBottomSheet\n```python\n    bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n```\nCria um `CupertinoBottomSheet` que é um componente que desliza de baixo e apresenta o `CupertinoActionSheet` definido anteriormente.\n\n### Adicionando um Botão\n```python\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open CupertinoBottomSheet\",\n            on_click=lambda e: page.open(bottom_sheet),\n        )\n    )\n```\nAdiciona um botão à página que, quando clicado, abre o `CupertinoBottomSheet` com o `CupertinoActionSheet` dentro dele.\n\n### Inicialização do App\n```python\nft.app(main)\n```\nEsta linha inicia a aplicação chamando a função `main`.\n\n### Resumo\nEste código demonstra a utilização de componentes estilo iOS em uma aplicação Flet para interagir com o usuário através de ações como abrir uma folha de ação e manipular eventos de clique. Ele é um bom exemplo de como criar interfaces de usuário interativas e reativas com Python e Flet.",
    "examples": "O código fornecido utiliza a biblioteca Flet para criar uma interface de usuário com um estilo semelhante ao iOS, utilizando um `CupertinoBottomSheet` que contém uma planilha de ação (`CupertinoActionSheet`). A seguir, apresentarei algumas variações do exemplo original para demonstrar diferentes abordagens e funcionalidades que podem ser incorporadas:\n\n### Exemplo 1: Alterando o Layout e Estilização do Texto\nNeste exemplo, modificaremos a aparência do título e da descrição, adicionando mais estilos ao texto.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.content.value}\"))\n        page.close(bottom_sheet)\n\n    action_sheet = ft.CupertinoActionSheet(\n        title=ft.Row([\n            ft.Text(\"Title\", style=ft.TextStyle(font_weight=ft.FontWeight.BOLD, font_size=20))\n        ], alignment=ft.MainAxisAlignment.CENTER),\n        message=ft.Row([\n            ft.Text(\"Description\", style=ft.TextStyle(color=ft.colors.GREY_600))\n        ], alignment=ft.MainAxisAlignment.CENTER),\n        cancel=ft.CupertinoActionSheetAction(\n            content=ft.Text(\"Cancel\"),\n            on_click=handle_click,\n        ),\n        actions=[\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Default Action\"),\n                is_default_action=True,\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Normal Action\"),\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Destructive Action\"),\n                is_destructive_action=True,\n                on_click=handle_click,\n            ),\n        ],\n    )\n    bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open CupertinoBottomSheet\",\n            on_click=lambda e: page.open(bottom_sheet),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Adicionando um Botão Extra na Lista de Ações\nEste exemplo adiciona mais uma ação na lista, como um botão para compartilhamento.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.content.value}\"))\n        page.close(bottom_sheet)\n\n    action_sheet = ft.CupertinoActionSheet(\n        title=ft.Row([ft.Text(\"Title\")], alignment=ft.MainAxisAlignment.CENTER),\n        message=ft.Row([ft.Text(\"Description\")], alignment=ft.MainAxisAlignment.CENTER),\n        cancel=ft.CupertinoActionSheetAction(\n            content=ft.Text(\"Cancel\"),\n            on_click=handle_click,\n        ),\n        actions=[\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Default Action\"),\n                is_default_action=True,\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Normal Action\"),\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Share\"),\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Destructive Action\"),\n                is_destructive_action=True,\n                on_click=handle_click,\n            ),\n        ],\n    )\n    bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open CupertinoBottomSheet\",\n            on_click=lambda e: page.open(bottom_sheet),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Adicionando Ícones às Ações\nAqui, adicionaremos ícones para tornar as ações mais visuais.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.content.value}\"))\n        page.close(bottom_sheet)\n\n    action_sheet = ft.CupertinoActionSheet(\n        title=ft.Row([ft.Text(\"Title\")], alignment=ft.MainAxisAlignment.CENTER),\n        message=ft.Row([ft.Text(\"Description\")], alignment=ft.MainAxisAlignment.CENTER),\n        cancel=ft.CupertinoActionSheetAction(\n            content=ft.Row([ft.Icon(ft.icons.CLOSE), ft.Text(\" Cancel\")]),\n            on_click=handle_click,\n        ),\n        actions=[\n            ft.CupertinoActionSheetAction(\n                content=ft.Row([ft.Icon(ft.icons.CHECK_CIRCLE), ft.Text(\" Default Action\")]),\n                is_default_action=True,\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Row([ft.Icon(ft.icons.INFO), ft.Text(\" Normal Action\")]),\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Row([ft.Icon(ft.icons.DELETE), ft.Text(\" Destructive Action\")]),\n                is_destructive_action=True,\n                on_click=handle_click,\n            ),\n        ],\n    )\n    bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open CupertinoBottomSheet\",\n            on_click=lambda e: page.open(bottom_sheet),\n        )\n    )\n\nft.app(main)\n```\n\nEsses exemplos mostram como você pode personalizar o comportamento e a aparência do `CupertinoActionSheet` em uma aplicação Flet, oferecendo uma variedade de opções para atender às necessidades específicas de diferentes interfaces de usuário."
}