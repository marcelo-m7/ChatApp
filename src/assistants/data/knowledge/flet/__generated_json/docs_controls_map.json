{
    "file": "docs_controls_map.py",
    "description": "O código apresentado utiliza a biblioteca Flet para criar uma aplicação interativa de mapa. Ele importa os módulos necessários, define funções para manipular eventos no mapa e configura diferentes camadas e marcadores no mapa. Aqui está uma descrição detalhada e a explicação das funções e propriedades do código:\n\n### Importações\n```python\nimport random\nimport flet as ft\nimport flet.map as map\n```\n- `random`: Usado para gerar números aleatórios.\n- `flet`: A biblioteca principal para criar interfaces gráficas.\n- `flet.map`: Módulo específico para trabalhar com mapas interativos no Flet.\n\n### Função Principal `main`\n```python\ndef main(page: ft.Page):\n```\nA função `main` é chamada quando o programa é inicializado. Ela recebe um objeto `Page` como argumento, que representa a página da interface gráfica.\n\n### Referências de Camadas\n```python\nmarker_layer_ref = ft.Ref[map.MarkerLayer]()\ncircle_layer_ref = ft.Ref[map.CircleLayer]()\n```\nEssas linhas criam referências para as camadas de marcadores e círculos, permitindo a manipulação dessas camadas em outras partes do código.\n\n### Função `handle_tap`\n```python\ndef handle_tap(e: map.MapTapEvent):\n```\nEsta função é chamada quando há interações de toque no mapa. Ela verifica o tipo de toque (`tap` ou `secondary_tap`) e adiciona marcadores ou círculos no mapa de acordo com a interação.\n\n- **Adicionando Marcadores**: Quando ocorre um `tap`, um marcador é adicionado no local do toque. O marcador tem um ícone vermelho.\n- **Adicionando Círculos**: Quando ocorre um `secondary_tap`, um círculo é adicionado com cor e borda aleatórias.\n\n### Função `handle_event`\n```python\ndef handle_event(e: map.MapEvent):\n```\nFunção para manipular outros eventos do mapa, apenas imprime informações sobre o evento no console.\n\n### Configuração da Página e do Mapa\nA função `main` adiciona um texto explicativo e o componente de mapa à página. O mapa é configurado com:\n- Um centro inicial e zoom.\n- Configurações de interação para permitir todas as interações possíveis.\n- Eventos para inicialização, toques e outros manipuladores de eventos.\n- Camadas de mapa, incluindo camadas de azulejos (tiles), atribuições, marcadores, círculos, polígonos e polilinhas.\n\n### Camadas do Mapa\n- **TileLayer**: Camada base do mapa que carrega os azulejos do OpenStreetMap.\n- **RichAttribution**: Atribuições de texto com links clicáveis.\n- **SimpleAttribution**: Uma simples atribuição de texto com alinhamento.\n- **MarkerLayer**: Camada para marcadores.\n- **CircleLayer**: Camada para círculos.\n- **PolygonLayer**: Camada para polígonos.\n- **PolylineLayer**: Camada para polilinhas.\n\n### Inicialização do Aplicativo\n```python\nft.app(main)\n```\nInicia a aplicação chamando a função `main`.\n\n### Conclusão\nO código cria uma aplicação interativa de mapa usando Flet, onde os usuários podem adicionar marcadores e círculos com interações de toque. Ele demonstra o uso de eventos, manipulação dinâmica de camadas e interatividade em uma aplicação de mapa.",
    "examples": "O código Python apresentado integra a biblioteca `flet` para criar uma aplicação interativa de mapa. Aqui, diferentes eventos de interação com o mapa, como cliques e cliques secundários, adicionam marcadores ou círculos no mapa. Vamos explorar diferentes exemplos de uso, expandindo as funcionalidades e modificando comportamentos para ilustrar a versatilidade da biblioteca `flet`.\n\n### Exemplo 1: Adicionando Polígonos com Clique Duplo\n\nNesse exemplo, vamos modificar o comportamento para adicionar um polígono ao mapa quando o usuário realiza um clique duplo. Cada clique duplo adicionará um novo vértice ao polígono.\n\n```python\nimport flet as ft\nimport flet.map as map\nimport random\n\ndef main(page: ft.Page):\n    polygon_layer_ref = ft.Ref[map.PolygonLayer]()\n    vertices = []\n\n    def handle_double_tap(e: map.MapTapEvent):\n        vertices.append(e.coordinates)\n        if len(vertices) > 2:\n            polygon_layer_ref.current.polygons.append(\n                map.PolygonMarker(\n                    coordinates=vertices[:],\n                    color=ft.Colors.with_opacity(0.5, ft.Colors.GREEN),\n                    border_color=ft.Colors.BLACK,\n                    border_stroke_width=2,\n                )\n            )\n            vertices.clear()\n        page.update()\n\n    page.add(\n        ft.Text(\"Double-click to create a polygon vertex. Three vertices complete a polygon.\"),\n        map.Map(\n            expand=True,\n            initial_center=map.MapLatitudeLongitude(15, 10),\n            initial_zoom=4.2,\n            interaction_configuration=map.MapInteractionConfiguration(\n                flags=map.MapInteractiveFlag.ALL\n            ),\n            on_double_tap=handle_double_tap,\n            layers=[\n                map.TileLayer(url_template=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"),\n                map.PolygonLayer(ref=polygon_layer_ref),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Modo de Desenho de Polilinhas\n\nAqui, adicionaremos um modo onde o usuário pode desenhar uma polilinha no mapa, clicando para adicionar pontos à linha.\n\n```python\nimport flet as ft\nimport flet.map as map\n\ndef main(page: ft.Page):\n    polyline_layer_ref = ft.Ref[map.PolylineLayer]()\n    points = []\n\n    def handle_tap(e: map.MapTapEvent):\n        points.append(e.coordinates)\n        polyline_layer_ref.current.polylines = [\n            map.PolylineMarker(\n                coordinates=points,\n                color=ft.Colors.BLUE,\n                border_stroke_width=2,\n            )\n        ]\n        page.update()\n\n    page.add(\n        ft.Text(\"Click to add points to the polyline.\"),\n        map.Map(\n            expand=True,\n            initial_center=map.MapLatitudeLongitude(15, 10),\n            initial_zoom=4.2,\n            interaction_configuration=map.MapInteractionConfiguration(\n                flags=map.MapInteractiveFlag.ALL\n            ),\n            on_tap=handle_tap,\n            layers=[\n                map.TileLayer(url_template=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"),\n                map.PolylineLayer(ref=polyline_layer_ref),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Controle de Zoom com Botões\n\nEste exemplo adiciona botões de interface para controlar o zoom do mapa manualmente.\n\n```python\nimport flet as ft\nimport flet.map as map\n\ndef main(page: ft.Page):\n    my_map = map.Map(\n        expand=True,\n        initial_center=map.MapLatitudeLongitude(15, 10),\n        initial_zoom=4.2,\n        interaction_configuration=map.MapInteractionConfiguration(\n            flags=map.MapInteractiveFlag.ALL\n        ),\n    )\n\n    def zoom_in(e):\n        my_map.zoom += 1\n        page.update()\n\n    def zoom_out(e):\n        my_map.zoom -= 1\n        page.update()\n\n    page.add(\n        ft.Row([\n            ft.ElevatedButton(text=\"+\", on_click=zoom_in),\n            ft.ElevatedButton(text=\"-\", on_click=zoom_out),\n        ]),\n        my_map,\n    )\n\nft.app(main)\n```\n\nEsses exemplos demonstram diferentes maneiras de utilizar o `flet` para criar interfaces interativas de mapas, cada um adaptado para um cenário de uso específico."
}