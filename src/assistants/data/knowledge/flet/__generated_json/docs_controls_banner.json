{
    "file": "docs_controls_banner.py",
    "description": "O código fornecido utiliza o módulo Flet para criar uma interface de usuário interativa em Python, especificamente um exemplo de aplicativo que mostra como exibir e interagir com um banner contendo mensagens e botões de ação. Vamos detalhar cada parte do código:\n\n1. **Importação do Módulo Flet**:\n   ```python\n   import flet as ft\n   ```\n   Esta linha importa o módulo Flet, que é usado para criar interfaces de usuário baseadas na web usando Python.\n\n2. **Definição da Função Principal `main`**:\n   ```python\n   def main(page):\n   ```\n   Esta função é chamada quando o aplicativo é inicializado. O parâmetro `page` representa a página web onde os elementos da UI são adicionados.\n\n3. **Configuração de Alinhamento**:\n   ```python\n   page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n   ```\n   Esta linha configura o alinhamento horizontal dos widgets na página para o centro.\n\n4. **Definição da Função `close_banner`**:\n   ```python\n   def close_banner(e):\n       page.close(banner)\n       page.add(ft.Text(\"Action clicked: \" + e.control.text))\n   ```\n   `close_banner` é uma função que é chamada quando qualquer um dos botões no banner é clicado. Ele fecha o banner e exibe uma nova mensagem na página indicando qual ação foi clicada.\n\n5. **Estilo do Botão de Ação**:\n   ```python\n   action_button_style = ft.ButtonStyle(color=ft.Colors.BLUE)\n   ```\n   Define o estilo para os botões de ação no banner. Neste caso, a cor do botão é configurada como azul.\n\n6. **Criação do Banner**:\n   ```python\n   banner = ft.Banner(\n       bgcolor=ft.Colors.AMBER_100,\n       leading=ft.Icon(ft.Icons.WARNING_AMBER_ROUNDED, color=ft.Colors.AMBER, size=40),\n       content=ft.Text(\n           value=\"Oops, there were some errors while trying to delete the file. What would you like me to do?\",\n           color=ft.Colors.BLACK,\n       ),\n       actions=[\n           ft.TextButton(text=\"Retry\", style=action_button_style, on_click=close_banner),\n           ft.TextButton(text=\"Ignore\", style=action_button_style, on_click=close_banner),\n           ft.TextButton(text=\"Cancel\", style=action_button_style, on_click=close_banner),\n       ],\n   )\n   ```\n   Aqui, um `Banner` é criado com um plano de fundo cor âmbar, um ícone de aviso à esquerda, uma mensagem de texto e três botões de ação (\"Retry\", \"Ignore\", \"Cancel\"). Cada botão usa o `action_button_style` definido anteriormente e está ligado à função `close_banner`.\n\n7. **Adicionar Botão para Mostrar o Banner**:\n   ```python\n   page.add(ft.ElevatedButton(\"Show Banner\", on_click=lambda e: page.open(banner)))\n   ```\n   Um botão elevado é adicionado à página. Quando clicado, ele abre o banner definido acima.\n\n8. **Inicialização do Aplicativo Flet**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação, chamando a função `main`.\n\nEste código ilustra como criar uma interface de usuário interativa e responder a eventos usando Flet em Python, permitindo a exibição de mensagens de erro e opções de ação ao usuário.",
    "examples": "O exemplo de código que você forneceu mostra como criar uma `Banner` em Flet, a qual pode ser usada para mostrar mensagens ao usuário com ações específicas, como \"Retry\", \"Ignore\", e \"Cancel\". Aqui estão alguns exemplos adicionais que variam o uso de `Banner` para diferentes cenários e estilos, para demonstrar a flexibilidade deste widget:\n\n### Exemplo 1: Banner com ação única\nEste exemplo apresenta um banner com apenas uma ação. Pode ser útil para mensagens de confirmação simples ou notificações.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def close_banner(e):\n        page.close(banner)\n        page.add(ft.Text(\"Action clicked: \" + e.control.text))\n\n    banner = ft.Banner(\n        bgcolor=ft.Colors.LIGHT_GREEN_100,\n        leading=ft.Icon(ft.Icons.CHECK_CIRCLE, color=ft.Colors.GREEN, size=40),\n        content=ft.Text(\"Successfully completed the process.\", color=ft.Colors.BLACK),\n        actions=[\n            ft.TextButton(text=\"OK\", on_click=close_banner),\n        ],\n    )\n\n    page.add(ft.ElevatedButton(\"Show Success Message\", on_click=lambda e: page.open(banner)))\n\nft.app(main)\n```\n\n### Exemplo 2: Banner com múltiplas opções e estilos variados\nEste exemplo utiliza diferentes estilos para cada botão, o que pode ajudar o usuário a identificar visualmente a gravidade ou a natureza da ação.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def close_banner(e):\n        page.close(banner)\n        page.add(ft.Text(\"Action clicked: \" + e.control.text))\n\n    retry_button_style = ft.ButtonStyle(bgcolor=ft.Colors.ORANGE)\n    ignore_button_style = ft.ButtonStyle(bgcolor=ft.Colors.GRAY)\n    cancel_button_style = ft.ButtonStyle(bgcolor=ft.Colors.RED)\n\n    banner = ft.Banner(\n        bgcolor=ft.Colors.YELLOW_100,\n        leading=ft.Icon(ft.Icons.ERROR_OUTLINE, color=ft.Colors.RED, size=40),\n        content=ft.Text(\n            value=\"Error processing your request. How would you like to proceed?\",\n            color=ft.Colors.BLACK\n        ),\n        actions=[\n            ft.TextButton(text=\"Retry\", style=retry_button_style, on_click=close_banner),\n            ft.TextButton(text=\"Ignore\", style=ignore_button_style, on_click=close_banner),\n            ft.TextButton(text=\"Cancel\", style=cancel_button_style, on_click=close_banner),\n        ],\n    )\n\n    page.add(ft.ElevatedButton(\"Show Error Banner\", on_click=lambda e: page.open(banner)))\n\nft.app(main)\n```\n\n### Exemplo 3: Banner com ação de fechamento automático\nNeste exemplo, o banner se fecha automaticamente após um intervalo de tempo, adequado para notificações que não exigem uma resposta imediata do usuário.\n\n```python\nimport flet as ft\nimport time\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def auto_close_banner():\n        time.sleep(3)  # Espera 3 segundos antes de fechar\n        page.close(banner)\n\n    banner = ft.Banner(\n        bgcolor=ft.Colors.BLUE_100,\n        leading=ft.Icon(ft.Icons.INFO, color=ft.Colors.BLUE, size=40),\n        content=ft.Text(\"This is an informational message that will close automatically.\", color=ft.Colors.BLACK),\n    )\n\n    page.add(banner)\n    page.update()\n    auto_close_banner()\n\nft.app(main)\n```\n\nEsses exemplos mostram como você pode adaptar o uso da `Banner` em Flet para diferentes necessidades de interface do usuário, ajustando cores, mensagens e ações de acordo com o contexto desejado."
}