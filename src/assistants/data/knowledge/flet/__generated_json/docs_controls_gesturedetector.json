{
    "file": "docs_controls_gesturedetector.py",
    "description": "O código que você forneceu é um exemplo de como usar a biblioteca Flet em Python para criar uma interface gráfica que permite a manipulação de widgets via gestos de arrasto (drag). Vou descrever cada parte do código, explicando as funções e propriedades utilizadas.\n\n### Importação da Biblioteca\n```python\nimport flet as ft\n```\nEssa linha importa a biblioteca Flet, que é usada para criar aplicativos GUI (interface gráfica do usuário) de uma forma simples e eficiente.\n\n### Definição da Função Principal\n```python\ndef main(page: ft.Page):\n```\nA função `main` é a função de entrada do aplicativo, onde o parâmetro `page` refere-se à página do aplicativo web gerada.\n\n### Funções de Atualização de Arrasto\n```python\ndef on_pan_update1(e: ft.DragUpdateEvent):\n    c.top = max(0, c.top + e.delta_y)\n    c.left = max(0, c.left + e.delta_x)\n    c.update()\n\ndef on_pan_update2(e: ft.DragUpdateEvent):\n    e.control.top = max(0, e.control.top + e.delta_y)\n    e.control.left = max(0, e.control.left + e.delta_x)\n    e.control.update()\n```\nEstas funções são chamadas quando um evento de arrasto é detectado. Elas atualizam as propriedades `top` e `left` do controle arrastado para novas posições, baseadas no deslocamento (`delta_x` e `delta_y`) do arrasto. A função `update()` é chamada para aplicar as alterações visuais.\n\n### Widgets e Gestores de Gestos\n```python\ngd = ft.GestureDetector(\n    mouse_cursor=ft.MouseCursor.MOVE,\n    drag_interval=50,\n    on_pan_update=on_pan_update1,\n)\n```\nO `GestureDetector` é configurado para responder a movimentos de arrasto, com um intervalo de 50 milissegundos entre os eventos de arrasto. A função `on_pan_update1` é usada como callback.\n\n```python\nc = ft.Container(gd, bgcolor=ft.Colors.AMBER, width=50, height=50, left=0, top=0)\n```\nUm `Container` é criado contendo o `GestureDetector` como conteúdo. Este container tem cor de fundo âmbar, dimensões 50x50 e é posicionado no canto superior esquerdo.\n\n```python\ngd1 = ft.GestureDetector(\n    mouse_cursor=ft.MouseCursor.MOVE,\n    drag_interval=10,\n    on_vertical_drag_update=on_pan_update2,\n    left=100,\n    top=100,\n    content=ft.Container(bgcolor=ft.Colors.BLUE, width=50, height=50),\n)\n```\nOutro `GestureDetector` é configurado, desta vez com um intervalo de 10 milissegundos entre eventos de arrasto e usando a função `on_pan_update2` para atualizações. Este detector de gestos contém um `Container` azul e é posicionado a 100 pixels do topo e da esquerda da página.\n\n### Adicionando Widgets à Página\n```python\npage.add(ft.Stack([c, gd1], width=1000, height=500))\n```\nUm widget `Stack` é usado para empilhar os contêineres na página. O stack tem dimensões de 1000x500 pixels.\n\n### Execução do Aplicativo\n```python\nft.app(main)\n```\nEsta linha inicia o aplicativo Flet chamando a função `main`.\n\n### Resumo\nEste código cria uma interface gráfica que permite ao usuário arrastar dois contêineres na tela usando o mouse. Cada contêiner responde a diferentes configurações de gestos e tem suas próprias restrições de movimento (por exemplo, não podem ser movidos para coordenadas negativas).",
    "examples": "Claro! O código fornecido implementa um exemplo básico de arrastar e soltar usando o Flet, que é um framework para criar aplicativos de interface gráfica. Vou criar mais alguns exemplos para ilustrar diferentes formas de uso da detecção de gestos e manipulação de elementos na interface.\n\n### Exemplo 1: Mudança de Cor ao Arrastar\nEste exemplo muda a cor de um container quando ele é arrastado, alternando entre duas cores.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def on_pan_update(e: ft.DragUpdateEvent):\n        e.control.top += e.delta_y\n        e.control.left += e.delta_x\n        # Alternar cor ao arrastar\n        e.control.bgcolor = ft.Colors.GREEN if e.control.bgcolor == ft.Colors.RED else ft.Colors.RED\n        e.control.update()\n\n    container = ft.Container(\n        width=100,\n        height=100,\n        bgcolor=ft.Colors.RED,\n        alignment=ft.Alignment.CENTER\n    )\n\n    gesture_detector = ft.GestureDetector(\n        on_pan_update=on_pan_update,\n        content=container\n    )\n\n    page.add(gesture_detector)\n\nft.app(main)\n```\n\n### Exemplo 2: Restrição de Arraste Dentro de uma Área Específica\nEste exemplo permite que o usuário arraste um container, mas restringe o movimento dentro de uma área delimitada na página.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def on_pan_update(e: ft.DragUpdateEvent):\n        new_x = max(0, min(page.width - e.control.width, e.control.left + e.delta_x))\n        new_y = max(0, min(page.height - e.control.height, e.control.top + e.delta_y))\n        e.control.left = new_x\n        e.control.top = new_y\n        e.control.update()\n\n    container = ft.Container(\n        width=100,\n        height=100,\n        bgcolor=ft.Colors.BLUE,\n        left=50,\n        top=50\n    )\n\n    gesture_detector = ft.GestureDetector(\n        on_pan_update=on_pan_update,\n        content=container\n    )\n\n    page.add(ft.Stack([gesture_detector], width=500, height=500))\n\nft.app(main)\n```\n\n### Exemplo 3: Arrastar Múltiplos Containers\nEste exemplo permite arrastar múltiplos containers independentemente.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def on_pan_update(e: ft.DragUpdateEvent):\n        e.control.top += e.delta_y\n        e.control.left += e.delta_x\n        e.control.update()\n\n    def create_draggable_container(color, initial_left, initial_top):\n        container = ft.Container(\n            width=50,\n            height=50,\n            bgcolor=color,\n            left=initial_left,\n            top=initial_top\n        )\n        return ft.GestureDetector(\n            on_pan_update=on_pan_update,\n            content=container\n        )\n\n    colors = [ft.Colors.RED, ft.Colors.GREEN, ft.Colors.BLUE]\n    positions = [(0, 0), (60, 60), (120, 120)]\n    containers = [create_draggable_container(color, *pos) for color, pos in zip(colors, positions)]\n\n    page.add(ft.Stack(containers, width=500, height=500))\n\nft.app(main)\n```\n\nCada um desses exemplos mostra diferentes funcionalidades e maneiras de manipular a interação do usuário com a interface gráfica usando o Flet. Experimente variar os parâmetros e adicionar novos elementos para ver como eles interagem."
}