{
    "file": "docs_controls_datatable.py",
    "description": "O código Python que você forneceu utiliza a biblioteca Flet para criar interfaces gráficas de usuário (GUI) de forma simples e eficiente. Vamos analisar cada parte do código separadamente para entender melhor seu funcionamento e propriedades.\n\n### Importação da Biblioteca\n```python\nimport flet as ft\n```\nEsta linha importa a biblioteca Flet, que é utilizada para construção da interface gráfica.\n\n### Função Principal\n```python\ndef main(page: ft.Page):\n```\nDefine a função principal `main`, que recebe um objeto `page` do tipo `ft.Page`. Este objeto representa a página na qual os elementos da GUI serão adicionados.\n\n### Adição de um DataTable\n```python\npage.add(\n    ft.DataTable(\n        width=700,\n        bgcolor=\"yellow\",\n        border=ft.border.all(2, \"red\"),\n        border_radius=10,\n        vertical_lines=ft.BorderSide(3, \"blue\"),\n        horizontal_lines=ft.BorderSide(1, \"green\"),\n        sort_column_index=0,\n        sort_ascending=True,\n        heading_row_color=ft.Colors.BLACK12,\n        heading_row_height=100,\n        data_row_color={ft.ControlState.HOVERED: \"0x30FF0000\"},\n        show_checkbox_column=True,\n        divider_thickness=0,\n        column_spacing=200,\n        columns=[...],\n        rows=[...]\n    )\n)\n```\nEsta seção adiciona um widget `DataTable` à página. Vamos entender os parâmetros utilizados:\n\n- **width**: Largura do `DataTable`.\n- **bgcolor**: Cor de fundo da tabela.\n- **border**: Define a borda da tabela com espessura de 2 e cor vermelha.\n- **border_radius**: Raio da borda da tabela para arredondamento dos cantos.\n- **vertical_lines** e **horizontal_lines**: Define as linhas verticais e horizontais com suas respectivas larguras e cores.\n- **sort_column_index** e **sort_ascending**: Define a coluna inicial para ordenação e a direção da ordenação (ascendente).\n- **heading_row_color** e **heading_row_height**: Cor e altura da linha de cabeçalho.\n- **data_row_color**: Cor da linha de dados quando está no estado HOVERED.\n- **show_checkbox_column**: Mostra uma coluna de caixas de seleção.\n- **divider_thickness**: Espessura das divisórias entre as células.\n- **column_spacing**: Espaçamento entre as colunas.\n\n### Colunas do DataTable\n```python\ncolumns=[\n    ft.DataColumn(\n        ft.Text(\"Column 1\"),\n        on_sort=lambda e: print(f\"{e.column_index}, {e.ascending}\"),\n    ),\n    ft.DataColumn(\n        ft.Text(\"Column 2\"),\n        tooltip=\"This is a second column\",\n        numeric=True,\n        on_sort=lambda e: print(f\"{e.column_index}, {e.ascending}\"),\n    ),\n]\n```\nDefine as colunas do `DataTable`. Cada coluna tem um título e pode ter propriedades como tooltip, se é numérica, e uma função que é chamada quando a ordenação da coluna é alterada.\n\n### Linhas do DataTable\n```python\nrows=[\n    ft.DataRow(\n        [ft.DataCell(ft.Text(\"A\")), ft.DataCell(ft.Text(\"1\"))],\n        selected=True,\n        on_select_changed=lambda e: print(f\"row select changed: {e.data}\"),\n    ),\n    ft.DataRow([ft.DataCell(ft.Text(\"B\")), ft.DataCell(ft.Text(\"2\"))]),\n]\n```\nAdiciona linhas ao `DataTable`, onde cada linha contém células com texto. A primeira linha está pré-selecionada, e há um manipulador de evento para mudança de seleção.\n\n### Inicialização do Aplicativo\n```python\nft.app(main)\n```\nEsta linha inicializa o aplicativo Flet, definindo a função `main` como a função de entrada para a execução da GUI.\n\nEsse código ilustra um uso básico do Flet para criar uma tabela interativa com várias propriedades customizadas, como cores, bordas, espaçamento e comportamento interativo através de eventos.",
    "examples": "### Exemplo 1: DataTable Básico com Adição de Ícones nas Células\n\nEste exemplo mostra como incluir ícones nas células de uma `DataTable`, o que pode ser útil para representar visualmente certos dados (como status ou categorias).\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.DataTable(\n            columns=[\n                ft.DataColumn(ft.Text(\"Status\")),\n                ft.DataColumn(ft.Text(\"Nome\")),\n                ft.DataColumn(ft.Text(\"Pontuação\"), numeric=True),\n            ],\n            rows=[\n                ft.DataRow(\n                    cells=[\n                        ft.DataCell(ft.Icon(ft.Icons.CHECK, color=ft.Colors.GREEN)),\n                        ft.DataCell(ft.Text(\"Maria\")),\n                        ft.DataCell(ft.Text(\"85\")),\n                    ],\n                ),\n                ft.DataRow(\n                    cells=[\n                        ft.DataCell(ft.Icon(ft.Icons.CLOSE, color=ft.Colors.RED)),\n                        ft.DataCell(ft.Text(\"João\")),\n                        ft.DataCell(ft.Text(\"45\")),\n                    ],\n                ),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: DataTable com Filtragem de Dados\n\nEste exemplo adiciona um campo de texto acima da tabela para permitir que o usuário filtre os dados mostrados com base no nome.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def filter_data(e):\n        filter_text = e.control.value.lower()\n        filtered_rows = [\n            row for row in all_rows if filter_text in row.cells[1].control.text.lower()\n        ]\n        data_table.rows = filtered_rows\n        page.update()\n\n    all_rows = [\n        ft.DataRow(cells=[ft.DataCell(ft.Text(\"John\")), ft.DataCell(ft.Text(\"Smith\")), ft.DataCell(ft.Text(\"43\"))]),\n        ft.DataRow(cells=[ft.DataCell(ft.Text(\"Jack\")), ft.DataCell(ft.Text(\"Brown\")), ft.DataCell(ft.Text(\"19\"))]),\n        ft.DataRow(cells=[ft.DataCell(ft.Text(\"Alice\")), ft.DataCell(ft.Text(\"Wong\")), ft.DataCell(ft.Text(\"25\"))]),\n    ]\n\n    data_table = ft.DataTable(\n        columns=[\n            ft.DataColumn(ft.Text(\"First Name\")),\n            ft.DataColumn(ft.Text(\"Last Name\")),\n            ft.DataColumn(ft.Text(\"Age\"), numeric=True),\n        ],\n        rows=all_rows,\n    )\n\n    txt_filter = ft.TextField(label=\"Filter by name:\", on_change=filter_data)\n    \n    page.add(txt_filter, data_table)\n\nft.app(main)\n```\n\n### Exemplo 3: DataTable com Paginação\n\nEste exemplo implementa paginação para uma DataTable, útil para grandes conjuntos de dados.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    ROWS_PER_PAGE = 10\n    current_page = 0\n\n    all_data_rows = [\n        ft.DataRow(cells=[ft.DataCell(ft.Text(f\"Item {i}\")), ft.DataCell(ft.Text(f\"Category {i % 5}\")), ft.DataCell(ft.Text(str(i * 10)))])\n        for i in range(100)\n    ]\n\n    data_table = ft.DataTable(\n        columns=[\n            ft.DataColumn(ft.Text(\"Item\")),\n            ft.DataColumn(ft.Text(\"Category\")),\n            ft.DataColumn(ft.Text(\"Value\"), numeric=True),\n        ],\n        rows=all_data_rows[:ROWS_PER_PAGE]\n    )\n\n    def update_rows(page_number):\n        start_index = page_number * ROWS_PER_PAGE\n        end_index = start_index + ROWS_PER_PAGE\n        data_table.rows = all_data_rows[start_index:end_index]\n        page.update()\n\n    btn_next = ft.Button(text=\"Next\", on_click=lambda e: update_rows(current_page + 1))\n    btn_prev = ft.Button(text=\"Prev\", on_click=lambda e: update_rows(current_page - 1))\n\n    page.add(btn_prev, btn_next, data_table)\n\nft.app(main)\n```\n\nEsses exemplos adicionais evidenciam a versatilidade e a adaptabilidade do componente `DataTable` no Flet, permitindo desde a apresentação simples de dados até funcionalidades mais complexas como filtragem e paginação."
}