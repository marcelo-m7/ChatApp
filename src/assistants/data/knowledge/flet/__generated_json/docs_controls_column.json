{
    "file": "docs_controls_column.py",
    "description": "Os códigos fornecidos demonstram diferentes usos da biblioteca Flet em Python, que é uma ferramenta para criar interfaces de usuário web, desktop e móveis em Python. Cada bloco de código criado define uma aplicação com uma interface específica, utilizando componentes como `ft.Page`, `ft.Column`, `ft.Row`, `ft.Container`, `ft.Text`, `ft.Slider`, e mais. Vou descrever cada um deles separadamente:\n\n1. **Primeiro Bloco de Código**:\n   - Este código cria uma UI com um slider que ajusta o espaçamento entre os itens dentro de uma coluna. A função `items` cria uma lista de containers, cada um contendo um número, e a função `spacing_slider_change` atualiza o espaçamento da coluna quando o slider é ajustado.\n\n2. **Segundo Bloco de Código**:\n   - Este exemplo mostra uma interface onde o usuário pode ajustar a altura de uma coluna com um slider. A coluna contém vários itens e usa `wrap=True` para que os itens se ajustem automaticamente em várias colunas conforme a altura da coluna muda. Isso demonstra uma maneira dinâmica de manipular layouts responsivos.\n\n3. **Terceiro Bloco de Código**:\n   - Esta aplicação cria uma linha de colunas, cada uma demonstrando um tipo diferente de alinhamento vertical (`MainAxisAlignment`) para os itens dentro delas. Isso é útil para entender como diferentes alinhamentos afetam a disposição dos elementos numa interface.\n\n4. **Quarto Bloco de Código**:\n   - Similar ao terceiro exemplo, mas foca em alinhamentos horizontais (`CrossAxisAlignment`). Este código é útil para ver como o alinhamento horizontal pode ser ajustado dentro de containers.\n\n5. **Quinto Bloco de Código**:\n   - Este exemplo implementa uma funcionalidade de carregamento infinito usando eventos de scroll. Conforme o usuário rola até o fim de uma coluna, mais itens são carregados dinamicamente. Utiliza semáforos para controlar o acesso à seção crítica que modifica a lista de controles, prevenindo condições de corrida.\n\n6. **Sexto Bloco de Código**:\n   - Aqui, a personalização da barra de rolagem é demonstrada através do ajuste de propriedades como cor, visibilidade e margens no tema da página. Além disso, mostra várias maneiras de programaticamente rolar para posições específicas dentro de uma coluna.\n\n7. **Sétimo Bloco de Código**:\n   - Um exemplo mais simples de rolagem programática, permitindo ao usuário rolar para um item específico identificado por uma chave usando um botão.\n\n8. **Último Bloco de Código**:\n   - Demonstra o uso de `expand` para distribuir espaço entre elementos numa coluna. Os containers são ajustados para expandir de acordo com os pesos dados, permitindo um controle mais fino sobre o layout.\n\nCada um desses exemplos ilustra diferentes aspectos de como se pode construir e manipular interfaces de usuário usando Flet em Python. Eles abordam desde a manipulação de layout e eventos até a interação dinâmica com o usuário através de componentes interativos.",
    "examples": "Abaixo estão exemplos adicionais que exploram diferentes funcionalidades e usos das bibliotecas Flet em Python. Cada exemplo demonstra formas únicas de interação com elementos visuais e manipulação de dados de interface:\n\n### Exemplo 1: Mudança de Cor de Fundo de Container com Slider\nEste exemplo mostra como um Slider pode ser usado para alterar a cor de fundo de uma série de Containers.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def items(count, color):\n        items = []\n        for i in range(1, count + 1):\n            items.append(\n                ft.Container(\n                    content=ft.Text(value=str(i)),\n                    alignment=ft.alignment.center,\n                    width=50,\n                    height=50,\n                    bgcolor=color,\n                    border_radius=ft.border_radius.all(5),\n                )\n            )\n        return items\n\n    def color_slider_change(e):\n        new_color_value = int(e.control.value)\n        new_color = ft.Colors.get_color_by_value(new_color_value)\n        for item in col.controls:\n            item.bgcolor = new_color\n        col.update()\n\n    color_slider = ft.Slider(\n        min=0,\n        max=0xFFFFFF,  # RGB Color range\n        value=0xFFC107,  # Default to AMBER\n        label=\"Change Color\",\n        width=500,\n        on_change=color_slider_change,\n    )\n    \n    col = ft.Column(spacing=10, controls=items(5, ft.Colors.AMBER))\n    page.add(ft.Column([ft.Text(\"Change Background Color:\"), color_slider]), col)\n\nft.app(main)\n```\n\n### Exemplo 2: Lista Scrollável com Botões de Ação\nEste exemplo cria uma lista scrollável com botões que adicionam e removem itens dinamicamente.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    list_items = ft.Column(spacing=10)\n\n    def add_item(e):\n        new_item = ft.Text(f\"Item {len(list_items.controls) + 1}\")\n        list_items.controls.append(new_item)\n        list_items.update()\n\n    def remove_item(e):\n        if list_items.controls:\n            list_items.controls.pop()\n            list_items.update()\n\n    add_button = ft.ElevatedButton(\"Add Item\", on_click=add_item)\n    remove_button = ft.ElevatedButton(\"Remove Item\", on_click=remove_item)\n    controls_row = ft.Row([add_button, remove_button], alignment=ft.MainAxisAlignment.SPACE_BETWEEN)\n\n    scrollable_list = ft.Container(content=list_items, height=200, scroll=ft.ScrollMode.ALWAYS)\n    page.add(controls_row, scrollable_list)\n\nft.app(main)\n```\n\n### Exemplo 3: Alternar Visibilidade de Componentes\nEste exemplo demonstra como alternar a visibilidade de componentes na página com um ToggleSwitch.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    toggle_container = ft.Container(visible=False, content=ft.Text(\"This text is toggleable.\"))\n\n    def toggle_visibility(e):\n        toggle_container.visible = not toggle_container.visible\n        page.update()\n\n    toggle_switch = ft.ToggleSwitch(label=\"Show/Hide Text\", on_change=toggle_visibility)\n    page.add(toggle_switch, toggle_container)\n\nft.app(main)\n```\n\nCada um desses exemplos explora diferentes aspectos das capacidades interativas da biblioteca Flet, permitindo criar interfaces dinâmicas e reativas com facilidade."
}