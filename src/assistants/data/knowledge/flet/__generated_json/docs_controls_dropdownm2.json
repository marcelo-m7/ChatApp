{
    "file": "docs_controls_dropdownm2.py",
    "description": "O código fornecido contém quatro diferentes scripts em Python que utilizam a biblioteca Flet para criar interfaces de usuário (UI) baseadas em web. Cada script define uma função `main` que é passada para `ft.app(main)`, que inicia a aplicação. Vou detalhar cada um dos scripts explicando suas funções e propriedades:\n\n### Primeiro Script\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def button_clicked(e):\n        t.value = f\"Dropdown value is:  {dd.value}\"\n        page.update()\n    t = ft.Text()\n    b = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\n    dd = ft.DropdownM2(\n        width=100,\n        options=[\n            ft.dropdownm2.Option(\"Red\"),\n            ft.dropdownm2.Option(\"Green\"),\n            ft.dropdownm2.Option(\"Blue\"),\n        ],\n    )\n    page.add(dd, b, t)\n\nft.app(main)\n```\n**Descrição**:\n- **DropdownM2**: Menu suspenso com opções \"Red\", \"Green\" e \"Blue\". Largura definida em 100.\n- **ElevatedButton**: Botão com texto \"Submit\", que ao ser clicado executa a função `button_clicked`.\n- **Text**: Widget de texto para exibir o valor selecionado no dropdown.\n- **button_clicked**: Função que atualiza o texto do widget `t` com o valor selecionado no dropdown e solicita a atualização da página.\n\n### Segundo Script\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.DropdownM2(\n            label=\"Color\",\n            hint_text=\"Choose your favourite color?\",\n            options=[\n                ft.dropdownm2.Option(\"Red\"),\n                ft.dropdownm2.Option(\"Green\"),\n                ft.dropdownm2.Option(\"Blue\"),\n            ],\n            autofocus=True,\n        )\n    )\n\nft.app(main)\n```\n**Descrição**:\n- **DropdownM2**: Menu suspenso com o label \"Color\" e um hint text pedindo para o usuário escolher sua cor favorita. Opções são \"Red\", \"Green\" e \"Blue\". O campo está com `autofocus` para ser focado automaticamente quando a página carrega.\n\n### Terceiro Script\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def dropdown_changed(e):\n        t.value = f\"Dropdown changed to {dd.value}\"\n        page.update()\n    t = ft.Text()\n    dd = ft.DropdownM2(\n        on_change=dropdown_changed,\n        options=[\n            ft.dropdownm2.Option(\"Red\"),\n            ft.dropdownm2.Option(\"Green\"),\n            ft.dropdownm2.Option(\"Blue\"),\n        ],\n        width=200,\n    )\n    page.add(dd, t)\n\nft.app(main)\n```\n**Descrição**:\n- **DropdownM2**: Menu suspenso com largura de 200, opções \"Red\", \"Green\" e \"Blue\". Quando um novo item é selecionado, a função `dropdown_changed` é chamada.\n- **Text**: Widget de texto que mostra a seleção atual do dropdown.\n- **dropdown_changed**: Função que atualiza o texto baseado na seleção do dropdown e solicita a atualização da página.\n\n### Quarto Script\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def find_option(option_name):\n        for option in d.options:\n            if option_name == option.key:\n                return option\n        return None\n    def add_clicked(e):\n        d.options.append(ft.dropdown.Option(option_textbox.value))\n        d.value = option_textbox.value\n        option_textbox.value = \"\"\n        page.update()\n    def delete_clicked(e):\n        option = find_option(d.value)\n        if option != None:\n            d.options.remove(option)\n            # d.value = None\n            page.update()\n    d = ft.DropdownM2()\n    option_textbox = ft.TextField(hint_text=\"Enter item name\")\n    add = ft.ElevatedButton(\"Add\", on_click=add_clicked)\n    delete = ft.OutlinedButton(\"Delete selected\", on_click=delete_clicked)\n    page.add(d, ft.Row(controls=[option_textbox, add, delete]))\n\nft.app(main)\n```\n**Descrição**:\n- **DropdownM2**: Menu suspenso que pode ser dinamicamente atualizado com novas opções.\n- **TextField**: Campo de texto para entrada do nome da nova opção do dropdown.\n- **ElevatedButton e OutlinedButton**: Botões para adicionar novas opções ao dropdown e deletar a opção selecionada, respectivamente.\n- **add_clicked e delete_clicked**: Funções para manipular as opções do dropdown, adicionando e removendo conforme a interação do usuário.\n- **find_option**: Função auxiliar para encontrar uma opção pelo nome.\n\nCada um desses scripts exemplifica diferentes maneiras de utilizar widgets do Flet para criar interfaces interativas.",
    "examples": "Aqui estão vários exemplos adicionais que mostram diferentes formas de utilizar o `DropdownM2` e outros elementos interativos no Flet, explorando funcionalidades como a manipulação de estados, integração com listas dinâmicas, e ajustes visuais para melhorar a experiência do usuário.\n\n### Exemplo 1: Dropdown com Validação\nEste exemplo mostra um `DropdownM2` que requer que o usuário faça uma seleção antes de poder prosseguir. Ele utiliza um `Text` para mostrar mensagens de erro se nenhuma opção for selecionada.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def submit_clicked(e):\n        if not dd.value:\n            error_message.value = \"Por favor, selecione uma cor!\"\n        else:\n            error_message.value = \"\"\n        page.update()\n\n    dd = ft.DropdownM2(\n        options=[\n            ft.dropdownm2.Option(\"Red\"),\n            ft.dropdownm2.Option(\"Green\"),\n            ft.dropdownm2.Option(\"Blue\"),\n        ],\n        width=200,\n    )\n    submit_button = ft.ElevatedButton(text=\"Submit\", on_click=submit_clicked)\n    error_message = ft.Text(value=\"\", color=0xFF0000)\n\n    page.add(dd, submit_button, error_message)\n\nft.app(main)\n```\n\n### Exemplo 2: Dropdown com Grupos de Opções\nEste exemplo ilustra como criar um `DropdownM2` com opções agrupadas. Isso é útil para categorizar as opções e facilitar a navegação do usuário.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    dd = ft.DropdownM2(\n        options=[\n            ft.dropdownm2.OptionGroup(\n                label=\"Cores Primárias\",\n                options=[\n                    ft.dropdownm2.Option(\"Red\"),\n                    ft.dropdownm2.Option(\"Blue\"),\n                    ft.dropdownm2.Option(\"Yellow\"),\n                ]\n            ),\n            ft.dropdownm2.OptionGroup(\n                label=\"Cores Secundárias\",\n                options=[\n                    ft.dropdownm2.Option(\"Green\"),\n                    ft.dropdownm2.Option(\"Orange\"),\n                    ft.dropdownm2.Option(\"Purple\"),\n                ]\n            )\n        ],\n        width=250,\n    )\n    page.add(dd)\n\nft.app(main)\n```\n\n### Exemplo 3: Dropdown com Multi-seleção\nEste exemplo permite que o usuário selecione múltiplas opções de um `DropdownM2`, útil para filtragem ou entradas de dados mais complexas.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def selections_changed(e):\n        selected_values.value = \", \".join(dd.values)\n        page.update()\n\n    dd = ft.DropdownM2(\n        options=[\n            ft.dropdownm2.Option(\"Apple\"),\n            ft.dropdownm2.Option(\"Banana\"),\n            ft.dropdownm2.Option(\"Cherry\"),\n        ],\n        multiple=True,\n        on_change=selections_changed,\n        width=200,\n    )\n    selected_values = ft.Text(value=\"\")\n\n    page.add(dd, selected_values)\n\nft.app(main)\n```\n\nEsses exemplos ilustram diferentes maneiras de implementar e utilizar o controle `DropdownM2` em aplicativos Flet, permitindo criar interfaces mais dinâmicas e interativas."
}