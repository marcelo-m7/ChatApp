{
    "file": "docs_controls_elevatedbutton.py",
    "description": "Cada um dos trechos de código que você mencionou utiliza a biblioteca Flet para criar interfaces de usuário simples em Python, especificamente demonstrando o uso de botões elevados (`ElevatedButton`). Vamos descrever cada trecho de código e suas funcionalidades:\n\n1. **Botões Elevados Básicos**:\n   ```python\n   import flet as ft\n\n   def main(page: ft.Page):\n       page.title = \"Basic elevated buttons\"\n       page.add(\n           ft.ElevatedButton(text=\"Elevated button\"),\n           ft.Button(\"Disabled button\", disabled=True),\n       )\n\n   ft.app(main)\n   ```\n   - **Descrição**: Este código cria uma página com dois botões - um botão elevado ativo e um botão padrão desativado.\n   - **Funcionalidades**:\n     - `ft.ElevatedButton(text=\"Elevated button\")`: Cria um botão elevado com o texto \"Elevated button\".\n     - `ft.Button(\"Disabled button\", disabled=True)`: Cria um botão padrão com o texto \"Disabled button\" que está desativado (não pode ser clicado).\n\n2. **Botões Elevados com Ícones**:\n   ```python\n   import flet as ft\n\n   def main(page: ft.Page):\n       page.title = \"Elevated buttons with icons\"\n       page.add(\n           ft.ElevatedButton(\"Button with icon\", icon=\"chair_outlined\"),\n           ft.ElevatedButton(\n               \"Button with colorful icon\",\n               icon=\"park_rounded\",\n               icon_color=\"green400\",\n           ),\n       )\n\n   ft.app(main)\n   ```\n   - **Descrição**: Cria uma página com dois botões elevados, ambos com ícones. O segundo botão tem um ícone colorido.\n   - **Funcionalidades**:\n     - `icon=\"chair_outlined\"`: Adiciona um ícone de cadeira ao primeiro botão.\n     - `icon=\"park_rounded\", icon_color=\"green400\"`: Adiciona um ícone de parque ao segundo botão e define a cor do ícone para verde.\n\n3. **Botão Elevado com Evento de Clique**:\n   ```python\n   import flet as ft\n\n   def main(page: ft.Page):\n       page.title = \"Elevated button with 'click' event\"\n       def button_clicked(e):\n           b.data += 1\n           t.value = f\"Button clicked {b.data} time(s)\"\n           page.update()\n       b = ft.ElevatedButton(\"Button with 'click' event\", on_click=button_clicked, data=0)\n       t = ft.Text()\n       page.add(b, t)\n\n   ft.app(main)\n   ```\n   - **Descrição**: Este código cria um botão que, ao ser clicado, atualiza um texto que conta quantas vezes o botão foi pressionado.\n   - **Funcionalidades**:\n     - `on_click=button_clicked`: Define uma função a ser chamada quando o botão é clicado.\n     - `b.data`: Armazena um valor que é incrementado cada vez que o botão é clicado.\n     - `t.value`: Atualiza o texto exibido na página com o número de cliques.\n\n4. **Botões Elevados com Conteúdo Personalizado**:\n   ```python\n   import flet as ft\n\n   def main(page: ft.Page):\n       page.title = \"Elevated buttons with custom content\"\n       page.add(\n           ft.ElevatedButton(\n               width=150,\n               content=ft.Row(\n                   [\n                       ft.Icon(name=ft.Icons.FAVORITE, color=\"pink\"),\n                       ft.Icon(name=ft.Icons.AUDIOTRACK, color=\"green\"),\n                       ft.Icon(name=ft.Icons.BEACH_ACCESS, color=\"blue\"),\n                   ],\n                   alignment=ft.MainAxisAlignment.SPACE_AROUND,\n               ),\n           ),\n           ft.ElevatedButton(\n               content=ft.Container(\n                   content=ft.Column(\n                       [\n                           ft.Text(value=\"Compound button\", size=20),\n                           ft.Text(value=\"This is secondary text\"),\n                       ],\n                       alignment=ft.MainAxisAlignment.CENTER,\n                       spacing=5,\n                   ),\n                   padding=ft.padding.all(10),\n               ),\n           ),\n       )\n\n   ft.app(main)\n   ```\n   - **Descrição**: Cria uma página com dois botões elevados contendo conteúdos personalizados, como ícones e textos formatados.\n   - **Funcionalidades**:\n     - `ft.Row` e `ft.Column`: Utilizados para organizar os ícones e textos dentro dos botões.\n     - `ft.Container`: Usado para adicionar padding ao conteúdo de um dos botões.\n\n5. **Mudança de Cor no Evento Hover**:\n   ```python\n   import flet as ft\n\n   def main(page: ft.Page):\n       def on_hover(e):\n           e.control.bgcolor = \"orange\" if e.data == \"true\" else \"yellow\"\n           e.control.update()\n       page.add(\n           ft.ElevatedButton(\n               \"I'm changing color on hover\", bgcolor=\"yellow\", on_hover=on_hover\n           )\n       )\n\n   ft.app(main)\n   ```\n   - **Descrição**: Este código adiciona um botão que muda sua cor de fundo quando o cursor está sobre ele.\n   - **Funcionalidades**:\n     - `on_hover=on_hover`: Define uma função que altera a cor de fundo do botão quando o mouse está sobre ele, alternando entre amarelo e laranja.",
    "examples": "Aqui estão exemplos adicionais de diferentes usos de botões elevados (ElevatedButton) usando a biblioteca Flet em Python. Cada exemplo apresenta uma variação no design ou interação para ilustrar a flexibilidade dos componentes de UI que podem ser criados com Flet.\n\n### Exemplo 1: Botão com Tamanho e Cor Personalizados\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Elevated Button with Custom Size and Color\"\n    custom_button = ft.ElevatedButton(\n        text=\"Custom Size and Color\",\n        width=200,\n        height=50,\n        bgcolor=\"purple500\",\n        color=\"white\"\n    )\n    page.add(custom_button)\n\nft.app(main)\n```\n\n### Exemplo 2: Botão com Borda e Sombra Personalizadas\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Elevated Button with Custom Border and Shadow\"\n    button_with_border = ft.ElevatedButton(\n        text=\"Stylish Button\",\n        border_radius=30,\n        elevation=10,\n        border=ft.border.all(3, \"black\")\n    )\n    page.add(button_with_border)\n\nft.app(main)\n```\n\n### Exemplo 3: Botão com Tooltip\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Elevated Button with Tooltip\"\n    button_with_tooltip = ft.ElevatedButton(\n        text=\"Hover Over Me\",\n        tooltip=\"This is a tooltip for the button!\"\n    )\n    page.add(button_with_tooltip)\n\nft.app(main)\n```\n\n### Exemplo 4: Botões com Ação de Reset\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Elevated Buttons with Reset Action\"\n    \n    def reset_counter(e):\n        counter.data = 0\n        text_counter.value = f\"Count: {counter.data}\"\n        page.update()\n\n    def increment_counter(e):\n        counter.data += 1\n        text_counter.value = f\"Count: {counter.data}\"\n        page.update()\n\n    counter = ft.ElevatedButton(\"Increment\", on_click=increment_counter, data=0)\n    reset = ft.ElevatedButton(\"Reset\", on_click=reset_counter)\n    text_counter = ft.Text(value=\"Count: 0\")\n    \n    page.add(counter, text_counter, reset)\n\nft.app(main)\n```\n\n### Exemplo 5: Botão com Múltiplos Eventos (Clique e Hover)\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Elevated Button with Multiple Events\"\n\n    def on_click(e):\n        e.control.text = \"Clicked!\"\n        e.control.update()\n    \n    def on_hover(e):\n        e.control.bgcolor = \"red\" if e.data == \"true\" else \"blue\"\n        e.control.update()\n\n    multi_event_button = ft.ElevatedButton(\n        \"Click or Hover\", bgcolor=\"blue\", on_click=on_click, on_hover=on_hover\n    )\n    \n    page.add(multi_event_button)\n\nft.app(main)\n```\n\nCada um desses exemplos mostra como personalizar `ElevatedButton` para responder a diferentes requisitos de design e interação, demonstrando a versatilidade e o poder do Flet para desenvolvimento de interfaces de usuário."
}