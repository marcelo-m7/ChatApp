{
    "file": "docs_controls_cupertinobottomsheet.py",
    "description": "O código Python apresentado utiliza a biblioteca Flet, que é uma ferramenta para construir interfaces de usuário (UI) de forma simples e eficaz, principalmente para aplicativos web. O código define uma função principal `main` que configura e manipula a página de um aplicativo usando componentes específicos do estilo Cupertino, que imita a estética do iOS.\n\n### Descrição do Código\n\n1. **Importação da Biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Isso importa a biblioteca Flet e a abrevia como `ft` para facilitar o acesso aos seus componentes e funções.\n\n2. **Função Principal `main`**:\n   ```python\n   def main(page):\n   ```\n   A função `main` é definida com um parâmetro `page`, que representa a página do aplicativo onde os UI components serão colocados.\n\n3. **Configuração de Alinhamento Horizontal**:\n   ```python\n   page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n   ```\n   Define o alinhamento horizontal dos elementos dentro da página para o centro.\n\n4. **Função de Manipulação de Clique `handle_click`**:\n   ```python\n   def handle_click(e):\n       page.add(ft.Text(f\"Action clicked: {e.control.content.value}\"))\n       page.close(bottom_sheet)\n   ```\n   - `handle_click` é uma função que é chamada quando um botão no CupertinoActionSheet é clicado.\n   - Ela adiciona um texto à página que indica qual ação foi clicada, acessando o valor do conteúdo do controle que disparou o evento.\n   - Fecha o `bottom_sheet` após a ação.\n\n5. **Definição do `CupertinoActionSheet`**:\n   ```python\n   action_sheet = ft.CupertinoActionSheet(\n       title=ft.Row([...]),\n       message=ft.Row([...]),\n       cancel=...,\n       actions=[...],\n   )\n   ```\n   - **`title` e `message`**: Definidos como `Row` com um `Text` dentro, ambos centrados. São usados para mostrar um cabeçalho e uma descrição no sheet.\n   - **`cancel`**: Um botão de cancelar que também usa a função `handle_click`.\n   - **`actions`**: Uma lista de ações, cada uma com seu próprio botão e configurações, como ação padrão (`is_default_action`) e ação destrutiva (`is_destructive_action`), que também usam a função `handle_click`.\n\n6. **CupertinoBottomSheet**:\n   ```python\n   bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n   ```\n   Inicializa um `CupertinoBottomSheet` que contém o `action_sheet` criado anteriormente.\n\n7. **Botão para Abrir o `bottom_sheet`**:\n   ```python\n   page.add(\n       ft.CupertinoFilledButton(\n           \"Open CupertinoBottomSheet\",\n           on_click=lambda e: page.open(bottom_sheet),\n       )\n   )\n   ```\n   - Adiciona um botão à página que, quando clicado, abre o `bottom_sheet`.\n   - O evento de clique é tratado por uma função lambda que chama `page.open` com o `bottom_sheet`.\n\n8. **Inicialização do Aplicativo**:\n   ```python\n   ft.app(main)\n   ```\n   Inicia o aplicativo Flet passando a função `main` como ponto de entrada.\n\n### Conclusão\n\nEste código demonstra como usar componentes específicos do iOS (estilo Cupertino) em um aplicativo Flet para criar uma interface de usuário interativa que responde a cliques, exibindo diferentes tipos de ações em um bottom sheet e manipulando eventos de clique de forma eficiente.",
    "examples": "O código original que você forneceu é um exemplo de como utilizar a interface `CupertinoActionSheet` em conjunto com um `CupertinoBottomSheet` no framework Flet para criar uma interface de usuário interativa. O exemplo mostra a utilização de botões que, ao serem clicados, disparam ações que são refletidas em uma folha de ação estilo iOS.\n\nA seguir, vou fornecer alguns exemplos adicionais que destacam diferentes formas de uso para expandir a funcionalidade ou adaptar o código a diferentes cenários.\n\n### Exemplo 1: Adicionando Ícones às Ações\n\nNeste exemplo, adicionaremos ícones às ações para tornar a interface mais visualmente atraente.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.content.children[1].value}\"))\n        page.close(bottom_sheet)\n\n    action_sheet = ft.CupertinoActionSheet(\n        title=ft.Row([ft.Text(\"Title\")], alignment=ft.MainAxisAlignment.CENTER),\n        message=ft.Row([ft.Text(\"Description\")], alignment=ft.MainAxisAlignment.CENTER),\n        cancel=ft.CupertinoActionSheetAction(\n            content=ft.Row([\n                ft.Icon(ft.icons.CANCEL, size=24),\n                ft.Text(\" Cancel\")\n            ]),\n            on_click=handle_click,\n        ),\n        actions=[\n            ft.CupertinoActionSheetAction(\n                content=ft.Row([\n                    ft.Icon(ft.icons.CHECK_CIRCLE, size=24, color=ft.colors.GREEN),\n                    ft.Text(\" Default Action\")\n                ]),\n                is_default_action=True,\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Row([\n                    ft.Icon(ft.icons.INFO_OUTLINE, size=24),\n                    ft.Text(\" Normal Action\")\n                ]),\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Row([\n                    ft.Icon(ft.icons.WARNING, size=24, color=ft.colors.RED),\n                    ft.Text(\" Destructive Action\")\n                ]),\n                is_destructive_action=True,\n                on_click=handle_click,\n            ),\n        ],\n    )\n    bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open CupertinoBottomSheet\",\n            on_click=lambda e: page.open(bottom_sheet),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Uso de CupertinoActionSheet com Variadas Respostas\n\nEste exemplo mostra como você pode usar o `CupertinoActionSheet` para obter uma resposta do usuário e agir de acordo com a escolha.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_click(e):\n        response = f\"Action clicked: {e.control.content.value}\"\n        page.add(ft.Text(response))\n        page.update()  # Atualiza a página para mostrar a resposta selecionada\n        page.close(bottom_sheet)\n\n    action_sheet = ft.CupertinoActionSheet(\n        title=ft.Text(\"Choose an Option\"),\n        actions=[\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Option A\"),\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Option B\"),\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Option C\"),\n                on_click=handle_click,\n            ),\n        ],\n        cancel=ft.CupertinoActionSheetAction(\n            content=ft.Text(\"Cancel\"),\n            on_click=handle_click,\n        ),\n    )\n    bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Choose Option\",\n            on_click=lambda e: page.open(bottom_sheet),\n        )\n    )\n\nft.app(main)\n```\n\nEsses exemplos adicionais mostram como você pode modificar e expandir o uso de `CupertinoActionSheet` e `CupertinoBottomSheet` em aplicações Flet, tornando-as mais interativas e adaptadas às necessidades específicas do usuário."
}