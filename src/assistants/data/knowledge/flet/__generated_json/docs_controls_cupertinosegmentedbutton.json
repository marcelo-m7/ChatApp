{
    "file": "docs_controls_cupertinosegmentedbutton.py",
    "description": "O código que você forneceu é um exemplo de como criar uma interface de usuário usando a biblioteca Flet em Python, especificamente para criar um botão segmentado ao estilo do Cupertino (iOS). Vou descrever cada parte do código e explicar suas funções e propriedades.\n\n1. **Importando a biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Esta linha importa a biblioteca Flet, que é usada para criar interfaces de usuário baseadas na web usando Python.\n\n2. **Definindo a função principal**:\n   ```python\n   def main(page):\n   ```\n   A função `main` é definida com um parâmetro `page`, que representa a página da aplicação web onde os elementos da UI serão adicionados.\n\n3. **Configurando o modo de tema da página**:\n   ```python\n   page.theme_mode = ft.ThemeMode.LIGHT\n   ```\n   Esta linha configura o modo de tema da página para \"LIGHT\". Flet suporta temas claros e escuros, e aqui está sendo especificado explicitamente o uso do tema claro.\n\n4. **Adicionando um botão segmentado ao estilo Cupertino**:\n   ```python\n   page.add(\n       ft.CupertinoSegmentedButton(\n   ```\n   Aqui, um `CupertinoSegmentedButton` é adicionado à página. Este widget é uma representação de um botão segmentado que segue o design típico do iOS (Cupertino).\n\n5. **Propriedades do `CupertinoSegmentedButton`**:\n   - **`selected_index=1`**: Define o índice do segmento inicialmente selecionado como 1 (0 é o primeiro índice, então 1 representa o segundo segmento).\n   - **`selected_color=ft.Colors.RED_400`**: Define a cor do segmento selecionado como vermelho (especificamente o tom `RED_400` da paleta de cores pré-definidas de Flet).\n   - **`on_change`**: É um evento que é chamado quando o índice selecionado muda. A função lambda associada imprime o novo índice selecionado.\n     ```python\n     on_change=lambda e: print(f\"selected_index: {e.data}\"),\n     ```\n     Onde `e.data` contém o índice do segmento selecionado.\n\n6. **Controles dentro do botão segmentado**:\n   Cada controle dentro do `CupertinoSegmentedButton` é um segmento que pode ser selecionado. Aqui, três controles são definidos:\n   - **Primeiro Segmento**: Simplesmente um texto \"One\".\n     ```python\n     ft.Text(\"One\"),\n     ```\n   - **Segundo Segmento**: Um texto \"Two\" dentro de um `Container` com padding horizontal de 30 pixels.\n     ```python\n     ft.Container(\n         padding=ft.padding.symmetric(0, 30),\n         content=ft.Text(\"Two\"),\n     ),\n     ```\n   - **Terceiro Segmento**: Um texto \"Three\" dentro de um `Container` com padding horizontal de 10 pixels.\n     ```python\n     ft.Container(\n         padding=ft.padding.symmetric(0, 10),\n         content=ft.Text(\"Three\"),\n     ),\n     ```\n\n7. **Iniciando a aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação, usando a função `main` como ponto de entrada para a construção da interface do usuário.\n\nEste código cria uma interface de usuário web simples com um botão segmentado, permitindo ao usuário escolher entre três opções, com feedback visual e funcional sobre a opção selecionada.",
    "examples": "Claro, abaixo estão alguns exemplos adicionais que mostram diferentes formas de uso do widget `CupertinoSegmentedButton` no framework Flet, ajustando diferentes propriedades e comportamentos para ilustrar a flexibilidade deste componente.\n\n### Exemplo 1: Alterando Cores e Modo Tema\nNeste exemplo, vou mudar as cores do botão selecionado e do texto, e também definir o modo de tema para escuro.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.theme_mode = ft.ThemeMode.DARK  # Mudar o tema para escuro\n    page.add(\n        ft.CupertinoSegmentedButton(\n            selected_index=0,\n            selected_color=ft.Colors.GREEN_400,  # Cor do segmento selecionado\n            unselected_color=ft.Colors.GREY_300,  # Cor dos segmentos não selecionados\n            on_change=lambda e: print(f\"selected_index: {e.data}\"),\n            controls=[\n                ft.Text(\"A\", color=ft.Colors.WHITE),\n                ft.Text(\"B\", color=ft.Colors.WHITE),\n                ft.Text(\"C\", color=ft.Colors.WHITE),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Usando Imagens nos Botões\nEste exemplo mostra como adicionar imagens em cada segmento do botão.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.add(\n        ft.CupertinoSegmentedButton(\n            selected_index=2,\n            selected_color=ft.Colors.BLUE_400,\n            on_change=lambda e: print(f\"selected_index: {e.data}\"),\n            controls=[\n                ft.Icon(ft.Icons.FAVORITE, color=ft.Colors.PINK_300),\n                ft.Icon(ft.Icons.HOME, color=ft.Colors.BLUE_300),\n                ft.Icon(ft.Icons.SEARCH, color=ft.Colors.GREEN_300),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Botões com Diferentes Paddings e Textos Dinâmicos\nAjustar o padding internamente e usar textos mais longos para ver como o layout se ajusta.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.add(\n        ft.CupertinoSegmentedButton(\n            selected_index=1,\n            selected_color=ft.Colors.ORANGE_400,\n            on_change=lambda e: print(f\"selected_index: {e.data}\"),\n            controls=[\n                ft.Container(\n                    padding=ft.padding.symmetric(0, 5),\n                    content=ft.Text(\"Short\"),\n                ),\n                ft.Container(\n                    padding=ft.padding.symmetric(0, 20),\n                    content=ft.Text(\"Medium Length\"),\n                ),\n                ft.Container(\n                    padding=ft.padding.symmetric(0, 35),\n                    content=ft.Text(\"A Very Long Segment Text\"),\n                ),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 4: Desabilitando um dos Botões\nVocê pode querer desabilitar um dos botões do segmento em determinadas condições.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.add(\n        ft.CupertinoSegmentedButton(\n            selected_index=0,\n            selected_color=ft.Colors.BLUE_400,\n            on_change=lambda e: print(f\"selected_index: {e.data}\"),\n            controls=[\n                ft.Text(\"Active\"),\n                ft.Text(\"Disabled\"),\n                ft.Text(\"Active\"),\n            ],\n            disabled_indices=[1],  # Desabilitar o segundo botão\n        ),\n    )\n\nft.app(main)\n```\n\nCada um desses exemplos mostra uma maneira diferente de configurar e personalizar o `CupertinoSegmentedButton` no Flet, adaptando-se a diferentes necessidades de UI e comportamento."
}