{
    "file": "docs_controls_dropdown.py",
    "description": "Os dois blocos de código são exemplos de como usar a biblioteca Flet para criar interfaces de usuário interativas com Python. Vamos analisar cada bloco separadamente para entender o que eles fazem e como funcionam.\n\n### Primeiro Bloco de Código\n\nEste código cria uma interface de usuário com um menu dropdown que permite ao usuário selecionar uma cor. Cada cor disponível altera a cor do texto dentro do próprio item do dropdown quando selecionada.\n\n1. **Importação e Definição da Função Principal:**\n   ```python\n   import flet as ft\n   def main(page: ft.Page):\n   ```\n   Importa a biblioteca Flet e define a função `main`, que é o ponto de entrada da aplicação. A função recebe um objeto `page`, que representa a página da interface de usuário.\n\n2. **Lista de Cores:**\n   ```python\n   colors = [ft.Colors.RED, ft.Colors.BLUE, ft.Colors.YELLOW, ft.Colors.PURPLE, ft.Colors.LIME]\n   ```\n   Define uma lista de cores que serão usadas nas opções do dropdown.\n\n3. **Função `get_options`:**\n   ```python\n   def get_options():\n       options = []\n       for color in colors:\n           options.append(ft.DropdownOption(key=color.value, content=ft.Text(value=color.value, color=color)))\n       return options\n   ```\n   Esta função itera sobre a lista de cores, criando uma lista de `DropdownOption` onde cada opção tem um texto colorido correspondente à cor. A chave de cada opção é baseada no valor da cor.\n\n4. **Manipulador de Eventos `dropdown_changed`:**\n   ```python\n   def dropdown_changed(e):\n       e.control.color = e.control.value\n       page.update()\n   ```\n   Define um manipulador de eventos que é chamado quando o valor do dropdown muda. Ele atualiza a cor do controle dropdown para corresponder à cor selecionada e solicita uma atualização da página.\n\n5. **Criação do Dropdown:**\n   ```python\n   dd = ft.Dropdown(editable=True, label=\"Color\", options=get_options(), on_change=dropdown_changed)\n   page.add(dd)\n   ```\n   Cria um objeto `Dropdown` que é editável, possui um rótulo \"Color\", usa as opções geradas pela função `get_options` e tem o manipulador `dropdown_changed` associado ao evento de mudança. O dropdown é então adicionado à página.\n\n### Segundo Bloco de Código\n\nEste código cria uma interface com um menu dropdown para escolha de ícones.\n\n1. **Lista de Ícones:**\n   ```python\n   icons = [\n       {\"name\": \"Smile\", \"icon_name\": ft.Icons.SENTIMENT_SATISFIED_OUTLINED},\n       {\"name\": \"Cloud\", \"icon_name\": ft.Icons.CLOUD_OUTLINED},\n       {\"name\": \"Brush\", \"icon_name\": ft.Icons.BRUSH_OUTLINED},\n       {\"name\": \"Heart\", \"icon_name\": ft.Icons.FAVORITE},\n   ]\n   ```\n   Define uma lista de dicionários representando ícones e seus nomes.\n\n2. **Função `get_options`:**\n   ```python\n   def get_options():\n       options = []\n       for icon in icons:\n           options.append(ft.DropdownOption(key=icon[\"name\"], leading_icon=icon[\"icon_name\"]))\n       return options\n   ```\n   Itera sobre a lista de ícones criando opções de dropdown para cada ícone com um ícone líder correspondente.\n\n3. **Criação do Dropdown:**\n   ```python\n   dd = ft.Dropdown(border=ft.InputBorder.UNDERLINE, enable_filter=True, editable=True, leading_icon=ft.Icons.SEARCH, label=\"Icon\", options=get_options())\n   page.add(dd)\n   ```\n   Cria um `Dropdown` com uma borda sublinhada, filtro habilitado, editável, e um ícone líder de busca. Usa as opções geradas pela função `get_options` e adiciona o dropdown à página.\n\nAmbos os blocos de código demonstram como criar dropdowns interativos usando Flet, lidando com cores e ícones, respectivamente, e como manipular eventos para atualizar a interface baseada na interação do usuário.",
    "examples": "Claro! Vamos explorar diferentes formas de modificar e utilizar os códigos Flet fornecidos em contextos variados, para dar uma ideia mais ampla de como você pode adaptar esses exemplos para diferentes necessidades.\n\n### Exemplo 1: Dropdown de Cores com Textos Personalizados\n\nNeste exemplo, vamos modificar o dropdown de cores para incluir textos personalizados ao lado das cores, que descrevem cada cor de forma mais detalhada.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    colors = [\n        {\"name\": \"Vermelho\", \"value\": ft.Colors.RED},\n        {\"name\": \"Azul\", \"value\": ft.Colors.BLUE},\n        {\"name\": \"Amarelo\", \"value\": ft.Colors.YELLOW},\n        {\"name\": \"Roxo\", \"value\": ft.Colors.PURPLE},\n        {\"name\": \"Verde Limão\", \"value\": ft.Colors.LIME},\n    ]\n\n    def get_options():\n        options = []\n        for color in colors:\n            options.append(\n                ft.DropdownOption(\n                    key=color[\"value\"].value,\n                    content=ft.Text(\n                        value=f\"{color['name']} ({color['value'].value})\",\n                        color=color[\"value\"],\n                    ),\n                )\n            )\n        return options\n\n    def dropdown_changed(e):\n        e.control.color = ft.Color(e.control.value)\n        page.update()\n\n    dd = ft.Dropdown(\n        editable=True,\n        label=\"Escolha uma Cor\",\n        options=get_options(),\n        on_change=dropdown_changed,\n    )\n    page.add(dd)\n\nft.app(main)\n```\n\n### Exemplo 2: Dropdown de Ícones com Descrições\n\nAqui vamos adicionar uma descrição de texto para cada ícone no dropdown.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    icons = [\n        {\"name\": \"Sorriso\", \"icon_name\": ft.Icons.SENTIMENT_SATISFIED_OUTLINED, \"desc\": \"Expressa felicidade\"},\n        {\"name\": \"Nuvem\", \"icon_name\": ft.Icons.CLOUD_OUTLINED, \"desc\": \"Clima nublado\"},\n        {\"name\": \"Pincel\", \"icon_name\": ft.Icons.BRUSH_OUTLINED, \"desc\": \"Ferramenta de pintura\"},\n        {\"name\": \"Coração\", \"icon_name\": ft.Icons.FAVORITE, \"desc\": \"Amor ou favoritismo\"},\n    ]\n\n    def get_options():\n        options = []\n        for icon in icons:\n            options.append(\n                ft.DropdownOption(\n                    key=icon[\"name\"],\n                    leading_icon=icon[\"icon_name\"],\n                    content=ft.Text(value=f\"{icon['name']} - {icon['desc']}\")\n                )\n            )\n        return options\n\n    dd = ft.Dropdown(\n        border=ft.InputBorder.OUTLINE,\n        enable_filter=True,\n        editable=True,\n        leading_icon=ft.Icons.SEARCH,\n        label=\"Escolha um Ícone\",\n        options=get_options(),\n    )\n    page.add(dd)\n\nft.app(main)\n```\n\n### Considerações\n\nEsses exemplos mostram como você pode personalizar dropdowns no Flet para incluir mais informações e interatividade, ajustando-os para diferentes contextos de aplicativos. Cada exemplo adiciona um nível de detalhe e funcionalidade que pode ser útil em diferentes cenários de uso."
}