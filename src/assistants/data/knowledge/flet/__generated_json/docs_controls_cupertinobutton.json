{
    "file": "docs_controls_cupertinobutton.py",
    "description": "O código Python apresentado utiliza a biblioteca Flet para criar uma interface de usuário (UI) simples com botões no estilo do sistema operacional iOS (Cupertino) e um botão elevado que se adapta ao estilo da plataforma em que está sendo executado. Vamos descrever cada parte do código e suas propriedades:\n\n### Importação da biblioteca Flet\n\n```python\nimport flet as ft\n```\nEsta linha importa a biblioteca Flet, que é usada para criar interfaces de usuário de forma rápida e eficiente em Python.\n\n### Definição da função principal\n\n```python\ndef main(page: ft.Page):\n```\nDefine a função `main` que recebe um objeto `Page` da biblioteca Flet. Este objeto `page` é onde todos os elementos da UI (interface de usuário) serão adicionados.\n\n### Adicionando elementos à página\n\nO método `page.add()` é usado para adicionar elementos à página. Os elementos adicionados aqui são:\n\n1. **CupertinoButton (Normal)**:\n   - **content**: Define o conteúdo do botão. Neste caso, é um texto com a string \"Normal CupertinoButton\" e a cor definida como `DESTRUCTIVE_RED` do conjunto de cores Cupertino.\n   - **opacity_on_click**: Define a opacidade do botão quando clicado para 0.3, o que faz o botão parecer parcialmente transparente ao ser pressionado.\n   - **on_click**: Um manipulador de eventos que é chamado quando o botão é clicado. Aqui, ele simplesmente imprime uma mensagem no console.\n\n2. **CupertinoButton (Filled)**:\n   - **content**: Similar ao botão normal, mas com o texto \"Filled CupertinoButton\" e cor amarela.\n   - **bgcolor**: Define a cor de fundo do botão como a cor primária definida pelo sistema.\n   - **alignment**: Define o alinhamento do botão na página para o topo esquerdo.\n   - **border_radius**: Define o raio da borda do botão para todos os lados, criando bordas arredondadas com raio de 15.\n   - **opacity_on_click**: Define a opacidade do botão quando clicado para 0.5.\n   - **on_click**: Manipulador de eventos que imprime uma mensagem no console quando o botão é clicado.\n\n3. **ElevatedButton**:\n   - **adaptive**: Quando definido como `True`, o estilo do botão se adapta ao estilo da plataforma em que a aplicação está sendo executada. Por exemplo, em plataformas da Apple, ele renderiza como um `CupertinoButton`.\n   - **bgcolor**: Define a cor de fundo do botão para `SYSTEM_TEAL` do conjunto de cores Cupertino.\n   - **content**: Contém um `Row` (linha) que organiza seus filhos horizontalmente. Os filhos aqui são um ícone (coração rosa) e um texto \"ElevatedButton+adaptive\".\n   - **tight**: Define se a linha deve minimizar seu tamanho para caber o conteúdo.\n\n### Executando a aplicação\n\n```python\nft.app(main)\n```\nEsta linha inicia a aplicação, chamando a função `main` para construir a página.\n\n### Conclusão\n\nO script cria uma interface simples com três botões, demonstrando diferentes propriedades e estilos dos botões disponíveis na biblioteca Flet, como cores, opacidade em cliques, e estilos adaptativos a diferentes plataformas. É um exemplo interessante de como criar interfaces de usuário interativas usando Flet com Python.",
    "examples": "A função `main` no código acima cria uma página com três botões usando a biblioteca Flet, que é uma ferramenta para criar aplicativos web com Python. Para adicionar mais exemplos e mostrar diferentes formas de uso dos componentes do Flet, vamos explorar variações nos botões, incluindo diferentes estilos, comportamentos e layouts. Aqui estão alguns exemplos adicionais:\n\n### Exemplo 1: Botão com ícone e texto\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.CupertinoButton(\n            content=ft.Row([\n                ft.Icon(name=ft.Icons.ADD, color=ft.Colors.BLUE),\n                ft.Text(\"Adicionar\", color=ft.Colors.BLUE)\n            ]),\n            on_click=lambda e: print(\"Adicionar botão clicado!\"),\n        )\n    )\n\nft.app(main)\n```\nEste exemplo mostra um `CupertinoButton` com um ícone de adição seguido de um texto. Isso é útil para botões de ação rápida em interfaces.\n\n### Exemplo 2: Botão de ação flutuante (FAB)\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.FloatingActionButton(\n            content=ft.Icon(name=ft.Icons.ADD, color=ft.Colors.WHITE),\n            bgcolor=ft.Colors.RED,\n            on_click=lambda e: print(\"Floating Action Button clicked!\"),\n        )\n    )\n\nft.app(main)\n```\nEste exemplo cria um botão flutuante de ação, comumente usado em aplicativos para promover uma ação principal.\n\n### Exemplo 3: Botão com borda e sombra personalizada\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.CupertinoButton(\n            content=ft.Text(\"Custom Border Button\"),\n            border=ft.Border.all(color=ft.Colors.GREEN, width=2),\n            elevation=10,\n            on_click=lambda e: print(\"Custom Border Button clicked!\")\n        )\n    )\n\nft.app(main)\n```\nAqui, o botão tem uma borda verde personalizada e uma elevação para adicionar sombra, melhorando a percepção de profundidade.\n\n### Exemplo 4: Botão com ação de redirecionamento\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def navigate_url(e):\n        page.open_url(\"https://www.example.com\")\n\n    page.add(\n        ft.CupertinoButton(\n            content=ft.Text(\"Visite nosso site\"),\n            on_click=navigate_url,\n        )\n    )\n\nft.app(main)\n```\nEste exemplo inclui um botão que, quando clicado, redireciona o usuário para um URL específico.\n\n### Exemplo 5: Botão desabilitado\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.CupertinoButton(\n            content=ft.Text(\"Disabled Button\"),\n            disabled=True,\n            on_click=lambda e: print(\"Este botão está desabilitado!\")\n        )\n    )\n\nft.app(main)\n```\nEste exemplo mostra um botão que está desabilitado e não pode ser clicado, útil para casos onde certas condições precisam ser atendidas para ativar o botão.\n\nCada um desses exemplos destaca diferentes maneiras de usar os componentes do Flet para criar interfaces ricas e interativas."
}