{
    "file": "docs_controls_checkbox.py",
    "description": "Os dois blocos de código que você forneceu são exemplos de como usar a biblioteca Flet em Python para criar interfaces de usuário baseadas em web com componentes interativos como caixas de seleção (checkboxes) e botões. Vamos analisar cada um deles detalhadamente:\n\n### Primeiro Bloco de Código\n\nEste código cria uma interface de usuário com várias caixas de seleção e um botão. Quando o botão é pressionado, ele atualiza um texto para mostrar os estados atuais das caixas de seleção.\n\n**Componentes:**\n1. **`ft.Checkbox`**: Cria uma caixa de seleção. \n   - `label`: Texto que aparece ao lado da caixa.\n   - `value`: Estado inicial da caixa (True para marcado, False para desmarcado).\n   - `tristate`: Se `True`, a caixa de seleção pode ter três estados: marcado, desmarcado e indefinido.\n   - `disabled`: Se `True`, a caixa de seleção é exibida como desativada e não pode ser alterada pelo usuário.\n   - `label_position`: Posição do rótulo em relação à caixa, por exemplo, à esquerda.\n\n2. **`ft.ElevatedButton`**: Cria um botão elevado.\n   - `text`: Texto do botão.\n   - `on_click`: Função chamada quando o botão é clicado.\n\n3. **`ft.Text`**: Componente de texto para exibição de mensagens.\n\n**Funções:**\n- **`button_clicked`**: Atualiza o texto para mostrar os valores atuais das caixas de seleção quando o botão é clicado.\n- **`page.update`**: Atualiza a página para refletir as mudanças nos componentes.\n\n**Uso:**\n- Inicializa as caixas de seleção com diferentes configurações (padrão, tristate, pré-marcada, desativada, rótulo à esquerda).\n- Adiciona os componentes à página e configura o comportamento do botão para atualizar o texto conforme o estado das caixas de seleção.\n\n### Segundo Bloco de Código\n\nEste código cria uma única caixa de seleção que, ao ter seu estado alterado, atualiza um texto para refletir essa mudança.\n\n**Componentes:**\n- **`ft.Checkbox`**: Como antes, cria uma caixa de seleção.\n  - `on_change`: Função chamada sempre que o valor da caixa de seleção muda.\n\n- **`ft.Text`**: Usado para exibir a mensagem sobre o estado atual da caixa de seleção.\n\n**Funções:**\n- **`checkbox_changed`**: Atualiza o texto com o novo estado da caixa de seleção.\n- **`t.update`**: Atualiza o componente de texto para mostrar a nova mensagem.\n\n**Uso:**\n- Monitora mudanças na caixa de seleção e reflete essas mudanças em tempo real no componente de texto.\n\nEssas descrições dão uma boa visão geral de como os componentes da biblioteca Flet funcionam em conjunto para criar interfaces interativas. Cada componente tem propriedades específicas que determinam sua aparência e comportamento, e funções de evento como `on_click` e `on_change` são usadas para adicionar interatividade aos componentes.",
    "examples": "Os exemplos adicionais abaixo exploram diferentes funcionalidades e configurações dos componentes `Checkbox` e `Text` utilizando o framework Flet em Python. Cada exemplo demonstra uma forma distinta de interação ou apresentação na interface do usuário.\n\n### Exemplo 1: Uso de Grupos de Checkbox para Seleção Múltipla\n\n```python\nimport flet as ft\n\ndef main(page):\n    def submit_clicked(e):\n        selected = [cb.label for cb in checkboxes if cb.value]\n        t.value = f\"Selected checkboxes: {', '.join(selected)}\"\n        page.update()\n    \n    checkboxes = [\n        ft.Checkbox(label=f\"Option {i}\") for i in range(1, 6)\n    ]\n    b = ft.ElevatedButton(text=\"Submit\", on_click=submit_clicked)\n    t = ft.Text()\n\n    page.add(*checkboxes, b, t)\n\nft.app(main)\n```\n\n### Exemplo 2: Checkbox com Evento de Mudança e Feedback Imediato\n\n```python\nimport flet as ft\n\ndef main(page):\n    def checkbox_changed(e):\n        t.value = f\"{e.control.label} is now {'checked' if e.control.value else 'unchecked'}\"\n        page.update()\n\n    c1 = ft.Checkbox(label=\"Dynamic Feedback Checkbox\", on_change=checkbox_changed)\n    t = ft.Text()\n\n    page.add(c1, t)\n\nft.app(main)\n```\n\n### Exemplo 3: Checkbox com Estilos Personalizados\n\n```python\nimport flet as ft\n\ndef main(page):\n    c = ft.Checkbox(\n        label=\"Custom Style Checkbox\",\n        value=True,\n        label_position=ft.LabelPosition.LEFT,\n        style=ft.styles.CheckboxStyle(\n            active_color=ft.colors.GREEN,\n            check_color=ft.colors.WHITE,\n            focus_color=ft.colors.RED\n        )\n    )\n    page.add(c)\n\nft.app(main)\n```\n\n### Exemplo 4: Checkbox com Layout Horizontal\n\n```python\nimport flet as ft\n\ndef main(page):\n    row = ft.Row([\n        ft.Checkbox(label=f\"Item {i+1}\") for i in range(5)\n    ])\n    page.add(row)\n\nft.app(main)\n```\n\n### Exemplo 5: Uso de Checkbox para Configurações de Aplicativo\n\n```python\nimport flet as ft\n\ndef main(page):\n    def settings_changed(e):\n        settings[e.control.label] = e.control.value\n        t.value = f\"Settings updated: {settings}\"\n        page.update()\n\n    settings = {\n        \"Enable Notifications\": False,\n        \"Dark Mode\": False,\n        \"Auto Sync\": False\n    }\n    checkboxes = [\n        ft.Checkbox(label=setting, value=value, on_change=settings_changed)\n        for setting, value in settings.items()\n    ]\n    t = ft.Text()\n\n    page.add(*checkboxes, t)\n\nft.app(main)\n```\n\nCada um destes exemplos mostra diferentes maneiras de utilizar o componente `Checkbox` para interações com o usuário, desde a simples exibição de estado até a aplicação de estilos personalizados e a manipulação de eventos de mudança para atualização de estado ou estilo em tempo real."
}