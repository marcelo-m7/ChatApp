{
    "file": "docs_controls_filledbutton.py",
    "description": "O código Python apresentado usa a biblioteca Flet para criar uma interface gráfica simples com três botões. Vamos analisar cada parte do código:\n\n1. **Importação da biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Este código importa a biblioteca Flet com um alias `ft`, que é utilizado para acessar as funções e classes da biblioteca.\n\n2. **Definição da função `main`**:\n   ```python\n   def main(page: ft.Page):\n   ```\n   A função `main` é definida com um parâmetro `page`, que é do tipo `ft.Page`. Este é um objeto que representa a página da aplicação web onde os elementos da UI (Interface do Usuário) serão adicionados.\n\n3. **Configurando o título da página**:\n   ```python\n   page.title = \"Basic filled buttons\"\n   ```\n   Aqui o título da página é definido como \"Basic filled buttons\". Este título aparece na aba do navegador quando a página é carregada.\n\n4. **Adicionando botões à página**:\n   ```python\n   page.add(\n       ft.FilledButton(text=\"Filled button\"),\n       ft.FilledButton(\"Disabled button\", disabled=True),\n       ft.FilledButton(\"Button with icon\", icon=\"add\"),\n   )\n   ```\n   Nesta parte, três botões são adicionados à página usando o método `add` do objeto `page`:\n\n   - `ft.FilledButton(text=\"Filled button\")`: Adiciona um botão preenchido com o texto \"Filled button\". Por padrão, o botão é habilitado e sem ícone.\n   - `ft.FilledButton(\"Disabled button\", disabled=True)`: Adiciona um botão com o texto \"Disabled button\", mas este está desabilitado (`disabled=True`), o que significa que não pode ser clicado ou interagido.\n   - `ft.FilledButton(\"Button with icon\", icon=\"add\")`: Adiciona um botão com o texto \"Button with icon\" e um ícone representado pela string \"add\". O ícone \"add\" geralmente representa um sinal de mais (+), indicativo de uma ação de adição ou criação.\n\n5. **Executando a aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Este comando inicia a aplicação, chamando a função `main` e passando a ela o objeto `page` que será usado para construir a interface gráfica. A função `ft.app` é responsável por configurar e executar o servidor web que serve a aplicação Flet.\n\n### Conclusão\n\nEste script cria uma interface gráfica simples com três botões usando a biblioteca Flet, que é projetada para facilitar a criação de aplicativos web com Python. Cada botão demonstra diferentes propriedades que podem ser configuradas, como texto, estado habilitado/desabilitado e ícones. Flet permite o desenvolvimento de interfaces de usuário de forma rápida e eficiente, sendo uma excelente opção para projetos que necessitam de uma interface gráfica simples rodando em um navegador.",
    "examples": "Abaixo estão alguns exemplos adicionais que ilustram diferentes maneiras de utilizar o `FilledButton` no Flet para criar interfaces de usuário interativas e visuais. Esses exemplos expandem o código básico fornecido, mostrando como configurar cores, eventos e muito mais.\n\n### Exemplo 1: Alterando Cores do Botão\nEste exemplo mostra como alterar as cores de fundo e do texto de um `FilledButton`.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Botões com Cores Personalizadas\"\n    page.add(\n        ft.FilledButton(\n            text=\"Botão Vermelho\",\n            bgcolor=ft.colors.RED_500,\n            color=ft.colors.WHITE\n        ),\n        ft.FilledButton(\n            text=\"Botão Verde\",\n            bgcolor=ft.colors.GREEN_500,\n            color=ft.colors.WHITE,\n            disabled=True  # Este botão está desativado\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Botões com Eventos\nEste exemplo adiciona um evento de clique que muda o texto do botão quando ele é clicado.\n\n```python\nimport flet as ft\n\ndef on_button_click(e):\n    e.control.text = \"Clicado!\"\n    e.control.update()\n\ndef main(page: ft.Page):\n    page.title = \"Botões com Eventos\"\n    btn = ft.FilledButton(\n        text=\"Clique-me\",\n        on_click=on_button_click\n    )\n    page.add(btn)\n\nft.app(main)\n```\n\n### Exemplo 3: Botões com Ícones e Layout\nAqui, os botões são organizados horizontalmente usando `Row` e incluem ícones.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Botões com Ícones e Layout\"\n    page.add(\n        ft.Row([\n            ft.FilledButton(\n                text=\"Adicionar\",\n                icon=\"add\",\n                icon_color=ft.colors.BLUE_500\n            ),\n            ft.FilledButton(\n                text=\"Editar\",\n                icon=\"edit\",\n                icon_color=ft.colors.AMBER_500\n            ),\n            ft.FilledButton(\n                text=\"Excluir\",\n                icon=\"delete\",\n                icon_color=ft.colors.RED_500\n            )\n        ], alignment=\"spaceAround\")\n    )\n\nft.app(main)\n```\n\n### Exemplo 4: Botões com Diferentes Tamanhos\nEste exemplo mostra botões com diferentes tamanhos usando o atributo `elevation`.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Botões com Diferentes Tamanhos\"\n    page.add(\n        ft.FilledButton(\n            text=\"Pequeno\",\n            elevation=1\n        ),\n        ft.FilledButton(\n            text=\"Médio\",\n            elevation=4\n        ),\n        ft.FilledButton(\n            text=\"Grande\",\n            elevation=8\n        )\n    )\n\nft.app(main)\n```\n\nEsses exemplos devem dar uma boa ideia de como você pode manipular `FilledButton` em Flet para criar interfaces mais complexas e interativas."
}