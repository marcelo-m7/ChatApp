{
    "file": "docs_controls_interactiveviewer.py",
    "description": "O código apresentado utiliza a biblioteca Flet, que é uma ferramenta usada para criar aplicativos web com Python de maneira simples e eficiente. O código define uma função `main` que aceita um objeto `ft.Page` como parâmetro, que representa a página web onde os componentes UI serão exibidos.\n\nAqui está uma descrição detalhada de cada parte do código:\n\n1. **Importação da biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Esta linha importa a biblioteca Flet e a abrevia como `ft`, facilitando a referência a seus componentes e funcionalidades subsequentemente no código.\n\n2. **Definição da função `main`**:\n   ```python\n   def main(page: ft.Page):\n   ```\n   Esta função é responsável por configurar e exibir os componentes na página web. O parâmetro `page` é um objeto do tipo `ft.Page`, que é usado para adicionar e gerenciar componentes na interface do usuário.\n\n3. **Adição de um `InteractiveViewer` ao `page`**:\n   ```python\n   page.add(\n       ft.InteractiveViewer(\n           ...\n       )\n   )\n   ```\n   O método `add` do objeto `page` é usado para adicionar componentes à página. Aqui, está sendo adicionado um `ft.InteractiveViewer`, que é um componente que permite interações como zoom e pan sobre o conteúdo que ele encapsula.\n\n4. **Configurações do `InteractiveViewer`**:\n   - `min_scale=0.1` e `max_scale=15`: Estes parâmetros definem os limites de zoom mínimo e máximo permitidos para o `InteractiveViewer`.\n   - `boundary_margin=ft.margin.all(20)`: Define a margem ao redor do conteúdo dentro do `InteractiveViewer`, em todos os lados, com um valor de 20 pixels.\n   - `on_interaction_start`, `on_interaction_end`, `on_interaction_update`: Estes são eventos que disparam funções lambda quando a interação começa, termina ou é atualizada, respectivamente. Cada função lambda recebe um evento `e` como parâmetro e imprime este evento.\n\n5. **Adição de conteúdo ao `InteractiveViewer`**:\n   ```python\n   content=ft.Image(\n       src=\"https://picsum.photos/500/500\",\n   )\n   ```\n   Dentro do `InteractiveViewer`, um componente `ft.Image` é adicionado. Este componente mostra uma imagem obtida da URL especificada (`https://picsum.photos/500/500`), que é um serviço que fornece imagens aleatórias para uso em testes e prototipagem.\n\n6. **Execução da aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação Flet, utilizando a função `main` como ponto de entrada. A função `main` será chamada automaticamente quando a aplicação iniciar.\n\nEm resumo, o código cria uma aplicação web que contém um visualizador interativo com uma imagem que pode ser ampliada ou reduzida, com margens definidas e com a capacidade de detectar e responder a interações do usuário.",
    "examples": "Claro! Vou criar alguns exemplos que demonstram diferentes formas de uso do `ft.InteractiveViewer` em Flet, explorando variações de conteúdo interno, configurações de escala e eventos de interação.\n\n### Exemplo 1: Uso de Texto no Conteúdo\nNeste exemplo, ao invés de uma imagem, vamos colocar um texto grande dentro do `InteractiveViewer` para permitir que o usuário faça zoom e desloque o texto na tela.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.InteractiveViewer(\n            min_scale=1,\n            max_scale=5,\n            boundary_margin=ft.margin.all(10),\n            content=ft.Text(\n                \"Aqui está um exemplo de texto muito longo que você pode zoom e mover. \" * 50,\n                text_wrap=ft.WRAP_WORD\n            ),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Uso de Container com Vários Elementos\nAqui, usamos um `Container` com múltiplos elementos dentro do `InteractiveViewer`, como imagens e textos, possibilitando interações mais complexas.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.InteractiveViewer(\n            min_scale=0.5,\n            max_scale=10,\n            boundary_margin=ft.margin.all(15),\n            content=ft.Container(\n                content=[\n                    ft.Image(src=\"https://picsum.photos/200/300\"),\n                    ft.Text(\"Descrição da imagem\")\n                ],\n                spacing=10,\n                alignment=ft.Alignment.TOP_CENTER\n            ),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Mudança de Escala e Feedback de Eventos\nNeste exemplo, vamos alterar as configurações de escala e adicionar feedback para os eventos de interação, mostrando no console detalhes da interação.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.InteractiveViewer(\n            min_scale=0.2,\n            max_scale=8,\n            boundary_margin=ft.margin.all(25),\n            on_interaction_start=lambda e: print(\"Interação começou:\", e),\n            on_interaction_end=lambda e: print(\"Interação terminou:\", e),\n            on_interaction_update=lambda e: print(\"Atualização de interação:\", e),\n            content=ft.Image(src=\"https://picsum.photos/600/400\"),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 4: Interação com Formulários Dentro do Viewer\nAdicionando um formulário dentro do `InteractiveViewer`, permitindo ao usuário interagir com os campos de entrada após fazer zoom ou mover o conteúdo.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    form = ft.Container(\n        content=[\n            ft.TextField(label=\"Nome\"),\n            ft.TextField(label=\"Email\"),\n            ft.Button(text=\"Submit\")\n        ],\n        width=300\n    )\n    page.add(\n        ft.InteractiveViewer(\n            min_scale=1,\n            max_scale=5,\n            boundary_margin=ft.margin.all(20),\n            content=form\n        )\n    )\n\nft.app(main)\n```\n\nEsses exemplos mostram como você pode usar o `InteractiveViewer` de Flet para criar interfaces interativas e dinâmicas que se adaptam a diversos tipos de conteúdo e interações."
}