{
    "file": "docs_controls_floatingactionbutton.py",
    "description": "O código Python fornecido usa o framework Flet para criar uma interface gráfica de usuário (GUI) para um aplicativo web ou desktop. Aqui está uma descrição detalhada de cada parte do código e suas funcionalidades:\n\n### Importação do Módulo Flet\n```python\nimport flet as ft\n```\nEsta linha importa o módulo `flet`, que é usado para construir a interface do usuário.\n\n### Função Principal `main`\n```python\ndef main(page: ft.Page):\n```\nEsta função `main` é o ponto de entrada do aplicativo, onde a configuração da página é definida. O argumento `page` é uma instância de `ft.Page`, que representa a página principal do aplicativo.\n\n### Configurações da Página\n```python\n    page.title = \"Floating Action Button\"\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.auto_scroll = True\n    page.scroll = ft.ScrollMode.HIDDEN\n```\n- `page.title`: Define o título da janela do navegador ou aplicativo.\n- `page.horizontal_alignment`: Alinha o conteúdo da página ao centro horizontalmente.\n- `page.auto_scroll`: Habilita o scroll automático quando o conteúdo excede a altura da página.\n- `page.scroll`: Oculta as barras de scroll, mesmo quando o conteúdo excede o espaço disponível.\n\n### AppBar\n```python\n    page.appbar = ft.AppBar(\n        title=ft.Text(\"Floating Action Button\", weight=ft.FontWeight.BOLD, color=ft.Colors.BLACK87),\n        actions=[ft.IconButton(ft.Icons.MENU, tooltip=\"Menu\", icon_color=ft.Colors.BLACK87)],\n        bgcolor=ft.Colors.BLUE,\n        center_title=True,\n        color=ft.Colors.WHITE,\n    )\n```\n- `page.appbar`: Define a barra de aplicativos na parte superior da página.\n- `title`: Define o título da barra de aplicativos, com estilo bold e cor específica.\n- `actions`: Adiciona botões de ação à barra, neste caso, um ícone de menu.\n- `bgcolor`: Define a cor de fundo da barra de aplicativos.\n- `center_title`: Centraliza o título na barra de aplicativos.\n\n### Variável de Controle `count`\n```python\n    count = 0\n```\nEsta variável mantém o controle do número de `ListTiles` adicionados à página.\n\n### Função `fab_pressed`\n```python\n    def fab_pressed(e):\n        nonlocal count  # to modify the count variable found in the outer scope\n        ...\n```\nEssa função é chamada quando o botão de ação flutuante (FAB) é pressionado. Ela modifica a variável `count` que está no escopo externo.\n\n### Adicionando ListTile\n```python\n        page.add(\n            ft.ListTile(\n                title=ft.Text(f\"Tile {count}\"),\n                on_click=lambda x: print(x.control.title.value + \" was clicked!\"),\n            )\n        )\n```\nAdiciona um item à lista na página com um título que incrementa com cada novo item. Configura um evento de clique que imprime qual tile foi clicado.\n\n### SnackBar\n```python\n        page.open(ft.SnackBar(ft.Text(\"Tile was added successfully!\")))\n```\nExibe uma mensagem temporária (SnackBar) informando que o tile foi adicionado com sucesso.\n\n### Floating Action Button (FAB)\n```python\n    page.floating_action_button = ft.FloatingActionButton(icon=ft.Icons.ADD, on_click=fab_pressed, bgcolor=ft.Colors.LIME_300)\n```\nAdiciona um botão de ação flutuante (FAB) com ícone de adição, que chama `fab_pressed` ao ser clicado.\n\n### Adicionando Texto Informativo\n```python\n    page.add(ft.Text(\"Press the FAB to add a tile!\"))\n```\nAdiciona um texto na página que instrui o usuário a pressionar o FAB para adicionar um tile.\n\n### Execução do App\n```python\nft.app(main)\n```\nEsta linha inicia a aplicação, utilizando a função `main` como a função de entrada.\n\nO código acima cria uma interface de usuário interativa com um botão flutuante que permite ao usuário adicionar itens dinamicamente à página e receber feedback através de uma SnackBar.",
    "examples": "Claro! Abaixo estão alguns exemplos adicionais que modificam e expandem o código original para demonstrar diferentes usos e funcionalidades do Flet.\n\n### Exemplo 1: Adicionando um Tema e Modificando Cores do FAB\nEste exemplo adiciona suporte a temas e muda a cor do botão de ação flutuante (FAB) com base no estado.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Themed Floating Action Button\"\n    page.theme = ft.ThemeData(\n        primary_color=ft.Colors.INDIGO,\n        secondary_color=ft.Colors.PINK\n    )\n    page.appbar = ft.AppBar(\n        title=ft.Text(\"Themed FAB\", weight=ft.FontWeight.BOLD),\n        bgcolor=page.theme.primary_color\n    )\n    \n    count = 0\n    \n    def fab_pressed(e):\n        nonlocal count\n        page.add(ft.ListTile(title=ft.Text(f\"Tile {count}\")))\n        count += 1\n        # Change FAB color after each press\n        page.floating_action_button.bgcolor = page.theme.secondary_color if count % 2 == 0 else page.theme.primary_color\n    \n    page.floating_action_button = ft.FloatingActionButton(\n        icon=ft.Icons.ADD,\n        on_click=fab_pressed,\n        bgcolor=page.theme.primary_color\n    )\n    \nft.app(main)\n```\n\n### Exemplo 2: FAB com Diferentes Ícones\nEste exemplo altera o ícone do FAB cada vez que é pressionado, alternando entre dois ícones.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Dynamic Icon FAB\"\n    page.appbar = ft.AppBar(title=ft.Text(\"Dynamic Icon FAB\"))\n    \n    count = 0\n    icons = [ft.Icons.ADD, ft.Icons.REMOVE]\n    \n    def fab_pressed(e):\n        nonlocal count\n        page.add(ft.ListTile(title=ft.Text(f\"Tile {count}\")))\n        count += 1\n        # Change icon dynamically\n        page.floating_action_button.icon = icons[count % 2]\n    \n    page.floating_action_button = ft.FloatingActionButton(\n        icon=icons[0],\n        on_click=fab_pressed\n    )\n    \nft.app(main)\n```\n\n### Exemplo 3: FAB com Feedback Visual\nEste exemplo utiliza um `SnackBar` para fornecer feedback visual cada vez que um item é adicionado.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"FAB with Visual Feedback\"\n    page.appbar = ft.AppBar(title=ft.Text(\"FAB with Snackbar\"))\n    \n    count = 0\n    \n    def fab_pressed(e):\n        nonlocal count\n        new_tile = ft.ListTile(title=ft.Text(f\"Tile {count}\"))\n        page.add(new_tile)\n        page.open(ft.SnackBar(content=ft.Text(f\"Tile {count} added!\"), action=ft.TextButton(\"UNDO\", on_click=lambda x: page.remove(new_tile))))\n        count += 1\n    \n    page.floating_action_button = ft.FloatingActionButton(\n        icon=ft.Icons.ADD,\n        on_click=fab_pressed\n    )\n    \nft.app(main)\n```\n\nEstes exemplos mostram como você pode alterar a aparência e comportamento do FAB, bem como interagir de maneira mais rica com o usuário através do uso de temas, ícones dinâmicos e feedback visual."
}