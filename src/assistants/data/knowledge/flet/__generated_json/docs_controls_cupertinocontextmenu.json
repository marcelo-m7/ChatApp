{
    "file": "docs_controls_cupertinocontextmenu.py",
    "description": "O código Python apresentado utiliza a biblioteca Flet para criar uma interface gráfica simples em um aplicativo web ou desktop. Flet é uma biblioteca que permite a criação de interfaces de usuário com uma abordagem similar ao Flutter, mas destinada a aplicações Python. O código implementa um menu de contexto do tipo Cupertino, que é um estilo visual comum em aplicações iOS.\n\nAqui está o que cada parte do código faz:\n\n1. **Importação da biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Esta linha importa a biblioteca Flet e a renomeia como `ft` para facilitar o acesso aos seus módulos e funções.\n\n2. **Definição da função `main`**:\n   ```python\n   def main(page):\n   ```\n   Esta função é chamada quando a aplicação é iniciada. Ela recebe um objeto `page`, que representa a página da aplicação onde os widgets (componentes da interface) serão adicionados.\n\n3. **Configuração do alinhamento da página**:\n   ```python\n   page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n   page.vertical_alignment = ft.MainAxisAlignment.CENTER\n   ```\n   Estas linhas configuram o alinhamento dos elementos na página. `horizontal_alignment` é definido para centralizar os elementos horizontalmente, e `vertical_alignment` para centralizá-los verticalmente.\n\n4. **Adição de um menu de contexto Cupertino**:\n   ```python\n   page.add(\n       ft.CupertinoContextMenu(\n           enable_haptic_feedback=True,\n           content=ft.Image(\"https://picsum.photos/200/200\"),\n           actions=[\n               ...\n           ],\n       )\n   )\n   ```\n   Esta parte do código adiciona um `CupertinoContextMenu` à página. O menu tem as seguintes propriedades:\n   - `enable_haptic_feedback=True`: Ativa o feedback háptico (vibração) quando o menu é utilizado, tipicamente em dispositivos que suportam essa funcionalidade.\n   - `content=ft.Image(\"https://picsum.photos/200/200\")`: Define o conteúdo principal do menu, que neste caso é uma imagem obtida de uma URL.\n\n5. **Ações do menu de contexto**:\n   Dentro do `CupertinoContextMenu`, há uma lista de `actions` que define as ações disponíveis no menu. Cada ação é uma instância de `CupertinoContextMenuAction` e tem várias propriedades:\n   - `text`: O texto da ação exibido no menu.\n   - `is_default_action`, `is_destructive_action`: Booleanos que definem se a ação é a ação padrão ou uma ação destrutiva (estilizada para indicar que pode ter consequências sérias, como deletar algo).\n   - `trailing_icon`: Um ícone exibido ao lado do texto da ação.\n   - `on_click`: Uma função que é chamada quando a ação é clicada. Aqui, simplesmente imprime uma mensagem para o console.\n\n6. **Iniciar a aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação, chamando a função `main` e passando a ela o objeto `page` que será usado para construir a UI.\n\nEm resumo, o código cria uma aplicação com um menu de contexto estilo Cupertino que contém três ações. Cada ação tem um ícone e uma função associada que é chamada quando a ação é clicada. A imagem serve como o conteúdo sobre o qual o menu de contexto é ativado.",
    "examples": "Para explorar diferentes formas de uso da `CupertinoContextMenu` no Flet, podemos criar exemplos variados que mostrem como ajustar o menu de contexto para diferentes cenários de interface. Abaixo, fornecerei três exemplos adicionais, cada um com um propósito diferente.\n\n### Exemplo 1: Menu de Contexto com Texto e Imagens\nEste exemplo mostra como usar texto combinado com imagens dentro das ações para fornecer mais informações visuais ao usuário.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.add(\n        ft.CupertinoContextMenu(\n            enable_haptic_feedback=True,\n            content=ft.Image(\"https://picsum.photos/200/200\"),\n            actions=[\n                ft.CupertinoContextMenuAction(\n                    text=\"Salvar\",\n                    is_default_action=True,\n                    icon=ft.Image(\"https://example.com/save_icon.png\"),\n                    on_click=lambda e: print(\"Salvar\"),\n                ),\n                ft.CupertinoContextMenuAction(\n                    text=\"Compartilhar\",\n                    icon=ft.Image(\"https://example.com/share_icon.png\"),\n                    on_click=lambda e: print(\"Compartilhar\"),\n                ),\n                ft.CupertinoContextMenuAction(\n                    text=\"Excluir\",\n                    is_destructive_action=True,\n                    icon=ft.Image(\"https://example.com/delete_icon.png\"),\n                    on_click=lambda e: print(\"Excluir\"),\n                ),\n            ],\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Menu de Contexto com Submenus\nEste exemplo ilustra como criar ações que abrem submenus, permitindo uma navegação mais complexa.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.add(\n        ft.CupertinoContextMenu(\n            enable_haptic_feedback=True,\n            content=ft.Image(\"https://picsum.photos/200/200\"),\n            actions=[\n                ft.CupertinoContextMenuAction(\n                    text=\"Opções\",\n                    on_click=lambda e: print(\"Opções\"),\n                    sub_menu=ft.CupertinoContextMenu(\n                        actions=[\n                            ft.CupertinoContextMenuAction(\n                                text=\"Sub-opção 1\", \n                                on_click=lambda e: print(\"Sub-opção 1\")\n                            ),\n                            ft.CupertinoContextMenuAction(\n                                text=\"Sub-opção 2\", \n                                on_click=lambda e: print(\"Sub-opção 2\")\n                            ),\n                        ]\n                    )\n                ),\n                ft.CupertinoContextMenuAction(\n                    text=\"Fechar\",\n                    is_destructive_action=True,\n                    on_click=lambda e: print(\"Fechar\"),\n                ),\n            ],\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Menu de Contexto com Diferentes Alinhamentos\nEste exemplo mostra como alterar o alinhamento do menu de contexto em relação ao conteúdo.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.END\n    page.vertical_alignment = ft.MainAxisAlignment.SPACE_BETWEEN\n    page.add(\n        ft.CupertinoContextMenu(\n            enable_haptic_feedback=False,\n            content=ft.Text(\"Clique com o botão direito aqui!\"),\n            actions=[\n                ft.CupertinoContextMenuAction(\n                    text=\"Notificação\",\n                    on_click=lambda e: print(\"Notificação ativada\"),\n                ),\n                ft.CupertinoContextMenuAction(\n                    text=\"Configurações\",\n                    on_click=lambda e: print(\"Abrindo configurações\"),\n                ),\n            ],\n        )\n    )\n\nft.app(main)\n```\n\nCada um destes exemplos mostra diferentes maneiras de configurar e utilizar o `CupertinoContextMenu` para atender a diferentes necessidades de UI, desde a apresentação de informações visuais até a organização de opções complexas em submenus."
}