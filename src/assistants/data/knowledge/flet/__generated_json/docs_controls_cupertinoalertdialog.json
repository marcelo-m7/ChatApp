{
    "file": "docs_controls_cupertinoalertdialog.py",
    "description": "O código fornecido usa a biblioteca Flet para criar uma interface de usuário simples em Python, que pode funcionar tanto em ambientes de desktop quanto na web. O exemplo mostra a criação de uma página que inclui diálogos interativos no estilo Material Design e Cupertino, além de um diálogo adaptativo que muda de estilo dependendo da plataforma onde está sendo executado. Vamos analisar cada parte do código:\n\n### Importação e Função Principal\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n```\n- Importa a biblioteca Flet como `ft`.\n- Define a função `main`, que é o ponto de entrada do programa, recebendo um objeto `page` do tipo `ft.Page`, que representa a página da interface de usuário.\n\n### Configurações da Página\n```python\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.scroll = True\n```\n- `page.horizontal_alignment` é configurado para `ft.CrossAxisAlignment.CENTER`, o que centraliza os elementos horizontalmente na página.\n- `page.scroll` é definido como `True`, permitindo que a página seja rolável se o conteúdo exceder o tamanho da tela.\n\n### Função de Manipulação de Cliques\n```python\n    def handle_action_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.text}\"))\n        page.close(e.control.parent)\n```\n- Define uma função `handle_action_click` para tratar cliques nos botões dos diálogos. \n- `e.control.text` obtém o texto do botão clicado.\n- `page.add(...)` adiciona um texto na página informando qual ação foi clicada.\n- `page.close(e.control.parent)` fecha o diálogo que contém o botão clicado.\n\n### Ações dos Diálogos\n```python\n    cupertino_actions = [...]\n    material_actions = [...]\n```\n- `cupertino_actions` e `material_actions` são listas que contêm botões estilizados para diálogos Cupertino e Material, respectivamente. Cada botão tem um texto e um evento de clique vinculado à função `handle_action_click`.\n\n### Adição de Botões e Diálogos na Página\n```python\n    page.add(...)\n```\n- Adiciona botões à página para abrir diálogos Material, Cupertino e um diálogo adaptativo.\n- Cada botão tem um evento de clique que chama `page.open(...)` para abrir um diálogo correspondente.\n\n### Diálogos\n- `ft.AlertDialog` e `ft.CupertinoAlertDialog` são usados para criar diálogos no estilo Material e Cupertino.\n- Cada diálogo inclui um título, um conteúdo e ações (botões).\n- O diálogo adaptativo muda entre estilos Cupertino e Material, dependendo da plataforma.\n\n### Execução da Aplicação\n```python\nft.app(main)\n```\n- Inicia a aplicação com a função `main` como o ponto de entrada.\n\nEste script é um exemplo de como criar uma interface de usuário interativa com diálogos em diferentes estilos, utilizando a biblioteca Flet em Python. Ele demonstra a manipulação de eventos, a adição dinâmica de conteúdo e o uso de componentes condicionais baseados na plataforma.",
    "examples": "### Explicação do Código\n\nO código Python fornecido utiliza a biblioteca Flet para criar uma interface de usuário simples com três botões que abrem diferentes tipos de diálogos: Material, Cupertino e um diálogo adaptativo que muda de aparência com base na plataforma em uso (Material para Android e Windows, Cupertino para iOS e macOS).\n\n### Exemplos Adicionais\n\nAgora, vamos criar mais exemplos para demonstrar diferentes usos e comportamentos usando diálogos e botões em Flet.\n\n#### Exemplo 1: Diálogo com Entrada de Texto\n\nAdicionaremos um diálogo que permite ao usuário inserir texto e exibir uma resposta na página principal.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.scroll = True\n\n    def handle_text_submit(e):\n        user_input = e.control.parent.controls[1].value\n        page.add(ft.Text(f\"Você digitou: {user_input}\"))\n        page.close(e.control.parent)\n\n    def open_text_input_dialog(e):\n        dialog = ft.AlertDialog(\n            title=ft.Text(\"Entrada de Texto\"),\n            content=ft.TextField(label=\"Digite algo:\"),\n            actions=[\n                ft.TextButton(text=\"Enviar\", on_click=handle_text_submit)\n            ],\n        )\n        page.open(dialog)\n\n    page.add(\n        ft.FilledButton(\n            text=\"Abrir Diálogo de Texto\",\n            on_click=open_text_input_dialog\n        ),\n    )\n\nft.app(main)\n```\n\n#### Exemplo 2: Diálogo de Confirmação com Estilos Personalizados\n\nVamos criar um diálogo com estilos personalizados para os botões, melhorando a aparência visual.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.scroll = True\n\n    def handle_action_click(e):\n        page.add(ft.Text(f\"Ação selecionada: {e.control.text}\"))\n        page.close(e.control.parent)\n\n    actions = [\n        ft.TextButton(text=\"Confirmar\", on_click=handle_action_click, bgcolor=ft.colors.GREEN, color=ft.colors.WHITE),\n        ft.TextButton(text=\"Cancelar\", on_click=handle_action_click, bgcolor=ft.colors.RED, color=ft.colors.WHITE),\n    ]\n\n    def open_custom_style_dialog(e):\n        dialog = ft.AlertDialog(\n            title=ft.Text(\"Confirmação\"),\n            content=ft.Text(\"Você deseja confirmar esta ação?\"),\n            actions=actions,\n        )\n        page.open(dialog)\n\n    page.add(\n        ft.FilledButton(\n            text=\"Abrir Diálogo Estilizado\",\n            on_click=open_custom_style_dialog\n        ),\n    )\n\nft.app(main)\n```\n\n#### Exemplo 3: Diálogo Com Lista de Opções\n\nEste exemplo apresenta um diálogo com uma lista de opções para escolha.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.scroll = True\n\n    def handle_option_click(e):\n        page.add(ft.Text(f\"Opção escolhida: {e.control.text}\"))\n        page.close(e.control.parent)\n\n    options = [ft.TextButton(text=f\"Opção {i}\", on_click=handle_option_click) for i in range(1, 6)]\n\n    def open_options_dialog(e):\n        dialog = ft.AlertDialog(\n            title=ft.Text(\"Escolha uma Opção\"),\n            content=ft.Column(children=options),\n            actions=[ft.TextButton(text=\"Fechar\", on_click=lambda e: page.close(e.control.parent))]\n        )\n        page.open(dialog)\n\n    page.add(\n        ft.FilledButton(\n            text=\"Abrir Diálogo de Opções\",\n            on_click=open_options_dialog\n        ),\n    )\n\nft.app(main)\n```\n\nEsses exemplos adicionais mostram como utilizar diálogos em diferentes contextos, aproveitando as funcionalidades do Flet para criar interfaces interativas."
}