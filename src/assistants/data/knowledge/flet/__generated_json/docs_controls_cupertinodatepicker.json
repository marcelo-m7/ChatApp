{
    "file": "docs_controls_cupertinodatepicker.py",
    "description": "O código em questão é um exemplo de aplicação utilizando a biblioteca Flet em Python, que é projetada para criar aplicações de interface de usuário (UI) multiplataforma. O código cria uma página que permite ao usuário selecionar uma data e hora usando um componente visual no estilo do iOS chamado `CupertinoDatePicker`. Vamos analisar o código parte por parte:\n\n### Importação da Biblioteca\n```python\nimport flet as ft\n```\nEsta linha importa a biblioteca Flet, que é usada para construir a interface do usuário.\n\n### Definição da Função Principal\n```python\ndef main(page):\n```\nEsta é a definição da função principal chamada `main`, que recebe um parâmetro `page`. Este `page` é um objeto que representa a página da aplicação onde os elementos da UI serão adicionados.\n\n### Configuração do Alinhamento\n```python\npage.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n```\nEsta linha configura o alinhamento horizontal dos elementos na página para o centro.\n\n### Manipulador de Mudança de Data\n```python\ndef handle_date_change(e: ft.ControlEvent):\n    page.add(ft.Text(f\"Date changed: {e.control.value.strftime('%Y-%m-%d %H:%M %p')}\"))\n```\nEsta é uma função interna que é chamada quando a data no `CupertinoDatePicker` é alterada. Ela recebe um evento `e`, que contém informações sobre o evento, incluindo o controle que disparou o evento. A função adiciona um texto à página que mostra a nova data e hora selecionadas, formatadas de uma maneira legível.\n\n### Criação do CupertinoDatePicker\n```python\ncupertino_date_picker = ft.CupertinoDatePicker(\n    date_picker_mode=ft.CupertinoDatePickerMode.DATE_AND_TIME,\n    on_change=handle_date_change,\n)\n```\nEsta seção cria um novo `CupertinoDatePicker`, um componente que permite aos usuários selecionar datas e horários. O modo `DATE_AND_TIME` permite a seleção de tanto data quanto hora. O parâmetro `on_change` é configurado para chamar a função `handle_date_change` quando a data é alterada.\n\n### Adicionando um Botão e Configurando sua Ação\n```python\npage.add(\n    ft.CupertinoFilledButton(\n        \"Open CupertinoDatePicker\",\n        on_click=lambda e: page.open(\n            ft.CupertinoBottomSheet(\n                cupertino_date_picker,\n                height=216,\n                padding=ft.padding.only(top=6),\n            )\n        ),\n    )\n)\n```\nEsta seção adiciona um botão à página que, quando clicado, abre um `CupertinoBottomSheet` contendo o `CupertinoDatePicker`. O `CupertinoBottomSheet` é um componente que desliza da parte inferior da tela, e é usado aqui para apresentar o seletor de data e hora. O botão é estilizado como um botão preenchido (`CupertinoFilledButton`) e o texto do botão é \"Open CupertinoDatePicker\".\n\n### Executando a Aplicação\n```python\nft.app(main)\n```\nEsta linha inicia a aplicação chamando a função `main`.\n\n### Conclusão\nO código cria uma interface de usuário simples com um botão que, ao ser clicado, apresenta um seletor de data e hora ao usuário. A seleção de data dispara um evento que adiciona a data selecionada à página. Este exemplo é útil para entender como trabalhar com eventos e UI em aplicações Flet.",
    "examples": "Neste exemplo, o código em Python utiliza a biblioteca Flet para criar uma interface gráfica que permite ao usuário selecionar uma data e hora usando um `CupertinoDatePicker`, um estilo de seletor de data e hora inspirado pelo iOS. Quando o usuário altera a data, a nova data é exibida na tela. Vou fornecer alguns exemplos adicionais modificando este código para destacar diferentes formas de uso do `CupertinoDatePicker` e outros componentes do Flet.\n\n### Exemplo 1: Alterando o Modo do Seletor\nAlterar o modo do `CupertinoDatePicker` para exibir apenas a data, sem a hora.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_date_change(e: ft.ControlEvent):\n        page.add(ft.Text(f\"Date changed: {e.control.value.strftime('%Y-%m-%d')}\"))\n\n    cupertino_date_picker = ft.CupertinoDatePicker(\n        date_picker_mode=ft.CupertinoDatePickerMode.DATE,\n        on_change=handle_date_change,\n    )\n\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open CupertinoDatePicker\",\n            on_click=lambda e: page.open(\n                ft.CupertinoBottomSheet(\n                    cupertino_date_picker,\n                    height=216,\n                    padding=ft.padding.only(top=6),\n                )\n            ),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Adicionando um Campo de Texto para Exibir a Data Selecionada\nEm vez de adicionar um novo texto na página a cada mudança, vamos atualizar um campo de texto existente.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    date_text = ft.TextField(value=\"Select a date\", read_only=True)\n\n    def handle_date_change(e: ft.ControlEvent):\n        date_text.value = f\"Date selected: {e.control.value.strftime('%Y-%m-%d %H:%M %p')}\"\n        page.update()\n\n    cupertino_date_picker = ft.CupertinoDatePicker(\n        date_picker_mode=ft.CupertinoDatePickerMode.DATE_AND_TIME,\n        on_change=handle_date_change,\n    )\n\n    page.add(date_text)\n\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open CupertinoDatePicker\",\n            on_click=lambda e: page.open(\n                ft.CupertinoBottomSheet(\n                    cupertino_date_picker,\n                    height=216,\n                    padding=ft.padding.only(top=6),\n                )\n            ),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Uso do DatePicker com diferentes estilos de botão\nUsando um `CupertinoButton` simples em vez de um `CupertinoFilledButton`.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_date_change(e: ft.ControlEvent):\n        page.add(ft.Text(f\"Date changed: {e.control.value.strftime('%Y-%m-%d %H:%M %p')}\"))\n\n    cupertino_date_picker = ft.CupertinoDatePicker(\n        date_picker_mode=ft.CupertinoDatePickerMode.DATE_AND_TIME,\n        on_change=handle_date_change,\n    )\n\n    open_button = ft.CupertinoButton(\n        text=\"Open Simple CupertinoDatePicker\",\n        on_click=lambda e: page.open(\n            ft.CupertinoBottomSheet(\n                cupertino_date_picker,\n                height=216,\n                padding=ft.padding.only(top=6),\n            )\n        ),\n    )\n    \n    page.add(open_button)\n\nft.app(main)\n```\n\nCada um desses exemplos mostra como você pode modificar o código original para ajustar diferentes necessidades e preferências de design de interface, utilizando os componentes e layout managers da biblioteca Flet."
}