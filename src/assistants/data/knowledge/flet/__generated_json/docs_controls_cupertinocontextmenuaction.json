{
    "file": "docs_controls_cupertinocontextmenuaction.py",
    "description": "O código que você forneceu é um script Python que utiliza a biblioteca Flet para criar uma interface de usuário simples com um menu de contexto estilo Cupertino, comum em aplicações iOS. A biblioteca Flet permite desenvolver aplicações web ou desktop com uma interface de usuário declarativa em Python. Vou descrever o código parte por parte:\n\n1. **Importação da biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Esta linha importa a biblioteca Flet e dá a ela o apelido de `ft` para facilitar seu uso no restante do código.\n\n2. **Definição da função main**:\n   ```python\n   def main(page):\n   ```\n   Esta função é definida como ponto de entrada da aplicação. A função recebe um parâmetro `page`, que representa a página ou janela da aplicação onde os componentes UI serão adicionados.\n\n3. **Configurações de alinhamento da página**:\n   ```python\n   page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n   page.vertical_alignment = ft.MainAxisAlignment.CENTER\n   ```\n   Estas linhas definem o alinhamento dos elementos na página. `horizontal_alignment` é configurado para centrar os elementos horizontalmente, e `vertical_alignment` para centrar verticalmente, usando as propriedades de alinhamento disponíveis em Flet.\n\n4. **Adicionando um CupertinoContextMenu à página**:\n   ```python\n   page.add(\n       ft.CupertinoContextMenu(\n           enable_haptic_feedback=True,\n           content=ft.Image(\"https://picsum.photos/200/200\"),\n           actions=[\n               ft.CupertinoContextMenuAction(...),\n               ft.CupertinoContextMenuAction(...),\n               ft.CupertinoContextMenuAction(...)\n           ],\n       )\n   )\n   ```\n   - `ft.CupertinoContextMenu`: Cria um menu de contexto ao estilo Cupertino. Este componente aceita várias propriedades:\n     - `enable_haptic_feedback`: Ativa o feedback tátil quando o menu é aberto (se suportado pelo dispositivo).\n     - `content`: Define o conteúdo sobre o qual o menu de contexto é exibido, neste caso uma imagem carregada de \"https://picsum.photos/200/200\".\n     - `actions`: Uma lista de ações que serão mostradas no menu de contexto. Cada ação é representada por um objeto `CupertinoContextMenuAction`.\n\n5. **Ações do CupertinoContextMenu**:\n   Cada `CupertinoContextMenuAction` representa uma opção no menu de contexto. Você pode definir o texto da ação, se a ação é a padrão ou destrutiva, um ícone para acompanhar o texto, e uma função callback para lidar com cliques:\n   - `text`: O texto mostrado na opção do menu.\n   - `is_default_action`: Se verdadeiro, indica que esta é a ação padrão.\n   - `is_destructive_action`: Se verdadeiro, indica que a ação tem consequências potencialmente destrutivas (geralmente indicado com uma cor diferente como vermelho).\n   - `trailing_icon`: Um ícone mostrado ao lado do texto da ação.\n   - `on_click`: Uma função lambda que é chamada quando a ação é clicada. Aqui, simplesmente imprime uma mensagem no console.\n\n6. **Execução da aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação chamando a função `main`.\n\nO resultado será uma aplicação com uma imagem centralizada que, ao ser clicada, exibirá um menu de contexto com três opções, cada uma com diferentes configurações e comportamentos.",
    "examples": "Para criar exemplos adicionais do código Flet fornecido, podemos variar o conteúdo principal, as ações do menu e suas funcionalidades. Vamos explorar diferentes cenários para ilustrar o uso do `CupertinoContextMenu` com outros widgets e funcionalidades.\n\n### Exemplo 1: Usando um Texto como Conteúdo\nNeste exemplo, substituímos a imagem por um texto. Isso é útil se você deseja que o contexto do menu seja aplicado a elementos de texto.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.add(\n        ft.CupertinoContextMenu(\n            enable_haptic_feedback=True,\n            content=ft.Text(\"Clique com o botão direito aqui!\", style=ft.TextStyle(font_size=20)),\n            actions=[\n                ft.CupertinoContextMenuAction(\n                    text=\"Copiar\", \n                    on_click=lambda e: print(\"Copiado!\"),\n                ),\n                ft.CupertinoContextMenuAction(\n                    text=\"Colar\", \n                    on_click=lambda e: print(\"Colado!\"),\n                ),\n            ],\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Alterando a Aparência e Funcionalidades das Ações\nAqui, adicionamos mais funcionalidades às ações, como abrir uma nova janela ou uma funcionalidade de saída.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.add(\n        ft.CupertinoContextMenu(\n            enable_haptic_feedback=True,\n            content=ft.Image(\"https://picsum.photos/200/200\"),\n            actions=[\n                ft.CupertinoContextMenuAction(\n                    text=\"Abrir em nova aba\",\n                    on_click=lambda e: print(\"Abrindo nova aba...\"),\n                ),\n                ft.CupertinoContextMenuAction(\n                    text=\"Salvar imagem\",\n                    on_click=lambda e: print(\"Imagem salva!\"),\n                ),\n                ft.CupertinoContextMenuAction(\n                    text=\"Sair\",\n                    is_destructive_action=True,\n                    on_click=lambda e: print(\"Saindo...\"),\n                ),\n            ],\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Usando Outros Widgets como Conteúdo\nPodemos utilizar qualquer widget como conteúdo do `CupertinoContextMenu`. Aqui, usamos um `TextField` como exemplo.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.add(\n        ft.CupertinoContextMenu(\n            enable_haptic_feedback=True,\n            content=ft.TextField(hint_text=\"Digite algo aqui\"),\n            actions=[\n                ft.CupertinoContextMenuAction(\n                    text=\"Limpar\",\n                    on_click=lambda e: print(\"Campo limpo!\"),\n                ),\n                ft.CupertinoContextMenuAction(\n                    text=\"Submeter\",\n                    on_click=lambda e: print(\"Dados submetidos!\"),\n                ),\n            ],\n        )\n    )\n\nft.app(main)\n```\n\nEstes exemplos mostram como você pode personalizar o `CupertinoContextMenu` em aplicativos Flet para diferentes tipos de conteúdo e ações, adaptando-se a várias necessidades de design de interface."
}