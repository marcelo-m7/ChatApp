{
    "file": "docs_controls_expansionpanel.py",
    "description": "O código Python fornecido usa a biblioteca Flet, que é destinada para a criação de interfaces de usuário cross-platform usando Python. O script cria uma interface com uma lista expansível de painéis (conhecida como ExpansionPanelList) com vários painéis expansíveis (ExpansionPanels) dentro dela. Cada painel pode ser expandido ou contraído e possui a capacidade de ser deletado.\n\nAqui está um detalhamento de cada parte do código:\n\n1. **Importação da biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Importa a biblioteca Flet, que é usada para criar a interface de usuário.\n\n2. **Definição da função main**:\n   ```python\n   def main(page: ft.Page):\n   ```\n   Define a função principal `main`, que aceita um parâmetro `page`. Este é um objeto `Page` que representa a página da aplicação onde os componentes da UI serão adicionados.\n\n3. **Funções de manipulação de eventos**:\n   ```python\n   def handle_change(e: ft.ControlEvent):\n       print(f\"change on panel with index {e.data}\")\n\n   def handle_delete(e: ft.ControlEvent):\n       panel.controls.remove(e.control.data)\n       page.update()\n   ```\n   - `handle_change`: Função chamada quando há uma mudança no estado de expansão dos painéis. Ela imprime no console qual painel teve seu estado alterado.\n   - `handle_delete`: Função que permite deletar um painel. Ela remove o painel da lista de controles do `panel` e atualiza a página para refletir essa mudança.\n\n4. **Criação do ExpansionPanelList**:\n   ```python\n   panel = ft.ExpansionPanelList(\n       expand_icon_color=ft.Colors.AMBER,\n       elevation=8,\n       divider_color=ft.Colors.AMBER,\n       on_change=handle_change,\n       controls=[\n           ft.ExpansionPanel(\n               bgcolor=ft.Colors.BLUE_400,\n               expanded=True,\n           )\n       ]\n   )\n   ```\n   Cria um objeto `ExpansionPanelList`, que é um container para múltiplos `ExpansionPanel`. Há configurações para cor do ícone de expansão, elevação, cor do divisor e um evento que é chamado quando há mudança de expansão. Inicialmente, adiciona-se um `ExpansionPanel` sem conteúdo especificado, apenas com cor de fundo e estado expandido.\n\n5. **Adição de ExpansionPanels dinamicamente**:\n   ```python\n   colors = [ft.Colors.GREEN_500, ft.Colors.BLUE_800, ft.Colors.RED_800]\n   for i in range(3):\n       exp = ft.ExpansionPanel(\n           bgcolor=colors[i % len(colors)],\n           header=ft.ListTile(title=ft.Text(f\"Panel {i}\")),\n       )\n       exp.content = ft.ListTile(\n           title=ft.Text(f\"This is in Panel {i}\"),\n           subtitle=ft.Text(f\"Press the icon to delete panel {i}\"),\n           trailing=ft.IconButton(ft.Icons.DELETE, on_click=handle_delete, data=exp),\n       )\n       panel.controls.append(exp)\n   ```\n   Este bloco adiciona três painéis (`ExpansionPanel`), cada um com uma cor de fundo específica, um cabeçalho e um conteúdo. O conteúdo de cada painel inclui um texto explicativo, um subtítulo e um ícone para deletar o painel. O método `on_click` do ícone está ligado à função `handle_delete`.\n\n6. **Adição do painel à página**:\n   ```python\n   page.add(panel)\n   ```\n   Adiciona o `panel` completo à página.\n\n7. **Execução da aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Inicia a aplicação chamando a função `main`, que configura e exibe a página.\n\nEste script é um exemplo de como criar interfaces dinâmicas e interativas usando a biblioteca Flet em Python, permitindo aos usuários interagir com painéis expansíveis e manipular componentes da UI em tempo real.",
    "examples": "O código fornecido em Python utiliza a biblioteca Flet para criar uma interface gráfica de usuário (GUI) que consiste em uma lista de painéis expansíveis (Expansion Panels). Abaixo, apresentarei diferentes exemplos modificando o código original para demonstrar diversas formas de uso dos Expansion Panels, incluindo alterações de estilo, interações e funcionalidades.\n\n### Exemplo 1: Alterando Cores e Ícones\nNeste exemplo, modificaremos as cores e ícones dos painéis para torná-los mais personalizados.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def handle_change(e: ft.ControlEvent):\n        print(f\"change on panel with index {e.data}\")\n\n    panel = ft.ExpansionPanelList(\n        expand_icon_color=ft.Colors.PURPLE,\n        elevation=8,\n        divider_color=ft.Colors.PURPLE,\n        on_change=handle_change,\n        controls=[]\n    )\n\n    colors = [ft.Colors.PINK_300, ft.Colors.LIME_600, ft.Colors.TEAL_800]\n    icons = [ft.Icons.HOME, ft.Icons.STAR, ft.Icons.SETTINGS]\n    \n    for i in range(3):\n        exp = ft.ExpansionPanel(\n            bgcolor=colors[i % len(colors)],\n            header=ft.ListTile(\n                title=ft.Text(f\"Custom Panel {i}\"),\n                leading=ft.IconButton(icon=icons[i % len(icons)])\n            )\n        )\n        exp.content = ft.ListTile(\n            title=ft.Text(f\"Content of Panel {i}\"),\n        )\n        panel.controls.append(exp)\n\n    page.add(panel)\n\nft.app(main)\n```\n\n### Exemplo 2: Adicionando Funcionalidade de Adicionar Novos Painéis\nEste exemplo adiciona um botão que permite ao usuário adicionar novos painéis dinamicamente.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    panel = ft.ExpansionPanelList(\n        expand_icon_color=ft.Colors.BLUE,\n        elevation=8,\n        divider_color=ft.Colors.BLUE,\n        controls=[]\n    )\n\n    def add_panel():\n        new_panel = ft.ExpansionPanel(\n            header=ft.ListTile(title=ft.Text(f\"New Dynamic Panel\")),\n            bgcolor=ft.Colors.ORANGE_300\n        )\n        new_panel.content = ft.ListTile(\n            title=ft.Text(\"New Panel Content\"),\n            subtitle=ft.Text(\"Added dynamically\")\n        )\n        panel.controls.append(new_panel)\n        page.update()\n\n    add_button = ft.FloatingActionButton(\n        content=ft.Icon(ft.Icons.ADD),\n        on_click=lambda e: add_panel(),\n        bgcolor=ft.Colors.GREEN\n    )\n\n    page.add(panel)\n    page.add(add_button)\n\nft.app(main)\n```\n\n### Exemplo 3: Painéis com Diferentes Tipos de Conteúdo\nEste exemplo mostra painéis com diferentes tipos de conteúdo, como imagens e formulários.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    panel = ft.ExpansionPanelList(\n        expand_icon_color=ft.Colors.RED,\n        elevation=8,\n        controls=[]\n    )\n\n    # Primeiro painel com imagem\n    panel1 = ft.ExpansionPanel(\n        header=ft.ListTile(title=ft.Text(\"Image Panel\")),\n        bgcolor=ft.Colors.BLUE_100\n    )\n    panel1.content = ft.Image(src=\"path/to/image.png\")\n    panel.controls.append(panel1)\n\n    # Segundo painel com formulário\n    panel2 = ft.ExpansionPanel(\n        header=ft.ListTile(title=ft.Text(\"Form Panel\")),\n        bgcolor=ft.Colors.GREEN_100\n    )\n    form_content = ft.Column(\n        controls=[\n            ft.TextField(label=\"Name\"),\n            ft.TextField(label=\"Email\"),\n            ft.ElevatedButton(text=\"Submit\")\n        ]\n    )\n    panel2.content = form_content\n    panel.controls.append(panel2)\n\n    page.add(panel)\n\nft.app(main)\n```\n\nCada um desses exemplos explora diferentes aspectos e funcionalidades da biblioteca Flet, mostrando como os painéis expansíveis podem ser personalizados e utilizados para diferentes propósitos em uma aplicação GUI."
}