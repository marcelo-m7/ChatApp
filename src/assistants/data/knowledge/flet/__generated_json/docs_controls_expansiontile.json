{
    "file": "docs_controls_expansiontile.py",
    "description": "O código apresentado é uma aplicação utilizando a biblioteca Flet em Python, que é usada para criar interfaces de usuário baseadas em web. O código define uma função `main` que configura uma página com três widgets `ExpansionTile`, cada um com características e comportamentos distintos. Aqui está uma descrição detalhada de cada parte do código:\n\n### Importação da biblioteca Flet\n```python\nimport flet as ft\n```\nEsta linha importa a biblioteca Flet com o alias `ft`, que é usado para acessar suas funcionalidades e componentes.\n\n### Função Principal `main`\n```python\ndef main(page: ft.Page):\n```\nDefine a função `main` que recebe um objeto `ft.Page` como argumento. Esta página é o container principal onde os widgets são adicionados.\n\n#### Configurações da Página\n```python\npage.spacing = 0\npage.padding = 0\n```\nEssas linhas removem o espaçamento e o preenchimento padrão da página, fazendo com que os widgets fiquem sem margens internas ou externas entre eles.\n\n### Função de Callback `handle_expansion_tile_change`\n```python\ndef handle_expansion_tile_change(e):\n```\nEsta função é chamada sempre que há uma mudança no estado de expansão do `ExpansionTile` que possui um `on_change` associado.\n\n#### Exibindo SnackBar\n```python\npage.open(\n    ft.SnackBar(\n        ft.Text(f\"ExpansionTile was {'expanded' if e.data=='true' else 'collapsed'}\"),\n        duration=1000,\n    )\n)\n```\nQuando o `ExpansionTile` é expandido ou colapsado, um `SnackBar` é exibido por 1000 milissegundos (1 segundo), informando o estado do `ExpansionTile`.\n\n#### Alterando o Ícone\n```python\nif e.control.trailing:\n    e.control.trailing.name = (\n        ft.Icons.ARROW_DROP_DOWN\n        if e.control.trailing.name == ft.Icons.ARROW_DROP_DOWN_CIRCLE\n        else ft.Icons.ARROW_DROP_DOWN_CIRCLE\n    )\n    page.update()\n```\nSe houver um ícone de seta no `ExpansionTile`, este bloco alterna entre dois ícones (`ARROW_DROP_DOWN` e `ARROW_DROP_DOWN_CIRCLE`) a cada mudança de estado.\n\n### Adicionando `ExpansionTiles` à página\n```python\npage.add(...)\n```\nTrês `ExpansionTile`s são adicionados à página, cada um com características específicas como título, subtítulo, cor do texto expandido e colapsado, e ícones. Eles podem conter outros widgets como `ListTile`s.\n\n#### Propriedades de `ExpansionTile`\n- `title` e `subtitle`: Título e subtítulo do tile.\n- `affinity`: Define a posição do ícone de expansão (à esquerda ou de acordo com a plataforma).\n- `maintain_state`: Mantém o estado interno quando colapsado.\n- `collapsed_text_color` e `text_color`: Cores do texto quando colapsado e expandido.\n- `controls`: Widgets internos que são mostrados quando o tile é expandido.\n- `trailing`: Ícone personalizado no tile.\n- `on_change`: Função de callback chamada na mudança de estado.\n- `initially_expanded`: Define se o tile começa expandido.\n\n### Inicialização da Aplicação Flet\n```python\nft.app(main)\n```\nEsta linha inicia a aplicação Flet, usando a função `main` como ponto de entrada.\n\nEste código é um exemplo de como criar uma interface de usuário interativa e responsiva usando Python e Flet, com feedback visual e interação dinâmica através dos `ExpansionTiles`.",
    "examples": "Aqui estão alguns exemplos adicionais para explorar diferentes funcionalidades do `ExpansionTile` no Flet, cada um destacando diferentes aspectos de personalização:\n\n### Exemplo 1: ExpansionTile com Checkbox\nEste exemplo adiciona uma caixa de seleção dentro do `ExpansionTile` para permitir seleções dentro do mesmo.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def handle_checkbox_change(e):\n        page.open(ft.SnackBar(ft.Text(f\"Checkbox is now {'checked' if e.control.value else 'unchecked'}\")))\n\n    checkbox = ft.Checkbox(value=False, on_change=handle_checkbox_change)\n\n    page.add(\n        ft.ExpansionTile(\n            title=ft.Text(\"ExpansionTile with Checkbox\"),\n            controls=[ft.ListTile(title=ft.Text(\"Check me!\"), leading=checkbox)]\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: ExpansionTile com Diferentes Cores e Estados\nEste exemplo mostra como configurar cores diferentes para o estado expandido e contraído do `ExpansionTile`.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.ExpansionTile(\n            title=ft.Text(\"Colorful ExpansionTile\"),\n            subtitle=ft.Text(\"Click to expand\"),\n            collapsed_text_color=ft.Colors.PURPLE,\n            text_color=ft.Colors.ORANGE,\n            expanded_text_color=ft.Colors.GREEN,\n            controls=[ft.ListTile(title=ft.Text(\"Content here\"))]\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: ExpansionTiles Agrupados\nEste exemplo cria um grupo de `ExpansionTiles` que permite apenas uma expansão por vez, simulando um comportamento de acordeão.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def handle_tile_change(tile, expanded):\n        if expanded:\n            for other_tile in [tile1, tile2, tile3]:\n                if other_tile != tile:\n                    other_tile.expanded = False\n            page.update()\n\n    tile1 = ft.ExpansionTile(title=ft.Text(\"Tile 1\"), on_change=lambda e: handle_tile_change(tile1, e.data == 'true'))\n    tile2 = ft.ExpansionTile(title=ft.Text(\"Tile 2\"), on_change=lambda e: handle_tile_change(tile2, e.data == 'true'))\n    tile3 = ft.ExpansionTile(title=ft.Text(\"Tile 3\"), on_change=lambda e: handle_tile_change(tile3, e.data == 'true'))\n\n    page.add(tile1, tile2, tile3)\n\nft.app(main)\n```\n\n### Exemplo 4: ExpansionTile com Ícones Personalizados\nEste exemplo altera os ícones de expansão e contração para ícones personalizados.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.ExpansionTile(\n            title=ft.Text(\"ExpansionTile with Custom Icons\"),\n            trailing=ft.Icon(ft.Icons.ADD),\n            collapsed_icon=ft.Icon(ft.Icons.REMOVE),\n            controls=[ft.ListTile(title=ft.Text(\"This is a sub-tile\"))]\n        )\n    )\n\nft.app(main)\n```\n\nCada um desses exemplos explora diferentes aspectos do widget `ExpansionTile` no Flet, demonstrando a flexibilidade e a capacidade de personalização que a biblioteca oferece."
}