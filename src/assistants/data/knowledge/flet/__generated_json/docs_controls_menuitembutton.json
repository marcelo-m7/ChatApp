{
    "file": "docs_controls_menuitembutton.py",
    "description": "O código em questão é um exemplo de aplicação usando a biblioteca Flet, que é voltada para a criação de interfaces de usuário (UI) em Python. O código define uma interface gráfica simples que permite ao usuário escolher uma cor de fundo a partir de um menu. Vamos analisar cada parte do código para entender melhor como ele funciona e quais são suas funcionalidades e propriedades:\n\n1. **Importação e Definição da Função `main`:**\n   ```python\n   import flet as ft\n\n   def main(page: ft.Page):\n   ```\n   Aqui, a biblioteca Flet é importada com o alias `ft` e a função `main` é definida, recebendo um objeto `Page` que será usado para configurar e exibir a interface do usuário.\n\n2. **Configuração Inicial da Página:**\n   ```python\n   page.padding = 0\n   page.spacing = 0\n   ```\n   Essas linhas configuram a página removendo qualquer preenchimento (`padding`) ou espaçamento (`spacing`) entre os elementos.\n\n3. **Referência de Container:**\n   ```python\n   bg_container = ft.Ref[ft.Container]()\n   ```\n   Cria uma referência `Ref` para um `Container` que será usado para atualizar o conteúdo e a cor de fundo dinamicamente com base na interação do usuário.\n\n4. **Funções de Evento:**\n   ```python\n   def handle_color_click(e):\n       ...\n   def handle_on_hover(e):\n       ...\n   ```\n   Duas funções são definidas para manipular eventos. `handle_color_click` é chamada quando um item de menu é clicado e altera a cor de fundo do `Container` referenciado. `handle_on_hover` é chamada quando o mouse passa sobre os itens do menu, imprimindo informações no console.\n\n5. **Barra de Menu e Itens:**\n   ```python\n   menubar = ft.MenuBar(\n       ...\n   )\n   ```\n   Um objeto `MenuBar` é criado com um submenu \"BgColors\" contendo três opções: \"Blue\", \"Green\", e \"Red\". Cada `MenuItemButton` tem eventos de clique e hover associados, que chamam as funções definidas anteriormente.\n\n6. **Adição dos Elementos à Página:**\n   ```python\n   page.add(\n       ft.Row([menubar]),\n       ft.Container(\n           ...\n       )\n   )\n   ```\n   A barra de menu e o container que mostrará a mensagem e a cor de fundo selecionada são adicionados à página. O `Container` é configurado para expandir (ocupar o espaço disponível), ter uma cor de fundo inicial (`Colors.SURFACE`), um texto explicativo e o texto é centralizado.\n\n7. **Execução da Aplicação:**\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação chamando a função `main` com a página configurada.\n\n**Resumo das Propriedades e Funcionalidades:**\n- **Interatividade:** Os usuários podem interagir com o menu para alterar a cor de fundo do `Container`.\n- **Eventos:** Responde a cliques e movimentos do mouse com funções específicas.\n- **Estilo Dinâmico:** Altera estilos dinamicamente baseado na interação do usuário.\n- **Layout Responsivo:** Uso de `MenuBar` e `Container` para um layout organizado e responsivo.\n\nEste código é um exemplo prático de como utilizar a biblioteca Flet para criar interfaces de usuário interativas e responsivas em Python.",
    "examples": "Neste exemplo, vamos criar variações adicionais usando o código base que você forneceu, explorando diferentes formas de interação e estilização dos elementos do menu e do container. O objetivo é mostrar como o código pode ser adaptado para diferentes necessidades de interface com o usuário.\n\n### Exemplo 1: Adicionando Mais Cores e Um Botão de Reset\n\nEste exemplo expande as opções de cores e adiciona um botão de reset para voltar à cor de fundo original.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.padding = 0\n    page.spacing = 0\n    bg_container = ft.Ref[ft.Container]()\n    \n    def handle_color_click(e):\n        color = e.control.content.value\n        print(f\"{color}.on_click\")\n        bg_container.current.content.value = f\"{color} background color\"\n        bg_container.current.bgcolor = color.lower()\n        page.update()\n\n    def handle_reset_click(e):\n        print(\"Reset.on_click\")\n        bg_container.current.content.value = \"Default background color\"\n        bg_container.current.bgcolor = ft.Colors.SURFACE\n        page.update()\n\n    def handle_on_hover(e):\n        print(f\"{e.control.content.value}.on_hover\")\n\n    menubar = ft.MenuBar(\n        expand=True,\n        controls=[\n            ft.SubmenuButton(\n                content=ft.Text(\"BgColors\"),\n                controls=[\n                    ft.MenuItemButton(\n                        content=ft.Text(\"Blue\"),\n                        leading=ft.Icon(ft.Icons.COLORIZE),\n                        style=ft.ButtonStyle(bgcolor={ft.ControlState.HOVERED: ft.Colors.BLUE}),\n                        on_click=handle_color_click,\n                        on_hover=handle_on_hover,\n                    ),\n                    ft.MenuItemButton(\n                        content=ft.Text(\"Green\"),\n                        leading=ft.Icon(ft.Icons.COLORIZE),\n                        style=ft.ButtonStyle(bgcolor={ft.ControlState.HOVERED: ft.Colors.GREEN}),\n                        on_click=handle_color_click,\n                        on_hover=handle_on_hover,\n                    ),\n                    ft.MenuItemButton(\n                        content=ft.Text(\"Red\"),\n                        leading=ft.Icon(ft.Icons.COLORIZE),\n                        style=ft.ButtonStyle(bgcolor={ft.ControlState.HOVERED: ft.Colors.RED}),\n                        on_click=handle_color_click,\n                        on_hover=handle_on_hover,\n                    ),\n                    ft.MenuItemButton(\n                        content=ft.Text(\"Reset\"),\n                        leading=ft.Icon(ft.Icons.RESTORE),\n                        on_click=handle_reset_click,\n                        on_hover=handle_on_hover,\n                    )\n                ]\n            ),\n        ]\n    )\n    \n    page.add(\n        ft.Row([menubar]),\n        ft.Container(\n            ref=bg_container,\n            expand=True,\n            bgcolor=ft.Colors.SURFACE,\n            content=ft.Text(\"Choose a bgcolor from the menu\", style=ft.TextThemeStyle.HEADLINE_LARGE),\n            alignment=ft.alignment.center,\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Alterando o Layout e Estilo do Container Principal\n\nEste exemplo muda o layout do container principal para uma orientação vertical e ajusta o estilo do texto.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.padding = 10\n    page.spacing = 10\n    bg_container = ft.Ref[ft.Container]()\n    \n    def handle_color_click(e):\n        color = e.control.content.value\n        bg_container.current.bgcolor = color.lower()\n        bg_container.current.content.value = f\"Background color changed to {color}\"\n        page.update()\n\n    menubar = ft.MenuBar(\n        expand=True,\n        controls=[\n            ft.SubmenuButton(\n                content=ft.Text(\"BgColors\"),\n                controls=[\n                    ft.MenuItemButton(\n                        content=ft.Text(\"Blue\"),\n                        leading=ft.Icon(ft.Icons.COLORIZE),\n                        on_click=handle_color_click,\n                    ),\n                    ft.MenuItemButton(\n                        content=ft.Text(\"Green\"),\n                        leading=ft.Icon(ft.Icons.COLORIZE),\n                        on_click=handle_color_click,\n                    ),\n                    ft.MenuItemButton(\n                        content=ft.Text(\"Red\"),\n                        leading=ft.Icon(ft.Icons.COLORIZE),\n                        on_click=handle_color_click,\n                    )\n                ]\n            ),\n        ]\n    )\n    \n    page.add(\n        ft.Column([\n            menubar,\n            ft.Container(\n                ref=bg_container,\n                expand=True,\n                bgcolor=ft.Colors.SURFACE,\n                content=ft.Text(\"Select a background color from the menu above.\", style=ft.TextStyle(color=ft.Colors.ON_SURFACE, font_size=20)),\n                alignment=ft.Alignment.center,\n                padding=20,\n            )\n        ])\n    )\n\nft.app(main)\n```\n\nCada um desses exemplos demonstra como você pode adaptar e expandir a funcionalidade de um aplicativo Flet para atender a requisitos específicos, seja aumentando a interatividade ou ajustando o layout e o estilo visual."
}