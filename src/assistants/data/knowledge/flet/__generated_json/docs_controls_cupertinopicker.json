{
    "file": "docs_controls_cupertinopicker.py",
    "description": "O código Python é um exemplo de como usar a biblioteca Flet para criar uma interface de usuário (UI) interativa que permite ao usuário selecionar uma fruta de uma lista utilizando um \"CupertinoPicker\", um componente de UI inspirado no design do iOS.\n\n### Importação da Biblioteca\n```python\nimport flet as ft\n```\nA linha acima importa a biblioteca Flet, que é usada para criar a interface do usuário.\n\n### Função Principal `main`\n```python\ndef main(page):\n```\nA função `main` é definida com um parâmetro `page`, que representa a página onde os componentes da UI serão adicionados.\n\n### Configuração da Página\n```python\npage.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n```\nEsta linha configura o alinhamento horizontal dos componentes na página para o centro.\n\n### Referência ao Texto Selecionado\n```python\nselected_fruit_ref = ft.Ref[ft.Text]()\n```\nCria uma referência para um objeto de texto que será usado para exibir a fruta selecionada. A referência permite alterar o valor do texto dinamicamente.\n\n### Lista de Frutas\n```python\nfruits = [\"Apple\", \"Mango\", \"Banana\", \"Orange\", \"Pineapple\", \"Strawberry\"]\n```\nDefine uma lista de strings que representam diferentes frutas.\n\n### Manipulador de Eventos para o Picker\n```python\ndef handle_picker_change(e):\n    selected_fruit_ref.current.value = fruits[int(e.data)]\n    page.update()\n```\nDefine uma função que será chamada quando o valor do `CupertinoPicker` mudar. O evento `e` contém os dados do índice selecionado, que é usado para atualizar o texto da fruta selecionada e chamar `page.update()` para refletir a mudança na UI.\n\n### Configuração do CupertinoPicker\n```python\ncupertino_picker = ft.CupertinoPicker(\n    selected_index=3,\n    magnification=1.22,\n    squeeze=1.2,\n    use_magnifier=True,\n    on_change=handle_picker_change,\n    controls=[ft.Text(value=f) for f in fruits],\n)\n```\nCria um `CupertinoPicker` com várias opções de configuração:\n- `selected_index=3`: Define o índice inicialmente selecionado (Orange).\n- `magnification=1.22` e `squeeze=1.2`: Configura o efeito visual de zoom e compressão dos itens.\n- `use_magnifier=True`: Habilita um efeito de lente de aumento para o item selecionado.\n- `on_change=handle_picker_change`: Associa o manipulador de eventos que atualiza o texto selecionado.\n- `controls`: Cria um texto para cada fruta na lista.\n\n### Adicionando Componentes à Página\n```python\npage.add(\n    ft.Row(\n        tight=True,\n        controls=[\n            ft.Text(\"Selected Fruit:\", size=23),\n            ft.TextButton(\n                content=ft.Text(value=fruits[3], ref=selected_fruit_ref, size=23),\n                style=ft.ButtonStyle(color=ft.Colors.BLUE),\n                on_click=lambda e: page.open(\n                    ft.CupertinoBottomSheet(\n                        cupertino_picker,\n                        height=216,\n                        padding=ft.padding.only(top=6),\n                    )\n                ),\n            ),\n        ],\n    ),\n)\n```\nAdiciona uma linha (`Row`) à página contendo um texto e um botão. O botão, quando clicado, abre um `CupertinoBottomSheet` que contém o `CupertinoPicker`.\n\n### Execução do Aplicativo\n```python\nft.app(main)\n```\nInicia a aplicação chamando a função `main`.\n\n### Resumo\nEste código exemplifica uma aplicação interativa simples usando Flet, que permite ao usuário escolher uma fruta de uma lista visual através de uma interface estilo iOS, com feedback visual e interação dinâmica.",
    "examples": "O código original que você forneceu é uma aplicação Flet que utiliza um `CupertinoPicker` para selecionar uma fruta de uma lista e mostra a fruta selecionada em um botão. Quando o botão é clicado, um `CupertinoBottomSheet` é aberto permitindo a mudança da seleção. \n\nVamos explorar exemplos adicionais que modificam e expandem esse código para diferentes usos e funcionalidades.\n\n### Exemplo 1: Adicionando um feedback visual com `CupertinoActivityIndicator`\n\nPodemos incorporar um `CupertinoActivityIndicator` para mostrar uma animação de carregamento enquanto o usuário faz a seleção. Isso pode ser útil quando a seleção da fruta desencadeia um processo de carregamento, como uma consulta de dados.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    selected_fruit_ref = ft.Ref[ft.Text]()\n    fruits = [\"Apple\", \"Mango\", \"Banana\", \"Orange\", \"Pineapple\", \"Strawberry\"]\n    loading_ref = ft.Ref[ft.CupertinoActivityIndicator]()\n\n    def handle_picker_change(e):\n        loading_ref.current.visible = True  # Mostra o loading\n        selected_fruit_ref.current.value = fruits[int(e.data)]\n        page.update()\n\n        # Simula uma operação que leva tempo\n        import time\n        time.sleep(2)  # Pausa para simulação\n        loading_ref.current.visible = False  # Esconde o loading\n        page.update()\n\n    cupertino_picker = ft.CupertinoPicker(\n        selected_index=3,\n        magnification=1.22,\n        squeeze=1.2,\n        use_magnifier=True,\n        on_change=handle_picker_change,\n        controls=[ft.Text(value=f) for f in fruits],\n    )\n\n    page.add(\n        ft.Row(\n            tight=True,\n            controls=[\n                ft.Text(\"Selected Fruit:\", size=23),\n                ft.TextButton(\n                    content=ft.Text(value=fruits[3], ref=selected_fruit_ref, size=23),\n                    style=ft.ButtonStyle(color=ft.Colors.BLUE),\n                    on_click=lambda e: page.open(\n                        ft.CupertinoBottomSheet(\n                            cupertino_picker,\n                            height=216,\n                            padding=ft.padding.only(top=6),\n                        )\n                    ),\n                ),\n                ft.CupertinoActivityIndicator(ref=loading_ref, visible=False),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Usando `Dropdown` em vez de `CupertinoPicker`\n\nSe quisermos substituir o `CupertinoPicker` por um componente mais simples como um `Dropdown`, podemos fazer isso da seguinte maneira:\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    selected_fruit_ref = ft.Ref[ft.Text]()\n    fruits = [\"Apple\", \"Mango\", \"Banana\", \"Orange\", \"Pineapple\", \"Strawberry\"]\n\n    def handle_dropdown_change(e):\n        selected_fruit_ref.current.value = e.control.value\n        page.update()\n\n    dropdown = ft.Dropdown(\n        value=fruits[3],\n        options=[ft.DropdownOption(text=f, value=f) for f in fruits],\n        on_change=handle_dropdown_change\n    )\n\n    page.add(\n        ft.Row(\n            tight=True,\n            controls=[\n                ft.Text(\"Selected Fruit:\", size=23),\n                dropdown,\n                ft.Text(value=fruits[3], ref=selected_fruit_ref, size=23),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\nEsses exemplos demonstram como você pode modificar e expandir o código inicial para incorporar diferentes componentes e comportamentos, tornando a aplicação mais interativa e funcional."
}