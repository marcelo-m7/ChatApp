{
    "file": "docs_controls_cupertinoslidingsegmentedbutton.py",
    "description": "O código fornecido é um script Python que utiliza a biblioteca Flet para criar uma aplicação de interface gráfica. A Flet é uma biblioteca destinada ao desenvolvimento de aplicações interativas usando Python, que podem ser executadas tanto na web quanto em desktop. Vamos analisar o código parte por parte:\n\n1. **Importação da biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Isso importa a biblioteca Flet com o alias `ft`, permitindo que você acesse os componentes e funcionalidades dessa biblioteca usando `ft.`.\n\n2. **Definição da função `main`**:\n   ```python\n   def main(page):\n   ```\n   A função `main` é definida recebendo um parâmetro `page`. Este parâmetro representa a página da aplicação, onde os componentes da UI serão adicionados.\n\n3. **Configuração do Modo do Tema da Página**:\n   ```python\n   page.theme_mode = ft.ThemeMode.LIGHT\n   ```\n   Aqui, o modo de tema da página é definido como `LIGHT`, o que significa que a página usará cores claras.\n\n4. **Adicionando um Componente na Página**:\n   ```python\n   page.add(...)\n   ```\n   Esta linha adiciona um componente específico à `page`. O componente adicionado é um `CupertinoSlidingSegmentedButton`.\n\n5. **CupertinoSlidingSegmentedButton**:\n   ```python\n   ft.CupertinoSlidingSegmentedButton(\n       selected_index=1,\n       thumb_color=ft.Colors.BLUE_400,\n       on_change=lambda e: print(f\"selected_index: {e.data}\"),\n       padding=ft.padding.symmetric(0, 10),\n       controls=[\n           ft.Text(\"One\"),\n           ft.Text(\"Two\"),\n           ft.Text(\"Three\"),\n       ],\n   )\n   ```\n   - **selected_index=1**: Define o índice do botão selecionado inicialmente como 1 (o segundo botão, considerando que a indexação começa em 0).\n   - **thumb_color=ft.Colors.BLUE_400**: Define a cor do controle deslizante como azul.\n   - **on_change**: Define um evento que é chamado quando o valor selecionado muda. Neste caso, imprimirá o índice selecionado no console.\n   - **padding**: Aplica um preenchimento simétrico horizontal de 10 pixels aos lados esquerdo e direito do botão segmentado.\n   - **controls**: Uma lista de controles que será exibida no botão segmentado. Cada controle é representado por um componente `Text`.\n\n6. **Inicialização da Aplicação Flet**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação utilizando a função `main` como ponto de entrada. Quando a aplicação é executada, a função `main` é chamada com o objeto `page` correspondente, onde a interface do usuário é construída.\n\nEm resumo, este script Python usa a biblioteca Flet para criar uma interface gráfica simples com um botão segmentado do estilo Cupertino. O botão permite ao usuário escolher entre três opções (\"One\", \"Two\", \"Three\"), e exibe no console o índice da opção selecionada sempre que o usuário muda sua seleção.",
    "examples": "Aqui estão alguns exemplos adicionais que mostram diferentes maneiras de utilizar o `ft.CupertinoSlidingSegmentedButton` em um aplicativo Flet. Cada exemplo destaca um aspecto diferente, como a alteração de cores, o uso de ícones e a interação com outros elementos da interface do usuário.\n\n### Exemplo 1: Alterando a cor do botão selecionado e do texto\n```python\nimport flet as ft\n\ndef main(page):\n    page.theme_mode = ft.ThemeMode.LIGHT\n    page.add(\n        ft.CupertinoSlidingSegmentedButton(\n            selected_index=0,\n            thumb_color=ft.Colors.GREEN_200,\n            background_color=ft.Colors.GREEN_50,\n            on_change=lambda e: print(f\"selected_index: {e.data}\"),\n            controls=[\n                ft.Text(\"Option A\", color=ft.Colors.GREEN_900),\n                ft.Text(\"Option B\", color=ft.Colors.GREEN_900),\n                ft.Text(\"Option C\", color=ft.Colors.GREEN_900),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Usando ícones nos segmentos\n```python\nimport flet as ft\n\ndef main(page):\n    page.theme_mode = ft.ThemeMode.LIGHT\n    page.add(\n        ft.CupertinoSlidingSegmentedButton(\n            selected_index=1,\n            thumb_color=ft.Colors.PURPLE_200,\n            on_change=lambda e: print(f\"selected_index: {e.data}\"),\n            controls=[\n                ft.Icon(ft.Icons.HOME, color=ft.Colors.PURPLE_900),\n                ft.Icon(ft.Icons.SETTINGS, color=ft.Colors.PURPLE_900),\n                ft.Icon(ft.Icons.ACCOUNT_CIRCLE, color=ft.Colors.PURPLE_900),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Interagindo com outros widgets\n```python\nimport flet as ft\n\ndef main(page):\n    page.theme_mode = ft.ThemeMode.LIGHT\n    \n    def update_text(e):\n        text.value = f\"Você selecionou: {['Primeiro', 'Segundo', 'Terceiro'][e.data]}\"\n        text.update()\n\n    text = ft.Text(value=\"Selecione uma opção\")\n    \n    segmented_button = ft.CupertinoSlidingSegmentedButton(\n        selected_index=1,\n        thumb_color=ft.Colors.TEAL_400,\n        on_change=update_text,\n        controls=[\n            ft.Text(\"Primeiro\"),\n            ft.Text(\"Segundo\"),\n            ft.Text(\"Terceiro\"),\n        ],\n    )\n    \n    page.add(segmented_button, text)\n\nft.app(main)\n```\n\n### Exemplo 4: Personalizando padding e margin\n```python\nimport flet as ft\n\ndef main(page):\n    page.theme_mode = ft.ThemeMode.LIGHT\n    page.add(\n        ft.CupertinoSlidingSegmentedButton(\n            selected_index=0,\n            thumb_color=ft.Colors.ORANGE_400,\n            on_change=lambda e: print(f\"selected_index: {e.data}\"),\n            padding=ft.padding.symmetric(vertical=10, horizontal=5),\n            margin=ft.margin.all(20),\n            controls=[\n                ft.Text(\"Item 1\"),\n                ft.Text(\"Item 2\"),\n                ft.Text(\"Item 3\"),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\nEsses exemplos mostram como você pode personalizar a `CupertinoSlidingSegmentedButton` para diferentes necessidades e estilos de aplicativos, aproveitando as propriedades como `thumb_color`, `background_color`, `padding`, e `margin`, além de interagir com outros widgets."
}