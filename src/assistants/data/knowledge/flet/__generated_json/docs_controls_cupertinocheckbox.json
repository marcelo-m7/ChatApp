{
    "file": "docs_controls_cupertinocheckbox.py",
    "description": "O código apresentado utiliza a biblioteca Flet, uma ferramenta para criar aplicações de interface gráfica de usuário (GUI) que podem ser executadas tanto em navegadores quanto em aplicativos nativos. O código define uma função chamada `main` que é usada para configurar uma página da aplicação com vários componentes de interface relacionados a caixas de seleção (checkboxes). Vamos analisar cada parte do código em detalhes:\n\n1. **Importação da biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Este comando importa a biblioteca Flet e a referencia com o alias `ft`. Isso significa que você pode acessar todas as funções e classes de Flet usando o prefixo `ft`.\n\n2. **Definição da função main**:\n   ```python\n   def main(page: ft.Page):\n   ```\n   Aqui, a função `main` é definida, tendo como parâmetro `page`, que é um objeto do tipo `ft.Page`. Esse objeto representa a página da aplicação onde os componentes da interface serão adicionados.\n\n3. **Adicionando componentes à página**:\n   ```python\n   page.add(\n       ft.CupertinoCheckbox(label=\"Cupertino Checkbox\", value=True),\n       ft.Checkbox(label=\"Material Checkbox\", value=True),\n       ft.Container(height=20),\n       ft.Text(\"Adaptive Checkbox shows as CupertinoCheckbox on macOS and iOS and as Checkbox on other platforms:\"),\n       ft.Checkbox(adaptive=True, label=\"Adaptive Checkbox\", value=True),\n   )\n   ```\n   Dentro da função `main`, os componentes são adicionados à página usando o método `add` do objeto `page`. Os componentes adicionados são:\n   \n   - **CupertinoCheckbox**: Este é um tipo específico de caixa de seleção estilizada conforme o design do sistema operacional iOS (parte do design da Apple). O parâmetro `label` define o texto que aparece ao lado da caixa de seleção, e `value=True` indica que a caixa está marcada por padrão.\n   \n   - **Checkbox**: Este é um tipo de caixa de seleção baseado no design Material (do Google). Assim como o `CupertinoCheckbox`, ele aceita um `label` e um `value`.\n   \n   - **Container**: Um container com altura de 20 pixels, provavelmente usado para criar um espaço entre os componentes anteriores e os seguintes.\n   \n   - **Text**: Um componente que exibe um texto explicativo sobre o próximo componente.\n   \n   - **Checkbox (adaptive)**: Esta caixa de seleção é adaptativa, o que significa que ela muda de estilo dependendo da plataforma em que a aplicação está sendo executada. Em plataformas macOS e iOS, ela se parece com `CupertinoCheckbox`, enquanto em outras plataformas se parece com `Checkbox`. Também possui as propriedades `label` e `value`.\n\n4. **Execução da aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação, passando a função `main` como argumento para `ft.app`. Isso diz ao Flet para usar a função `main` como ponto de entrada da aplicação, que configura e exibe a página com os componentes definidos.\n\nEm resumo, o código cria uma aplicação GUI simples com diferentes tipos de caixas de seleção usando a biblioteca Flet, demonstrando tanto um uso específico de estilo (Cupertino e Material) quanto um uso adaptativo de componentes de acordo com a plataforma.",
    "examples": "O código Python que você forneceu usa Flet, uma biblioteca para criar aplicativos de interface gráfica multiplataforma em Python. O exemplo mostra como adicionar diferentes tipos de caixas de seleção (checkboxes) a uma página, incluindo um checkbox estilo Cupertino, um checkbox estilo Material e um checkbox adaptativo que muda de estilo dependendo da plataforma. Abaixo, vou expandir este exemplo com mais variações e funcionalidades para explorar outras capacidades de Flet.\n\n### Exemplo 1: Adicionando Eventos aos Checkboxes\nVamos adicionar eventos para que, ao alterar o estado de cada checkbox, uma mensagem seja exibida.\n\n```python\nimport flet as ft\n\ndef on_checkbox_change(e):\n    e.control.page.controls[5].value = f\"Checkbox '{e.control.label}' está {'marcado' if e.control.value else 'desmarcado'}!\"\n    e.control.page.update()\n\ndef main(page: ft.Page):\n    checkbox1 = ft.CupertinoCheckbox(label=\"Cupertino Checkbox\", value=True, on_change=on_checkbox_change)\n    checkbox2 = ft.Checkbox(label=\"Material Checkbox\", value=False, on_change=on_checkbox_change)\n    checkbox3 = ft.Checkbox(adaptive=True, label=\"Adaptive Checkbox\", value=True, on_change=on_checkbox_change)\n    \n    status_text = ft.Text(\"\")\n    \n    page.add(checkbox1, checkbox2, ft.Container(height=20), ft.Text(\n        \"Adaptive Checkbox shows as CupertinoCheckbox on macOS and iOS and as Checkbox on other platforms:\"\n    ), checkbox3, status_text)\n\nft.app(main)\n```\n\n### Exemplo 2: Layout em Coluna com Alinhamento\nAlterando o layout para exibir os checkboxes em coluna com alinhamento centralizado.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Column(\n            controls=[\n                ft.CupertinoCheckbox(label=\"Cupertino Checkbox\", value=True),\n                ft.Checkbox(label=\"Material Checkbox\", value=True),\n                ft.Text(\"Adaptive Checkbox shows as CupertinoCheckbox on macOS and iOS and as Checkbox on other platforms:\"),\n                ft.Checkbox(adaptive=True, label=\"Adaptive Checkbox\", value=True)\n            ],\n            alignment=ft.MainAxisAlignment.CENTER,\n            cross_alignment=ft.CrossAxisAlignment.CENTER\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Uso de Containers para Espaçamento e Decoração\nUtilizando `Container` para adicionar espaçamento e bordas ao redor dos checkboxes.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Container(\n            content=ft.Column(controls=[\n                ft.CupertinoCheckbox(label=\"Cupertino Checkbox\", value=True),\n                ft.Container(height=10),  # Espaçamento vertical\n                ft.Checkbox(label=\"Material Checkbox\", value=True),\n                ft.Container(height=20),  # Espaçamento maior\n                ft.Text(\"Adaptive Checkbox shows as CupertinoCheckbox on macOS and iOS and as Checkbox on other platforms:\"),\n                ft.Checkbox(adaptive=True, label=\"Adaptive Checkbox\", value=True)\n            ]),\n            padding=ft.EdgeInsets.all(20),  # Padding interno\n            border=ft.Border.all(color=ft.colors.BLUE_GREY, width=2),  # Borda ao redor do container\n            width=300\n        )\n    )\n\nft.app(main)\n```\n\nEsses exemplos demonstram como você pode utilizar os widgets do Flet para criar interfaces mais interativas e visualmente agradáveis. Experimente combinar esses elementos de diferentes formas para explorar todas as possibilidades que a biblioteca oferece."
}