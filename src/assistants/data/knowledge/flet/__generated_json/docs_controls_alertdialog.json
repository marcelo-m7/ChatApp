{
    "file": "docs_controls_alertdialog.py",
    "description": "Este código Python utiliza a biblioteca Flet para criar uma interface gráfica de usuário (GUI) que demonstra o uso de diálogos (caixas de diálogo), tanto modais quanto não modais, em um aplicativo web ou desktop. Vamos explorar cada parte do código e suas funcionalidades:\n\n1. **Importação e Configuração Inicial**:\n   ```python\n   import flet as ft\n   ```\n   Este comando importa a biblioteca Flet, que é usada para construir interfaces de usuário em Python.\n\n   ```python\n   def main(page: ft.Page):\n   ```\n   A função `main` é definida com um parâmetro `page`, que representa a página da aplicação onde os componentes UI são adicionados.\n\n   ```python\n   page.title = \"AlertDialog examples\"\n   page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n   ```\n   Aqui, o título da página é definido como \"AlertDialog examples\", e o alinhamento horizontal dos elementos na página é centralizado.\n\n2. **Criação do Diálogo Não Modal**:\n   ```python\n   dlg = ft.AlertDialog(\n       title=ft.Text(\"Hi, this is a non-modal dialog!\"),\n       on_dismiss=lambda e: page.add(ft.Text(\"Non-modal dialog dismissed\")),\n   )\n   ```\n   `dlg` é um diálogo não modal. O título do diálogo é definido e uma função lambda é usada para adicionar um texto à página quando o diálogo for dispensado (fechado).\n\n3. **Função para Manipular o Fechamento de Diálogos**:\n   ```python\n   def handle_close(e):\n       page.close(dlg_modal)\n       page.add(ft.Text(f\"Modal dialog closed with action: {e.control.text}\"))\n   ```\n   Esta função é chamada quando qualquer botão de ação do diálogo modal é clicado. Ela fecha o diálogo modal e adiciona um texto à página indicando qual ação foi escolhida (sim ou não).\n\n4. **Criação do Diálogo Modal**:\n   ```python\n   dlg_modal = ft.AlertDialog(\n       modal=True,\n       title=ft.Text(\"Please confirm\"),\n       content=ft.Text(\"Do you really want to delete all those files?\"),\n       actions=[\n           ft.TextButton(\"Yes\", on_click=handle_close),\n           ft.TextButton(\"No\", on_click=handle_close),\n       ],\n       actions_alignment=ft.MainAxisAlignment.END,\n       on_dismiss=lambda e: page.add(ft.Text(\"Modal dialog dismissed\")),\n   )\n   ```\n   `dlg_modal` é um diálogo modal. Isso significa que ele bloqueia a interação com outros elementos da interface até ser fechado. O diálogo tem um título, um conteúdo, dois botões de ação (\"Yes\" e \"No\"), e uma função lambda que adiciona um texto à página quando ele for dispensado.\n\n5. **Adicionando Botões para Abrir os Diálogos**:\n   ```python\n   page.add(\n       ft.ElevatedButton(\"Open dialog\", on_click=lambda e: page.open(dlg)),\n       ft.ElevatedButton(\"Open modal dialog\", on_click=lambda e: page.open(dlg_modal)),\n   )\n   ```\n   Dois botões são adicionados à página. O primeiro abre o diálogo não modal e o segundo abre o diálogo modal. Cada botão tem um manipulador de evento `on_click` que chama o método `open` do objeto `page` para abrir os respectivos diálogos.\n\n6. **Inicialização do Aplicativo**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia o aplicativo passando a função `main` como entrada, que configura e exibe a página.\n\nEm resumo, este código demonstra como criar e manipular diálogos modais e não modais em uma aplicação Flet, permitindo interações básicas e tratamento de eventos.",
    "examples": "O código Python usando a biblioteca Flet que você forneceu cria uma interface de usuário com dois tipos de diálogos: um não modal e um modal. Vamos criar mais alguns exemplos para explorar diferentes funcionalidades e usos dos diálogos em Flet.\n\n### Exemplo 1: Diálogo com Campos de Entrada\n\nEste exemplo demonstra como criar um diálogo que contém campos de entrada para coletar dados do usuário.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Input Dialog Example\"\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def submit_form(e):\n        username = username_input.value\n        email = email_input.value\n        page.add(ft.Text(f\"Username: {username}, Email: {email}\"))\n        page.close(dlg)\n\n    username_input = ft.TextField(label=\"Username\", autofocus=True)\n    email_input = ft.TextField(label=\"Email\")\n\n    dlg = ft.AlertDialog(\n        modal=True,\n        title=ft.Text(\"Enter your details\"),\n        content=ft.Column([\n            username_input,\n            email_input\n        ]),\n        actions=[\n            ft.TextButton(\"Submit\", on_click=submit_form)\n        ]\n    )\n\n    page.add(\n        ft.ElevatedButton(\"Open Input Dialog\", on_click=lambda e: page.open(dlg))\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Diálogo para Confirmação com Estilo Customizado\n\nEste exemplo adiciona estilização ao diálogo para torná-lo visualmente distinto.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Styled Confirmation Dialog\"\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_response(e):\n        page.add(ft.Text(f\"Response: {e.control.text}\"))\n        page.close(dlg)\n\n    dlg = ft.AlertDialog(\n        modal=True,\n        title=ft.Text(\"Confirm Action\", style=ft.TextStyle(color=ft.colors.RED)),\n        content=ft.Text(\"Are you sure you want to proceed?\", style=ft.TextStyle(font_size=16)),\n        actions=[\n            ft.TextButton(\"Yes\", on_click=handle_response, style=ft.ButtonStyle(bgcolor=ft.colors.GREEN)),\n            ft.TextButton(\"No\", on_click=handle_response, style=ft.ButtonStyle(bgcolor=ft.colors.RED))\n        ],\n        actions_alignment=ft.MainAxisAlignment.END\n    )\n\n    page.add(\n        ft.ElevatedButton(\"Open Styled Dialog\", on_click=lambda e: page.open(dlg))\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Diálogo com Imagem\n\nExemplo de diálogo que inclui uma imagem junto com o texto.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.title = \"Dialog with Image\"\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    dlg = ft.AlertDialog(\n        modal=True,\n        title=ft.Text(\"Important Notice\"),\n        content=ft.Column([\n            ft.Image(src=\"https://via.placeholder.com/150\", width=150),\n            ft.Text(\"Please make sure to check this important information.\")\n        ]),\n        actions=[\n            ft.TextButton(\"OK\", on_click=lambda e: page.close(dlg))\n        ]\n    )\n\n    page.add(\n        ft.ElevatedButton(\"Open Dialog with Image\", on_click=lambda e: page.open(dlg))\n    )\n\nft.app(main)\n```\n\nEsses exemplos adicionais exploram diferentes aspectos dos diálogos em Flet, desde coleta de dados até estilização e inclusão de imagens, mostrando a flexibilidade da biblioteca para criar interfaces de usuário ricas e interativas."
}