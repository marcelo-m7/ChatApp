{
    "file": "docs_controls_cupertinotimerpicker.py",
    "description": "Este código em Python utilizando a biblioteca Flet cria uma interface gráfica para um aplicativo que inclui um seletor de tempo (timer picker) estilo Cupertino. A seguir, detalharei cada parte do código e suas funcionalidades:\n\n### Importação de Módulos\n```python\nimport time\nimport flet as ft\n```\n- `time`: módulo que fornece funções para manipulação de tempo.\n- `flet`: módulo para criar interfaces de usuário baseadas em web com Python.\n\n### Função Principal `main`\n```python\ndef main(page):\n```\nA função `main` é chamada quando o aplicativo é iniciado, e recebe um objeto `page` que representa a página da aplicação.\n\n### Configuração da Página\n```python\npage.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n```\nDefine o alinhamento horizontal dos elementos na página para o centro.\n\n### Referência para Valor do Timer Picker\n```python\ntimer_picker_value_ref = ft.Ref[ft.Text]()\n```\nCria uma referência (`Ref`) que será usada para atualizar o valor de um widget `Text` dinamicamente.\n\n### Função para Tratar Mudanças no Timer Picker\n```python\ndef handle_timer_picker_change(e):\n    timer_picker_value_ref.current.value = time.strftime(\"%H:%M:%S\", time.gmtime(int(e.data)))\n    page.update()\n```\nFunção chamada quando o valor do timer muda. Ela converte o tempo em segundos (recebido como `e.data`) para o formato HH:MM:SS e atualiza o texto referenciado por `timer_picker_value_ref`. Após a modificação, a página é atualizada com `page.update()`.\n\n### Criação do Cupertino Timer Picker\n```python\ncupertino_timer_picker = ft.CupertinoTimerPicker(\n    value=3600,\n    second_interval=10,\n    minute_interval=1,\n    mode=ft.CupertinoTimerPickerMode.HOUR_MINUTE_SECONDS,\n    on_change=handle_timer_picker_change,\n)\n```\nDefine um seletor de tempo no estilo Cupertino com um valor inicial de 3600 segundos (1 hora), com intervalos de 10 segundos e 1 minuto, e o modo definido para selecionar horas, minutos e segundos. `handle_timer_picker_change` é associado ao evento de mudança de valor.\n\n### Adicionando Widgets à Página\n```python\npage.add(\n    ft.Row(\n        tight=True,\n        controls=[\n            ft.Text(\"TimerPicker Value:\", size=23),\n            ft.CupertinoButton(\n                content=ft.Text(\n                    ref=timer_picker_value_ref,\n                    value=\"00:01:10\",\n                    size=23,\n                    color=ft.CupertinoColors.DESTRUCTIVE_RED,\n                ),\n                on_click=lambda e: page.open(\n                    ft.CupertinoBottomSheet(\n                        cupertino_timer_picker,\n                        height=216,\n                        padding=ft.padding.only(top=6),\n                    )\n                ),\n            ),\n        ],\n    ),\n)\n```\n- Adiciona uma linha (`Row`) à página.\n- Inclui um texto e um botão. O texto inicialmente mostra \"00:01:10\" e atualizará conforme o valor do timer picker é alterado.\n- O botão, quando clicado, abre um `CupertinoBottomSheet` contendo o timer picker definido anteriormente. O `BottomSheet` é configurado com uma altura de 216 pixels e um padding superior.\n\n### Iniciar o Aplicativo\n```python\nft.app(main)\n```\nInicia o aplicativo chamando a função `main`.\n\n### Resumo\nEste código cria um aplicativo GUI simples com um timer picker estilo iOS (Cupertino) que permite ao usuário escolher um tempo, exibindo o tempo escolhido em formato HH:MM:SS. O tempo pode ser ajustado em intervalos específicos e é exibido em um botão vermelho que, quando pressionado, mostra o picker numa janela separada.",
    "examples": "O exemplo de código que você forneceu utiliza a biblioteca Flet para criar uma interface com um `CupertinoTimerPicker`, que é um seletor de tempo no estilo iOS. O usuário pode escolher um tempo e o valor selecionado é mostrado em um botão, que quando pressionado, abre o seletor em uma nova janela de diálogo. Vamos criar alguns exemplos adicionais para explorar diferentes modos e configurações deste widget.\n\n### Exemplo 1: Modo Hora e Minuto\nEste exemplo altera o modo do `CupertinoTimerPicker` para apenas selecionar hora e minuto.\n\n```python\nimport time\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    timer_picker_value_ref = ft.Ref[ft.Text]()\n\n    def handle_timer_picker_change(e):\n        # e.data é o tempo selecionado em segundos\n        timer_picker_value_ref.current.value = time.strftime(\"%H:%M\", time.gmtime(int(e.data)))\n        page.update()\n\n    cupertino_timer_picker = ft.CupertinoTimerPicker(\n        value=3600,  # 1 hora\n        second_interval=1,\n        minute_interval=1,\n        mode=ft.CupertinoTimerPickerMode.HOUR_MINUTE,\n        on_change=handle_timer_picker_change,\n    )\n\n    page.add(\n        ft.Row(\n            tight=True,\n            controls=[\n                ft.Text(\"Escolha a Hora:\", size=20),\n                ft.CupertinoButton(\n                    content=ft.Text(\n                        ref=timer_picker_value_ref,\n                        value=\"01:00\",\n                        size=20,\n                        color=ft.CupertinoColors.DESTRUCTIVE_RED,\n                    ),\n                    on_click=lambda e: page.open(\n                        ft.CupertinoBottomSheet(\n                            cupertino_timer_picker,\n                            height=216,\n                            padding=ft.padding.only(top=6),\n                        )\n                    ),\n                ),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Aumentando os Intervalos de Minuto\nNeste exemplo, o intervalo de minutos é aumentado para 5 minutos, o que pode ser útil para casos onde a precisão do minuto não precisa ser tão alta.\n\n```python\nimport time\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    timer_picker_value_ref = ft.Ref[ft.Text]()\n\n    def handle_timer_picker_change(e):\n        timer_picker_value_ref.current.value = time.strftime(\"%H:%M:%S\", time.gmtime(int(e.data)))\n        page.update()\n\n    cupertino_timer_picker = ft.CupertinoTimerPicker(\n        value=0,\n        second_interval=10,\n        minute_interval=5,\n        mode=ft.CupertinoTimerPickerMode.HOUR_MINUTE_SECONDS,\n        on_change=handle_timer_picker_change,\n    )\n\n    page.add(\n        ft.Row(\n            tight=True,\n            controls=[\n                ft.Text(\"Tempo Selecionado:\", size=20),\n                ft.CupertinoButton(\n                    content=ft.Text(\n                        ref=timer_picker_value_ref,\n                        value=\"00:00:00\",\n                        size=20,\n                        color=ft.CupertinoColors.DESTRUCTIVE_RED,\n                    ),\n                    on_click=lambda e: page.open(\n                        ft.CupertinoBottomSheet(\n                            cupertino_timer_picker,\n                            height=216,\n                            padding=ft.padding.only(top=6),\n                        )\n                    ),\n                ),\n            ],\n        ),\n    )\n\nft.app(main)\n```\n\nEsses exemplos mostram como você pode customizar o `CupertinoTimerPicker` para diferentes necessidades, alterando o modo de visualização e os intervalos de tempo."
}