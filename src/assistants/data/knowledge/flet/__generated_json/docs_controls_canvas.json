{
    "file": "docs_controls_canvas.py",
    "description": "Os códigos apresentados são exemplos de como usar a biblioteca Flet para criar interfaces gráficas interativas e elementos de canvas em Python. Abaixo, descrevo cada um dos códigos separadamente, explicando suas funções e propriedades:\n\n### Primeiro Código\nEste código desenha várias formas geométricas para criar uma face simples usando a biblioteca `flet.canvas`.\n\n- Importa as bibliotecas necessárias.\n- Define `stroke_paint` para contornos e `fill_paint` para preenchimento de formas.\n- Cria uma tela com um conjunto de círculos e um arco para simular uma face.\n- O primeiro círculo representa a cabeça, os círculos menores representam os olhos, e o arco representa a boca.\n- A tela se expande para preencher o espaço disponível.\n\n### Segundo Código\nEste código usa `flet.canvas` para desenhar dois triângulos usando a classe `Path`.\n\n- Define caminhos usando `MoveTo` e `LineTo` para criar triângulos.\n- O primeiro triângulo é preenchido e o segundo tem apenas contorno.\n- A propriedade `expand=True` faz com que a tela se ajuste ao espaço disponível.\n\n### Terceiro Código\nEste exemplo desenha formas complexas utilizando `QuadraticTo` e `CubicTo` para criar uma forma floral ou decorativa.\n\n- Utiliza gradiente de cores no preenchimento de uma subforma.\n- Demonstra como usar curvas quadráticas e cúbicas para criar formas complexas.\n- A tela se expande para preencher o espaço disponível.\n\n### Quarto Código\nEste código explora o uso de texto e transformações, como rotação e alinhamento, em um canvas.\n\n- Adiciona múltiplos textos com diferentes estilos e alinhamentos.\n- Demonstra como rotacionar textos em torno de diferentes pontos de ancoragem.\n- Usa gradiente e contornos em textos para efeitos visuais.\n- A tela se expande para preencher o espaço disponível.\n\n### Quinto Código\nEste código cria um aplicativo interativo de desenho que permite ao usuário desenhar linhas em um canvas.\n\n- Implementa manipulações de eventos para detectar movimentos do usuário e desenha linhas conforme o usuário arrasta o cursor.\n- Usa `DragStartEvent` e `DragUpdateEvent` para iniciar e atualizar as posições de desenho.\n- A tela tem um gradiente linear como plano de fundo e não se expande automaticamente.\n\nCada um desses exemplos mostra diferentes capacidades da biblioteca Flet para criar interfaces gráficas com elementos interativos, demonstrando a versatilidade do Flet para desenvolvimento de aplicativos web e desktop com Python.",
    "examples": "Aqui estão alguns exemplos adicionais de uso do módulo `flet.canvas` do Flet, cada um explorando diferentes funcionalidades e estilos:\n\n### Exemplo 1: Desenho de um gradiente radial com texto sobreposto\n\n```python\nimport flet as ft\nimport flet.canvas as cv\n\ndef main(page: ft.Page):\n    cp = cv.Canvas(\n        [\n            cv.Circle(\n                250, 250, 200,\n                paint=ft.Paint(\n                    gradient=ft.PaintRadialGradient(\n                        ft.Offset(250, 250), 200,\n                        [ft.Colors.BLUE, ft.Colors.TRANSPARENT]\n                    )\n                )\n            ),\n            cv.Text(\n                250, 250,\n                \"Centro do Universo\",\n                ft.TextStyle(color=ft.Colors.WHITE, size=24),\n                alignment=ft.alignment.center\n            )\n        ],\n        width=500, height=500\n    )\n    page.add(cp)\n\nft.app(main)\n```\n\n### Exemplo 2: Animando uma forma geométrica\n\n```python\nimport flet as ft\nimport flet.canvas as cv\nimport time\n\ndef main(page: ft.Page):\n    rect = cv.Rect(100, 100, 100, 100, paint=ft.Paint(color=ft.Colors.GREEN))\n    cp = cv.Canvas([rect], width=300, height=300)\n    page.add(cp)\n\n    while True:\n        rect.x += 10\n        rect.y += 10\n        cp.update()\n        time.sleep(0.1)\n\nft.app(main)\n```\n\n### Exemplo 3: Usando transformações para rotacionar um grupo de formas\n\n```python\nimport flet as ft\nimport flet.canvas as cv\nimport math\n\ndef main(page: ft.Page):\n    group = cv.Group(\n        [\n            cv.Circle(100, 100, 50, paint=ft.Paint(style=ft.PaintingStyle.STROKE)),\n            cv.Rect(50, 50, 100, 100, paint=ft.Paint(style=ft.PaintingStyle.FILL, color=ft.Colors.RED))\n        ],\n        transform=cv.Matrix.rotation(math.pi / 4, center=(100, 100))\n    )\n    cp = cv.Canvas([group], width=200, height=200)\n    page.add(cp)\n\nft.app(main)\n```\n\n### Exemplo 4: Interatividade básica com formas\n\n```python\nimport flet as ft\nimport flet.canvas as cv\n\ndef main(page: ft.Page):\n    def on_click(e: ft.MouseEvent):\n        if circle.contains(e.local_x, e.local_y):\n            circle.paint.color = ft.Colors.RED if circle.paint.color != ft.Colors.RED else ft.Colors.GREEN\n        cp.update()\n\n    circle = cv.Circle(100, 100, 50, paint=ft.Paint(style=ft.PaintingStyle.FILL, color=ft.Colors.GREEN))\n    cp = cv.Canvas([circle], width=200, height=200, on_click=on_click)\n    page.add(cp)\n\nft.app(main)\n```\n\nCada exemplo traz uma abordagem única para trabalhar com a API de canvas do Flet, desde a manipulação de cores e gradientes até animações e interações com o usuário."
}