{
    "file": "docs_controls_markdown.py",
    "description": "O código fornecido demonstra como usar o componente Markdown da biblioteca Flet em uma aplicação Python. Vamos analisar cada parte do código para entender suas funções e propriedades:\n\n### Primeiro Bloco de Código\n\n1. **Importação da Biblioteca Flet:**\n   ```python\n   import flet as ft\n   ```\n   Importa a biblioteca Flet com o alias `ft`, que é uma biblioteca para criar aplicativos de interface gráfica usando apenas Python.\n\n2. **String Multilinhas com Markdown:**\n   ```python\n   md1 = \"\"\"# Markdown Example\n   ...\n   \"\"\"\n   ```\n   Esta string `md1` contém um texto formatado em Markdown, que inclui exemplos de cabeçalhos, links, imagens, tabelas, estilo de texto (itálico, negrito, tachado), listas e blocos de código. Este texto será renderizado no componente Markdown.\n\n3. **Função Principal (`main`):**\n   ```python\n   def main(page: ft.Page):\n   ```\n   Define a função principal que configura a página da aplicação.\n\n4. **Configurações de Página:**\n   ```python\n   page.scroll = \"auto\"\n   ```\n   Configura a rolagem automática para a página, permitindo ao usuário rolar pelo conteúdo se ele exceder a visualização da página.\n\n5. **Adicionando o Componente Markdown:**\n   ```python\n   page.add(\n       ft.Markdown(\n           md1,\n           selectable=True,\n           extension_set=ft.MarkdownExtensionSet.GITHUB_WEB,\n           on_tap_link=lambda e: page.launch_url(e.data),\n       )\n   )\n   ```\n   - **`md1`**: A string Markdown a ser renderizada.\n   - **`selectable=True`**: Permite que o texto dentro do componente Markdown seja selecionável pelo usuário.\n   - **`extension_set=ft.MarkdownExtensionSet.GITHUB_WEB`**: Usa um conjunto de extensões de Markdown compatível com o estilo do GitHub.\n   - **`on_tap_link`**: Um callback que é chamado quando um link é clicado. Aqui, ele abre o URL clicado usando `page.launch_url(e.data)`.\n\n6. **Iniciando o Aplicativo:**\n   ```python\n   ft.app(main)\n   ```\n   Inicia a aplicação chamando a função `main`.\n\n### Segundo Bloco de Código\n\nEste bloco é uma versão simplificada e focada em um componente específico de Markdown:\n\n1. **Função `open_url`:**\n   ```python\n   def open_url(e):\n       page.launch_url(e.data)\n   ```\n   Define uma função que será chamada quando um link dentro do Markdown for clicado, abrindo o URL correspondente.\n\n2. **Adicionando Componente Markdown Simplificado:**\n   ```python\n   page.add(\n       ft.Markdown(\n           \"[inline-style](https://www.google.com)\",\n           extension_set=\"gitHubWeb\",\n           on_tap_link=open_url,\n           expand=True,\n       ),\n   )\n   ```\n   - **Markdown Text**: Um link simples em Markdown.\n   - **`extension_set=\"gitHubWeb\"`**: Define o conjunto de extensões para renderização (deve ser `ft.MarkdownExtensionSet.GITHUB_WEB` para consistência com o primeiro exemplo).\n   - **`expand=True`**: Faz com que o componente Markdown expanda para ocupar todo o espaço disponível.\n\nAmbos os exemplos demonstram como integrar conteúdo Markdown em uma aplicação Flet, com funcionalidades adicionais como links clicáveis e texto selecionável.",
    "examples": "Para ilustrar diferentes formas de uso do componente `Markdown` do Flet, vamos criar exemplos variados que destacam diferentes funcionalidades e estilos de formatação Markdown. Além disso, vamos explorar formas diferentes de manipular eventos e configurar a exibição.\n\n### Exemplo 1: Uso básico de Markdown com texto formatado e código\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    markdown_text = \"\"\"\n# Exemplo Básico de Markdown\n\nEste é um texto simples que utiliza **negrito**, _itálico_, e `código inline`.\n\n## Código em Python\n\n```python\ndef hello_world():\n    print(\"Hello, world!\")\n```\n\nVisite [Flet](https://flet.dev) para mais informações.\n    \"\"\"\n    page.add(ft.Markdown(markdown_text, selectable=True))\n    \nft.app(main)\n```\n\n### Exemplo 2: Inclusão de listas e tabelas\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    markdown_list_table = \"\"\"\n# Listas e Tabelas\n\n- Primeiro item\n- Segundo item\n  - Subitem 1\n  - Subitem 2\n\n## Tabela de Exemplo\n| Nome  | Idade |\n|-------|-------|\n| Alice | 24    |\n| Bob   | 29    |\n    \"\"\"\n    page.add(ft.Markdown(markdown_list_table))\n    \nft.app(main)\n```\n\n### Exemplo 3: Imagens e links interativos\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    markdown_images_links = \"\"\"\n# Imagens e Links\n\n![Flet Logo](https://flet.dev/images/logo.png)\n\nConfira mais em [Flet Website](https://flet.dev).\n\n## Imagem com Link\n[![Flet](https://flet.dev/images/logo.png)](https://flet.dev)\n    \"\"\"\n    def open_url(e):\n        page.launch_url(e.data)\n        \n    page.add(ft.Markdown(markdown_images_links, on_tap_link=open_url))\n    \nft.app(main)\n```\n\n### Exemplo 4: Estilos avançados e interatividade com checkboxes\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    markdown_advanced = \"\"\"\n# Estilos Avançados\n\nEste texto inclui ~~tachado~~, **_negrito itálico_**, e ***negrito itálico sublinhado***.\n\n## Lista de Tarefas\n\n- [ ] Tarefa 1\n- [x] Tarefa 2 (concluída)\n- [ ] Tarefa 3\n\nUse `on_tap` para interagir com os links.\n    \"\"\"\n    def open_url(e):\n        page.launch_url(e.data)\n        \n    page.add(ft.Markdown(markdown_advanced, on_tap_link=open_url))\n    \nft.app(main)\n```\n\nCada um desses exemplos mostra diferentes maneiras de utilizar o componente `Markdown` para criar interfaces ricas e interativas com o Flet."
}