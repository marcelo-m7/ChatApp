{
    "file": "docs_controls_cupertinoradio.py",
    "description": "O código Python que você apresentou utiliza a biblioteca Flet para criar uma interface de usuário (UI) para uma aplicação web, que permite ao usuário selecionar uma cor favorita de uma lista de opções de rádio e submeter sua escolha. Após a submissão, a escolha é exibida na tela. Vamos examinar cada parte do código para entender suas funções e propriedades:\n\n1. **Importação da Biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Este código importa a biblioteca Flet que é usada para criar interfaces de usuário web.\n\n2. **Definição da Função Principal `main`**:\n   ```python\n   def main(page):\n   ```\n   A função `main` é chamada automaticamente pelo Flet quando a aplicação é iniciada. O parâmetro `page` representa a página da aplicação web.\n\n3. **Definição da Função `button_clicked`**:\n   ```python\n   def button_clicked(e):\n       t.value = f\"Your favorite color is: {cg.value}\"\n       page.update()\n   ```\n   Esta função é chamada quando o botão é clicado. Ela atualiza o valor do objeto `Text` `t` para mostrar o valor selecionado no grupo de rádio `cg`. Depois, atualiza a página para refletir a mudança na interface do usuário.\n\n4. **Criação de Widgets**:\n   - **Objeto Text**:\n     ```python\n     t = ft.Text()\n     ```\n     Cria um widget de texto vazio que será usado para mostrar a cor selecionada após o usuário clicar no botão.\n   \n   - **Botão Elevado**:\n     ```python\n     b = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\n     ```\n     Cria um botão com o texto \"Submit\". `on_click=button_clicked` especifica que a função `button_clicked` deve ser chamada quando o botão é clicado.\n\n   - **Grupo de Rádio**:\n     ```python\n     cg = ft.RadioGroup(\n         content=ft.Column(\n             [\n                 ft.CupertinoRadio(value=\"red\", label=\"Red - Cupertino Radio\", active_color=ft.Colors.RED, inactive_color=ft.Colors.RED),\n                 ft.Radio(value=\"green\", label=\"Green - Material Radio\", fill_color=ft.Colors.GREEN),\n                 ft.Radio(value=\"blue\", label=\"Blue - Adaptive Radio\", adaptive=True, active_color=ft.Colors.BLUE),\n             ]\n         )\n     )\n     ```\n     Cria um grupo de rádio com três opções distintas, cada uma com estilos diferentes:\n     - **CupertinoRadio**: Estilo específico para iOS com cores ativas e inativas definidas.\n     - **Radio (Material)**: Estilo padrão do Material Design com uma cor de preenchimento.\n     - **Adaptive Radio**: Um rádio que se adapta ao sistema operacional do usuário, com uma cor ativa definida.\n\n5. **Adicionando Widgets à Página**:\n   ```python\n   page.add(ft.Text(\"Select your favorite color:\"), cg, b, t)\n   ```\n   Adiciona um widget de texto com uma instrução, o grupo de rádio `cg`, o botão `b` e o texto `t` à página. Isso organiza os elementos na interface do usuário.\n\n6. **Execução da Aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação chamando a função `main`.\n\nEm resumo, o código cria uma aplicação web simples que permite ao usuário escolher uma cor favorita e submeter sua escolha. A escolha é então exibida na página. O código demonstra o uso de eventos, atualização de widgets e a criação de interfaces com diferentes estilos de widgets no Flet.",
    "examples": "A partir do código fornecido, podemos criar variações para demonstrar diferentes funcionalidades do Flet e como ele pode ser usado para criar interfaces de usuário amigáveis e interativas em Python. Vamos explorar um conjunto de exemplos que utilizam diferentes elementos de UI e interações.\n\n### Exemplo 1: Usando Checkbox para múltiplas seleções\nEste exemplo modifica a escolha única para múltiplas seleções usando checkboxes, permitindo ao usuário selecionar mais de uma cor favorita.\n\n```python\nimport flet as ft\n\ndef main(page):\n    def button_clicked(e):\n        selected_colors = ', '.join([cb.label for cb in [cb_red, cb_green, cb_blue] if cb.value])\n        t.value = f\"Your favorite colors are: {selected_colors}\"\n        page.update()\n\n    t = ft.Text()\n    b = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\n    \n    cb_red = ft.Checkbox(value=False, label=\"Red\")\n    cb_green = ft.Checkbox(value=False, label=\"Green\")\n    cb_blue = ft.Checkbox(value=False, label=\"Blue\")\n    \n    checkboxes = ft.Column([cb_red, cb_green, cb_blue])\n    \n    page.add(ft.Text(\"Select your favorite colors:\"), checkboxes, b, t)\n\nft.app(main)\n```\n\n### Exemplo 2: Dropdown para seleção\nEste exemplo usa um Dropdown para selecionar uma cor, ideal para uma lista extensa de opções.\n\n```python\nimport flet as ft\n\ndef main(page):\n    def dropdown_changed(e):\n        t.value = f\"Your favorite color is: {dd.value}\"\n        page.update()\n\n    t = ft.Text()\n    dd = ft.Dropdown(\n        options=[\n            ft.DropdownOption(\"red\", \"Red\"),\n            ft.DropdownOption(\"green\", \"Green\"),\n            ft.DropdownOption(\"blue\", \"Blue\")\n        ],\n        on_change=dropdown_changed\n    )\n    page.add(ft.Text(\"Select your favorite color:\"), dd, t)\n\nft.app(main)\n```\n\n### Exemplo 3: Slider para intensidade de cor\nUsando um slider para determinar a intensidade de uma cor selecionada.\n\n```python\nimport flet as ft\n\ndef main(page):\n    def slider_changed(e):\n        color_value = int(slider.value)\n        t.value = f\"Your favorite color intensity for blue is: {color_value}%\"\n        page.update()\n\n    t = ft.Text()\n    slider = ft.Slider(min=0, max=100, divisions=10, label=\"Intensity\", on_change=slider_changed)\n    \n    page.add(ft.Text(\"Adjust the blue color intensity:\"), slider, t)\n\nft.app(main)\n```\n\nEsses exemplos mostram como o Flet pode ser usado para criar interfaces de usuário dinâmicas e interativas, utilizando diferentes controles como botões, checkboxes, dropdowns e sliders. Cada exemplo serve para ilustrar como variados componentes podem ser incorporados em aplicações Python para melhorar a interatividade e a experiência do usuário."
}