{
    "file": "docs_controls_autocomplete.py",
    "description": "O código apresentado é um exemplo simples de como usar a biblioteca Flet em Python para criar uma interface de usuário com um widget `AutoComplete`. A seguir, vou detalhar cada parte do código e explicar suas funções e propriedades:\n\n1. **Importação da biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Esta linha importa a biblioteca `flet` com um alias `ft`. Flet é uma biblioteca que permite criar aplicações web usando Python de forma simples e rápida.\n\n2. **Definição da função principal `main`**:\n   ```python\n   def main(page: ft.Page):\n   ```\n   Esta função é o ponto de entrada da aplicação Flet. Ela recebe um objeto `Page` como argumento, que representa a página da web onde os widgets serão exibidos.\n\n3. **Adição de um widget `AutoComplete` à página**:\n   ```python\n   page.add(\n       ft.AutoComplete(\n           ...\n       )\n   )\n   ```\n   Aqui, o método `add` do objeto `page` é usado para adicionar widgets à página web. Neste caso, está sendo adicionado um widget `AutoComplete`.\n\n4. **Configuração do widget `AutoComplete`**:\n   ```python\n   ft.AutoComplete(\n       suggestions=[\n           ft.AutoCompleteSuggestion(key=\"one 1\", value=\"One\"),\n           ft.AutoCompleteSuggestion(key=\"two 2\", value=\"Two\"),\n           ft.AutoCompleteSuggestion(key=\"three 3\", value=\"Three\"),\n       ],\n       on_select=lambda e: print(e.control.selected_index, e.selection),\n   )\n   ```\n   - `suggestions`: Esta é uma lista de sugestões que serão exibidas no widget `AutoComplete`. Cada sugestão é uma instância de `AutoCompleteSuggestion`, que possui as propriedades `key` e `value`. O `key` é um identificador único para cada entrada, e o `value` é o texto que será exibido na interface do usuário.\n   - `on_select`: Este é um manipulador de eventos que é chamado quando uma sugestão é selecionada pelo usuário. O `lambda e: print(e.control.selected_index, e.selection)` é uma função anônima que recebe um evento `e` e imprime o índice da seleção (`selected_index`) e a sugestão selecionada (`selection`).\n\n5. **Início da aplicação Flet**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação Flet e estabelece `main` como a função de entrada. Isso configura a biblioteca para criar a interface de usuário baseada no que foi definido na função `main`.\n\nEm resumo, este código cria uma aplicação web simples com um campo de `AutoComplete` que permite ao usuário escolher entre três opções (\"One\", \"Two\", \"Three\"). Quando uma opção é selecionada, o índice da seleção e o valor são impressos no console.",
    "examples": "O exemplo que você forneceu é um bom ponto de partida para explorar as funcionalidades do componente `AutoComplete` no framework Flet. Vamos expandir esse exemplo em diferentes variações para ilustrar como você pode personalizar e utilizar o `AutoComplete` em diferentes cenários.\n\n### Exemplo 1: AutoComplete com Filtragem Personalizada\n\nPodemos modificar o comportamento padrão de filtragem do `AutoComplete` para permitir uma busca mais complexa ou específica, como ignorar espaços ou diferenciar maiúsculas de minúsculas.\n\n```python\nimport flet as ft\n\ndef custom_filter(suggestions, query):\n    # Filtragem personalizada, ignorando maiúsculas e espaços.\n    query = query.lower().replace(\" \", \"\")\n    return [s for s in suggestions if query in s.value.lower().replace(\" \", \"\")]\n\ndef main(page: ft.Page):\n    suggestions = [\n        ft.AutoCompleteSuggestion(key=\"one 1\", value=\"One\"),\n        ft.AutoCompleteSuggestion(key=\"two 2\", value=\"Two\"),\n        ft.AutoCompleteSuggestion(key=\"three 3\", value=\"Three\"),\n    ]\n    \n    autocomplete = ft.AutoComplete(\n        suggestions=suggestions,\n        on_select=lambda e: print(e.control.selected_index, e.selection),\n    )\n    autocomplete.filter = lambda query: custom_filter(suggestions, query)\n    page.add(autocomplete)\n\nft.app(main)\n```\n\n### Exemplo 2: AutoComplete com Sugestões Dinâmicas\n\nVocê pode querer que as sugestões do `AutoComplete` sejam carregadas ou modificadas dinamicamente com base em alguma entrada ou evento, como uma resposta de um serviço web.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def update_suggestions(e):\n        typed_text = e.control.value\n        # Aqui você poderia incluir uma chamada a uma API para buscar sugestões\n        suggestions = [\n            ft.AutoCompleteSuggestion(key=typed_text + \"1\", value=typed_text.capitalize() + \" One\"),\n            ft.AutoCompleteSuggestion(key=typed_text + \"2\", value=typed_text.capitalize() + \" Two\"),\n        ]\n        e.control.suggestions = suggestions\n        e.control.update()\n\n    autocomplete = ft.AutoComplete(on_input=update_suggestions)\n    page.add(autocomplete)\n\nft.app(main)\n```\n\n### Exemplo 3: Estilizando o AutoComplete\n\nVocê pode querer alterar o estilo visual do `AutoComplete` para melhor se integrar ao design do seu aplicativo.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    autocomplete = ft.AutoComplete(\n        suggestions=[\n            ft.AutoCompleteSuggestion(key=\"one 1\", value=\"One\"),\n            ft.AutoCompleteSuggestion(key=\"two 2\", value=\"Two\"),\n            ft.AutoCompleteSuggestion(key=\"three 3\", value=\"Three\"),\n        ],\n        on_select=lambda e: print(e.control.selected_index, e.selection),\n        width=300,\n        border_radius=10,\n        bg_color=ft.colors.LIGHT_BLUE_100,\n        focused_bg_color=ft.colors.LIGHT_BLUE_50,\n    )\n    page.add(autocomplete)\n\nft.app(main)\n```\n\nEsses exemplos mostram como você pode usar o componente `AutoComplete` de maneira mais avançada, ajustando a filtragem, carregando sugestões dinamicamente e customizando a aparência do componente."
}