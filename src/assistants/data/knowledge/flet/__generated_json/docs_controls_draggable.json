{
    "file": "docs_controls_draggable.py",
    "description": "O código fornecido é um exemplo de implementação de funcionalidades de \"arrastar e soltar\" (drag and drop) utilizando a biblioteca Flet em Python. Flet é uma ferramenta que permite a criação de interfaces de usuário em aplicações web e desktop de forma fácil e rápida. Vamos detalhar cada parte do código:\n\n### Importação de Módulos e Componentes Flet\n```python\nimport flet\nfrom flet import (\n    Column,\n    Container,\n    Draggable,\n    DragTarget,\n    DragTargetAcceptEvent,\n    Page,\n    Row,\n    border,\n    colors,\n)\n```\nEssas linhas importam os componentes necessários da biblioteca Flet, incluindo classes para construção de layouts (`Column`, `Row`), componentes de interface (`Container`), funcionalidades de arrastar e soltar (`Draggable`, `DragTarget`), eventos (`DragTargetAcceptEvent`), além de utilidades para estilização (`border`, `colors`).\n\n### Função Principal `main`\n```python\ndef main(page: Page):\n    page.title = \"Drag and Drop example\"\n```\nEsta função é chamada para configurar e exibir a página. `page.title` define o título da página.\n\n### Funções de Eventos para Drag and Drop\n- **drag_will_accept**:\n  ```python\n  def drag_will_accept(e):\n      e.control.content.border = border.all(\n          2, colors.BLACK45 if e.data == \"true\" else colors.RED\n      )\n      e.control.update()\n  ```\n  Esta função é chamada quando um elemento arrastável está sobre um alvo de soltura. Ela modifica a borda do container alvo baseando-se na validade dos dados (`e.data`).\n\n- **drag_accept**:\n  ```python\n  def drag_accept(e: DragTargetAcceptEvent):\n      src = page.get_control(e.src_id)\n      e.control.content.bgcolor = src.content.bgcolor\n      e.control.content.border = None\n      e.control.update()\n  ```\n  Chamada quando um elemento é solto sobre um alvo válido. Altera a cor de fundo do alvo para corresponder à do elemento arrastado e remove a borda.\n\n- **drag_leave**:\n  ```python\n  def drag_leave(e):\n      e.control.content.border = None\n      e.control.update()\n  ```\n  Restaura o estilo do alvo de soltura quando o elemento arrastável é movido para fora dele.\n\n### Configuração de Layout e Adição de Componentes\n```python\npage.add(\n    Row([\n        Column([\n            Draggable(...),\n            Draggable(...),\n            Draggable(...),\n        ]),\n        Container(width=100),\n        DragTarget(...)\n    ])\n)\n```\nEsta seção cria um layout com uma `Row` contendo uma `Column` de elementos arrastáveis (`Draggable`) e um `DragTarget`. Entre a coluna e o alvo, há um `Container` atuando como espaço vazio. Os elementos `Draggable` têm propriedades como `group`, `content` (definindo tamanho, cor e borda), e `content_feedback` (a aparência do feedback ao arrastar).\n\n### Execução da Aplicação\n```python\nflet.app(main)\n```\nFinalmente, a aplicação é executada passando a função `main` como argumento para `flet.app()`.\n\n### Resumo\nO código demonstra um exemplo básico de como implementar a funcionalidade de arrastar e soltar em uma interface Flet. Ele utiliza eventos para gerenciar a interação, modificando visualmente os elementos para refletir o estado do processo de arrastar e soltar.",
    "examples": "Aqui estão alguns exemplos adicionais que exploram diferentes formas de uso do código de arrastar e soltar em Flet, introduzindo variações no design, comportamento e funcionalidades:\n\n### Exemplo 1: Adicionando Múltiplos Alvos de Solta (DragTargets)\n\nEste exemplo modifica o código original para incluir múltiplos `DragTargets`, permitindo que os itens sejam soltos em diferentes áreas.\n\n```python\nimport flet\nfrom flet import (\n    Column, Container, Draggable, DragTarget, DragTargetAcceptEvent, Page, Row, border, colors,\n)\n\ndef main(page: Page):\n    page.title = \"Multiple Drop Targets Example\"\n\n    def drag_will_accept(e):\n        e.control.content.border = border.all(2, colors.BLACK45 if e.data == \"true\" else colors.RED)\n        e.control.update()\n\n    def drag_accept(e: DragTargetAcceptEvent):\n        src = page.get_control(e.src_id)\n        e.control.content.bgcolor = src.content.bgcolor\n        e.control.content.border = None\n        e.control.update()\n\n    def drag_leave(e):\n        e.control.content.border = None\n        e.control.update()\n\n    page.add(\n        Row([\n            Column([\n                Draggable(\n                    group=\"color\",\n                    content=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.CYAN,\n                        border_radius=5,\n                    ),\n                ),\n                Draggable(\n                    group=\"color\",\n                    content=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.YELLOW,\n                        border_radius=5,\n                    ),\n                ),\n            ]),\n            Container(width=100),\n            Column([\n                DragTarget(\n                    group=\"color\",\n                    content=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.BLUE_GREY_100,\n                        border_radius=5,\n                    ),\n                    on_will_accept=drag_will_accept,\n                    on_accept=drag_accept,\n                    on_leave=drag_leave,\n                ),\n                DragTarget(\n                    group=\"color\",\n                    content=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.PINK_100,\n                        border_radius=5,\n                    ),\n                    on_will_accept=drag_will_accept,\n                    on_accept=drag_accept,\n                    on_leave=drag_leave,\n                ),\n            ]),\n        ])\n    )\n\nflet.app(main)\n```\n\n### Exemplo 2: Feedback Visual Durante o Arrasto\n\nEste exemplo adiciona um feedback visual mais distinto durante a operação de arrasto, mostrando uma sombra ao redor do item que está sendo arrastado.\n\n```python\nimport flet\nfrom flet import (\n    Column, Container, Draggable, DragTarget, DragTargetAcceptEvent, Page, Row, border, colors, elevation,\n)\n\ndef main(page: Page):\n    page.title = \"Drag Visual Feedback Example\"\n\n    def drag_will_accept(e):\n        e.control.content.border = border.all(2, colors.GREEN200)\n        e.control.update()\n\n    def drag_accept(e: DragTargetAcceptEvent):\n        src = page.get_control(e.src_id)\n        e.control.content.bgcolor = src.content.bgcolor\n        e.control.content.border = None\n        e.control.update()\n\n    def drag_leave(e):\n        e.control.content.border = None\n        e.control.update()\n\n    page.add(\n        Row([\n            Column([\n                Draggable(\n                    group=\"color\",\n                    content=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.CYAN,\n                        border_radius=5,\n                    ),\n                    content_feedback=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.CYAN,\n                        border_radius=5,\n                        elevation=10,\n                    ),\n                ),\n                Draggable(\n                    group=\"color\",\n                    content=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.YELLOW,\n                        border_radius=5,\n                    ),\n                    content_feedback=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.YELLOW,\n                        border_radius=5,\n                        elevation=10,\n                    ),\n                ),\n            ]),\n            Container(width=100),\n            DragTarget(\n                group=\"color\",\n                content=Container(\n                    width=50,\n                    height=50,\n                    bgcolor=colors.BLUE_GREY_100,\n                    border_radius=5,\n                ),\n                on_will_accept=drag_will_accept,\n                on_accept=drag_accept,\n                on_leave=drag_leave,\n            ),\n        ])\n    )\n\nflet.app(main)\n```\n\nEsses exemplos ilustram como você pode modificar e expandir a funcionalidade de arrastar e soltar no Flet para diferentes situações e necessidades de design de interface do usuário."
}