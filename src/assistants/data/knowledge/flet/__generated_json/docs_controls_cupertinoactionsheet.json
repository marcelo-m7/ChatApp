{
    "file": "docs_controls_cupertinoactionsheet.py",
    "description": "O código apresentado é um exemplo de como utilizar a biblioteca Flet em Python para criar uma interface gráfica de usuário (GUI) que funciona tanto na web quanto em dispositivos móveis, usando componentes inspirados no design da Apple (Cupertino). Vamos analisar cada parte do código:\n\n### Importação da Biblioteca\n\n```python\nimport flet as ft\n```\nEsta linha importa a biblioteca Flet, que é usada para construir a interface do usuário.\n\n### Função Principal\n\n```python\ndef main(page):\n```\nA função `main` é o ponto de entrada do aplicativo Flet e recebe um objeto `page` que representa a página ou tela do aplicativo.\n\n### Configuração da Página\n\n```python\npage.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n```\nEsta linha configura o alinhamento horizontal dos componentes na página para o centro.\n\n### Manipulador de Cliques\n\n```python\ndef handle_click(e):\n    page.add(ft.Text(f\"Action clicked: {e.control.content.value}\"))\n    page.close(bottom_sheet)\n```\n`handle_click` é uma função que será chamada quando um botão na CupertinoActionSheet for clicado. Ela adiciona um texto à página que indica qual ação foi clicada, e fecha a \"bottom sheet\" (uma espécie de painel que desliza da parte inferior da tela).\n\n### Criação da Action Sheet\n\n```python\naction_sheet = ft.CupertinoActionSheet(\n    title=ft.Row([ft.Text(\"Title\")], alignment=ft.MainAxisAlignment.CENTER),\n    message=ft.Row([ft.Text(\"Description\")], alignment=ft.MainAxisAlignment.CENTER),\n    cancel=ft.CupertinoActionSheetAction(\n        content=ft.Text(\"Cancel\"),\n        on_click=handle_click,\n    ),\n    actions=[\n        ft.CupertinoActionSheetAction(\n            content=ft.Text(\"Default Action\"),\n            is_default_action=True,\n            on_click=handle_click,\n        ),\n        ft.CupertinoActionSheetAction(\n            content=ft.Text(\"Normal Action\"),\n            on_click=handle_click,\n        ),\n        ft.CupertinoActionSheetAction(\n            content=ft.Text(\"Destructive Action\"),\n            is_destructive_action=True,\n            on_click=handle_click,\n        ),\n    ],\n)\n```\nEsta seção define uma \"action sheet\" com um título, uma descrição, uma ação de cancelamento, e três ações adicionais. Cada ação possui um manipulador de cliques associado.\n\n### Criação da Bottom Sheet\n\n```python\nbottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n```\nEnvolve a action sheet criada anteriormente em uma bottom sheet, que é um componente que desliza da parte inferior da tela.\n\n### Adição de Botão na Página\n\n```python\npage.add(\n    ft.CupertinoFilledButton(\n        \"Open CupertinoBottomSheet\",\n        on_click=lambda e: page.open(bottom_sheet),\n    )\n)\n```\nAdiciona um botão na página que, quando clicado, abre a bottom sheet.\n\n### Inicialização do App\n\n```python\nft.app(main)\n```\nEsta linha inicia a aplicação, passando a função `main` como a função de entrada do app.\n\n### Resumo\n\nO código cria uma aplicação com uma interface gráfica que permite ao usuário interagir com uma bottom sheet estilo Cupertino. Quando um botão na bottom sheet é clicado, a ação correspondente é exibida na página principal e a bottom sheet é fechada. Este exemplo é útil para entender como criar e manipular componentes de interface do usuário em aplicativos Python usando a biblioteca Flet, com um estilo visual que é familiar para usuários de dispositivos iOS.",
    "examples": "O código que você compartilhou utiliza o framework Flet para criar uma interface de usuário com uma folha de ação ao estilo Cupertino, que é tipicamente usado em aplicações para iOS. Abaixo, você encontrará exemplos adicionais que demonstram diversas formas de usar e customizar a `CupertinoActionSheet` em diferentes contextos.\n\n### Exemplo 1: Adicionando Ícones às Ações\n\nEste exemplo mostra como adicionar ícones às ações dentro da folha de ação para tornar a interface mais visualmente atraente.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.content.children[1].value}\"))\n        page.close(bottom_sheet)\n\n    action_sheet = ft.CupertinoActionSheet(\n        title=ft.Row([ft.Text(\"Choose Option\")], alignment=ft.MainAxisAlignment.CENTER),\n        message=ft.Row([ft.Text(\"Select an action to perform.\")], alignment=ft.MainAxisAlignment.CENTER),\n        cancel=ft.CupertinoActionSheetAction(\n            content=ft.Row([\n                ft.Icon(ft.icons.CLOSE),\n                ft.Text(\" Cancel\")\n            ]),\n            on_click=handle_click,\n        ),\n        actions=[\n            ft.CupertinoActionSheetAction(\n                content=ft.Row([\n                    ft.Icon(ft.icons.CHECK),\n                    ft.Text(\" Accept\")\n                ]),\n                on_click=handle_click,\n            ),\n            ft.CupertinoActionSheetAction(\n                content=ft.Row([\n                    ft.Icon(ft.icons.WARNING),\n                    ft.Text(\" Warning\")\n                ]),\n                is_destructive_action=True,\n                on_click=handle_click,\n            ),\n        ],\n    )\n    bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open Actions\",\n            on_click=lambda e: page.open(bottom_sheet),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Adicionando Divisores entre Ações\n\nEste exemplo ilustra como adicionar divisores entre as ações para uma melhor separação visual.\n\n```python\nimport flet as ft\n\ndef main(page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def handle_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.content.value}\"))\n        page.close(bottom_sheet)\n\n    action_sheet = ft.CupertinoActionSheet(\n        title=ft.Row([ft.Text(\"Settings\")], alignment=ft.MainAxisAlignment.CENTER),\n        message=ft.Row([ft.Text(\"Configure your preferences.\")], alignment=ft.MainAxisAlignment.CENTER),\n        cancel=ft.CupertinoActionSheetAction(\n            content=ft.Text(\"Cancel\"),\n            on_click=handle_click,\n        ),\n        actions=[\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Sound\"),\n                on_click=handle_click,\n            ),\n            ft.Divider(),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Display\"),\n                on_click=handle_click,\n            ),\n            ft.Divider(),\n            ft.CupertinoActionSheetAction(\n                content=ft.Text(\"Network\"),\n                on_click=handle_click,\n            ),\n        ],\n    )\n    bottom_sheet = ft.CupertinoBottomSheet(action_sheet)\n    page.add(\n        ft.CupertinoFilledButton(\n            \"Open Settings\",\n            on_click=lambda e: page.open(bottom_sheet),\n        )\n    )\n\nft.app(main)\n```\n\nEsses exemplos mostram duas maneiras diferentes de personalizar a `CupertinoActionSheet` para diferentes necessidades de interação do usuário, como adicionar ícones e divisores, melhorando a experiência visual e a organização do conteúdo."
}