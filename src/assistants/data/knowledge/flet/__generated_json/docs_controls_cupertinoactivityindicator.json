{
    "file": "docs_controls_cupertinoactivityindicator.py",
    "description": "O código apresentado é um script Python que utiliza a biblioteca Flet para criar uma interface gráfica de usuário (GUI) simples. Vamos analisar cada parte do código para entender seu funcionamento e propriedades:\n\n1. **Importação da Biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Esse comando importa a biblioteca Flet com o alias `ft`, permitindo que suas funções e classes sejam acessadas mais facilmente no código.\n\n2. **Definição da Função Principal**:\n   ```python\n   def main(page):\n   ```\n   Aqui, a função `main` é definida, e ela recebe um parâmetro chamado `page`, que representa a página ou janela da aplicação onde os widgets serão adicionados.\n\n3. **Configuração do Modo de Tema da Página**:\n   ```python\n   page.theme_mode = ft.ThemeMode.LIGHT\n   ```\n   Esta linha configura o tema da página para o modo claro (`LIGHT`). O Flet também suporta um modo escuro (`DARK`), e essa configuração afeta a aparência de todos os elementos da interface.\n\n4. **Adição de Widgets à Página**:\n   ```python\n   page.add(\n       ft.CupertinoActivityIndicator(\n           radius=50,\n           color=ft.Colors.RED,\n           animating=True,\n       )\n   )\n   ```\n   - `page.add(...)`: Este método é usado para adicionar widgets à página. \n   - `ft.CupertinoActivityIndicator(...)`: Este é um widget específico que cria um indicador de atividade, comumente usado para mostrar que um processo está em andamento. É estilizado de acordo com as diretrizes do design Cupertino, que é inspirado no iOS.\n     - `radius=50`: Define o raio do indicador de atividade. Neste caso, o raio é 50, o que determina o tamanho do widget.\n     - `color=ft.Colors.RED`: Define a cor do indicador. Aqui, a cor é vermelha.\n     - `animating=True`: Um booleano que controla se o indicador deve estar animando (girando) ou não. `True` significa que o indicador estará animado.\n\n5. **Execução da Aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação chamando a função `main` e passando a ela um objeto `page` criado internamente pela biblioteca Flet. A função `main` configura e adiciona os widgets necessários a essa página, e a aplicação começa a ser executada.\n\nEm resumo, o código cria uma aplicação GUI simples usando a biblioteca Flet, onde um indicador de atividade vermelho e grande é exibido em uma página com tema claro. Esse tipo de indicador é frequentemente usado para indicar que algum processamento ou carregamento está ocorrendo.",
    "examples": "No código fornecido, um aplicativo simples usando a biblioteca Flet está sendo criado. Este aplicativo exibe um `CupertinoActivityIndicator`, um widget que mostra uma animação de carregamento (um spinner) típica do design do iOS. Aqui estão alguns exemplos adicionais para mostrar diferentes formas de uso do `CupertinoActivityIndicator` e outros elementos que você pode adicionar para enriquecer a interface do usuário.\n\n### Exemplo 1: Alterando a cor e o tamanho do indicador\n```python\nimport flet as ft\n\ndef main(page):\n    page.theme_mode = ft.ThemeMode.LIGHT\n    page.add(\n        ft.CupertinoActivityIndicator(\n            radius=30,  # Tamanho menor do spinner\n            color=ft.Colors.GREEN,  # Cor verde\n            animating=True,\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Usando o indicador com um botão para controlar a animação\n```python\nimport flet as ft\n\ndef main(page):\n    def toggle_animation(e):\n        spinner.animating = not spinner.animating\n        page.update()\n\n    spinner = ft.CupertinoActivityIndicator(\n        radius=50,\n        color=ft.Colors.BLUE,\n        animating=False,\n    )\n\n    toggle_btn = ft.Button(\n        text=\"Start/Stop\",\n        on_click=toggle_animation\n    )\n\n    page.add(spinner, toggle_btn)\n\nft.app(main)\n```\n\n### Exemplo 3: Usando o indicador em um layout com texto\n```python\nimport flet as ft\n\ndef main(page):\n    spinner = ft.CupertinoActivityIndicator(\n        radius=20,\n        color=ft.Colors.PURPLE,\n        animating=True,\n    )\n\n    text = ft.Text(\"Carregando, por favor aguarde...\", style=ft.TextStyle(fontSize=20))\n\n    page.add(ft.Row([spinner, ft.Padding(child=text, padding=ft.EdgeInsets.only(left=10))]))\n\nft.app(main)\n```\n\n### Exemplo 4: Alternando entre modos de tema (claro e escuro)\n```python\nimport flet as ft\n\ndef main(page):\n    def switch_theme(e):\n        page.theme_mode = ft.ThemeMode.DARK if page.theme_mode == ft.ThemeMode.LIGHT else ft.ThemeMode.LIGHT\n        page.update()\n\n    spinner = ft.CupertinoActivityIndicator(\n        radius=50,\n        color=ft.Colors.RED,\n        animating=True,\n    )\n\n    theme_btn = ft.Button(\n        text=\"Switch Theme\",\n        on_click=switch_theme,\n    )\n\n    page.add(spinner, theme_btn)\n\nft.app(main)\n```\n\n### Exemplo 5: Implementando múltiplos indicadores simultâneos\n```python\nimport flet as ft\n\ndef main(page):\n    page.add(\n        ft.CupertinoActivityIndicator(radius=20, color=ft.Colors.ORANGE, animating=True),\n        ft.CupertinoActivityIndicator(radius=30, color=ft.Colors.TEAL, animating=True),\n        ft.CupertinoActivityIndicator(radius=40, color=ft.Colors.PINK, animating=True),\n    )\n\nft.app(main)\n```\n\nCada um desses exemplos mostra diferentes maneiras de utilizar o `CupertinoActivityIndicator` em um aplicativo Flet, além de demonstrar como adicionar funcionalidades adicionais e interações com o usuário."
}