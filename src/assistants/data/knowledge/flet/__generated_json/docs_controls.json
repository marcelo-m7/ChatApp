{
    "file": "docs_controls.py",
    "description": "O código inclui vários exemplos de utilização da biblioteca Flet em Python, uma ferramenta poderosa para a criação de interfaces de usuário baseadas na web usando Python. Vamos descrever cada trecho de código para entender suas funções e propriedades:\n\n### Primeiro Exemplo\n```python\nc = ft.Column(controls=[ft.TextField(), ft.TextField()])\nc.disabled = True\npage.add(c)\n```\nNeste exemplo, um objeto `Column` é criado com dois `TextField` como controles. A propriedade `disabled` é definida como `True`, o que desabilita todos os controles dentro da coluna, impedindo a interação do usuário. Finalmente, essa coluna é adicionada à página.\n\n### Segundo Exemplo\n```python\nimport flet as ft\n\nclass Message(ft.Container):\n    def __init__(self, author, body):\n        super().__init__()\n        self.content = ft.Column(\n            controls=[\n                ft.Text(author, weight=ft.FontWeight.BOLD),\n                ft.Text(body),\n            ],\n        )\n        self.border = ft.border.all(1, ft.Colors.BLACK)\n        self.border_radius = ft.border_radius.all(10)\n        self.bgcolor = ft.Colors.GREEN_200\n        self.padding = 10\n        self.expand = True\n        self.expand_loose = True\n\ndef main(page: ft.Page):\n    ...\nft.app(main)\n```\nEste código define uma classe `Message` que herda de `Container`. O construtor aceita um autor e corpo da mensagem, criando um layout com texto em negrito para o autor e texto normal para o corpo. Estilização adicional inclui borda, raio da borda, cor de fundo e preenchimento. A função `main` define um layout de chat usando `ListView` e várias instâncias de `Message` são adicionadas à lista.\n\n### Terceiro Exemplo\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.add(\n        ft.Stack(\n            [\n                ft.Container(\n                    bgcolor=\"red\",\n                    width=100,\n                    height=100,\n                    left=100,\n                    top=100,\n                    offset=ft.transform.Offset(-1, -1),\n                )\n            ],\n            width=1000,\n            height=1000,\n        )\n    )\nft.app(main)\n```\nEste exemplo cria um `Stack` que contém um `Container` com fundo vermelho e especificações de tamanho e posição. O `Stack` permite sobrepor widgets. O `offset` é usado para mover o container dentro do stack.\n\n### Quarto Exemplo\n```python\nft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    rotate=Rotate(angle=0.25 * pi, alignment=ft.alignment.center_left)\n)\n```\nEste código cria uma imagem com uma URL específica, tamanho, raio de borda e uma rotação especificada. A rotação é feita com base em um ângulo específico e um ponto de alinhamento.\n\n### Quinto Exemplo\n```python\nfrom dataclasses import field\n\nclass Scale:\n    scale: float = field(default=None)\n    scale_x: float = field(default=None)\n    scale_y: float = field(default=None)\n    alignment: Alignment = field(default=None)\n```\nEssa classe `Scale` usa `dataclasses` para definir propriedades de escala que podem ser usadas para transformações gráficas, por exemplo, em imagens ou outros elementos gráficos.\n\n### Sexto Exemplo\n```python\nft.Image(\n    src=\"https://picsum.photos/100/100\",\n    width=100,\n    height=100,\n    border_radius=5,\n    scale=Scale(scale_x=2, scale_y=0.5)\n)\n```\nEste exemplo cria uma imagem com escala horizontal duplicada e escala vertical reduzida pela metade, utilizando a classe `Scale` definida anteriormente. Isso ilustra como aplicar transformações de escala em widgets.\n\nCada um desses exemplos mostra diferentes funcionalidades da biblioteca Flet para criar interfaces de usuário ricas e interativas com Python.",
    "examples": "Certamente! Vou criar mais alguns exemplos que exploram os recursos da biblioteca Flet em diferentes contextos, utilizando o mesmo estilo do seu código original.\n\n### Exemplo 1: Formulário com validação\nEste exemplo cria um formulário simples com campos de entrada para nome e idade, com validação para garantir que a idade é um número.\n\n```python\nimport flet as ft\n\ndef validate_form(e):\n    if e.control.name == \"age\" and not e.control.value.isdigit():\n        e.control.error_text = \"Por favor, insira um número válido.\"\n    else:\n        e.control.error_text = \"\"\n\ndef main(page: ft.Page):\n    form = ft.Column([\n        ft.TextField(label=\"Nome\", name=\"name\", on_change=validate_form),\n        ft.TextField(label=\"Idade\", name=\"age\", on_change=validate_form),\n        ft.ElevatedButton(text=\"Enviar\", on_click=lambda e: print(\"Formulário enviado\"))\n    ])\n    page.add(form)\n\nft.app(main)\n```\n\n### Exemplo 2: Lista de Tarefas\nEste exemplo demonstra como criar uma interface de lista de tarefas onde você pode adicionar e remover tarefas.\n\n```python\nimport flet as ft\n\ndef add_task(e, page, task_input, tasks_list):\n    if task_input.value:\n        tasks_list.controls.append(ft.ListTile(title=ft.Text(task_input.value)))\n        task_input.value = \"\"\n        page.update()\n\ndef main(page: ft.Page):\n    task_input = ft.TextField(hint_text=\"Adicione uma nova tarefa\", width=300)\n    tasks_list = ft.ListView()\n    add_button = ft.ElevatedButton(text=\"Adicionar\", on_click=lambda e: add_task(e, page, task_input, tasks_list))\n    page.add(ft.Column([task_input, add_button, tasks_list]))\n\nft.app(main)\n```\n\n### Exemplo 3: Criação Dinâmica de Tabs\nEste exemplo demonstra como criar tabs de forma dinâmica e manipulá-las em tempo real.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    tab_control = ft.TabControl(tabs=[], width=400, height=300)\n    add_tab_button = ft.ElevatedButton(\n        text=\"Adicionar Tab\",\n        on_click=lambda e: tab_control.tabs.append(ft.Tab(text=f\"Tab {len(tab_control.tabs) + 1}\", content=ft.Text(\"Conteúdo\")))\n    )\n    page.add(ft.Column([add_tab_button, tab_control]))\n\nft.app(main)\n```\n\n### Exemplo 4: Animação com Imagens\nEste exemplo mostra como aplicar animações simples a imagens usando transformações.\n\n```python\nimport flet as ft\nimport math\n\ndef main(page: ft.Page):\n    image = ft.Image(\n        src=\"https://picsum.photos/200/200\",\n        width=200,\n        height=200,\n        rotate=ft.Rotate(angle=0.5 * math.pi, alignment=ft.alignment.center)\n    )\n    page.add(image)\n\nft.app(main)\n```\n\nCada um desses exemplos mostra diferentes maneiras de utilizar o Flet para criar interfaces interativas em Python. Se precisar de mais alguma funcionalidade ou tiver dúvidas, sinta-se à vontade para perguntar!"
}