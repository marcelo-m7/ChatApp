{
    "file": "docs_controls_cupertinodialogaction.py",
    "description": "O código Python apresentado usa a biblioteca Flet para criar uma interface de usuário (UI) com estilo Cuppertino, semelhante ao design do iOS, em uma aplicação web ou desktop. Vamos analisar o código parte por parte para entender sua funcionalidade e propriedades:\n\n1. **Importação da Biblioteca Flet**:\n   ```python\n   import flet as ft\n   ```\n   Esta linha importa a biblioteca Flet, que é usada para construir interfaces de usuário.\n\n2. **Função Principal `main`**:\n   ```python\n   def main(page: ft.Page):\n   ```\n   Define a função principal chamada `main`, que recebe um objeto `page` do tipo `ft.Page`. Este objeto é usado para controlar e modificar a página da aplicação.\n\n3. **Configuração da Alinhamento Horizontal**:\n   ```python\n   page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n   ```\n   Esta linha define o alinhamento horizontal dos elementos na página para o centro. `CrossAxisAlignment.CENTER` é uma enumeração que especifica que os widgets devem ser centralizados horizontalmente na página.\n\n4. **Função `dialog_dismissed`**:\n   ```python\n   def dialog_dismissed(e):\n       page.add(ft.Text(\"Dialog dismissed\"))\n   ```\n   Esta função é chamada quando o diálogo é fechado (dismissed). Ela adiciona um texto `Dialog dismissed` à página.\n\n5. **Função `handle_action_click`**:\n   ```python\n   def handle_action_click(e):\n       page.add(ft.Text(f\"Action clicked: {e.control.text}\"))\n       page.close(cupertino_alert_dialog)\n   ```\n   Esta função é chamada quando qualquer ação (botão) dentro do diálogo é clicada. Ela adiciona um texto informando qual ação foi clicada, usando o texto do botão clicado (`e.control.text`). Em seguida, fecha o diálogo.\n\n6. **Criação do Diálogo CupertinoAlertDialog**:\n   ```python\n   cupertino_alert_dialog = ft.CupertinoAlertDialog(\n       ...\n   )\n   ```\n   Cria uma instância de `CupertinoAlertDialog`, um diálogo ao estilo iOS, com um título, uma mensagem e ações definidas. O diálogo chama `dialog_dismissed` quando é fechado e possui botões para \"Yes\" e \"No\".\n\n   Dentro deste diálogo, são definidas duas ações (`CupertinoDialogAction`) para os botões \"Yes\" e \"No\". O botão \"Yes\" é marcado como destrutivo (`is_destructive_action=True`), enquanto o botão \"No\" é marcado como ação padrão (`is_default_action=True`). Ambos os botões usam `handle_action_click` para lidar com cliques.\n\n7. **Adicionando Botão na Página**:\n   ```python\n   page.add(\n       ft.CupertinoFilledButton(\n           text=\"Open CupertinoAlertDialog\",\n           on_click=lambda e: page.open(cupertino_alert_dialog),\n       )\n   )\n   ```\n   Adiciona um botão `CupertinoFilledButton` à página que, quando clicado, abre o `CupertinoAlertDialog`. O texto do botão é \"Open CupertinoAlertDialog\".\n\n8. **Execução da Aplicação**:\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia a aplicação, configurando `main` como a função de entrada.\n\nEste código demonstra como criar e manipular diálogos no estilo iOS usando a biblioteca Flet em Python, permitindo a criação de interfaces de usuário interativas.",
    "examples": "O código fornecido apresenta uma implementação básica de um diálogo de alerta estilo Cupertino (estética iOS) usando a biblioteca Flet em Python. Vamos explorar diferentes exemplos adicionais para expandir o uso e compreensão de como manipular diálogos e interações na biblioteca Flet.\n\n### Exemplo 1: Adicionando uma Ação Adicional\nVamos adicionar uma terceira opção ao diálogo, tal como \"Cancel\", que simplesmente fecha o diálogo sem adicionar nenhuma ação adicional.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def dialog_dismissed(e):\n        page.add(ft.Text(\"Dialog dismissed\"))\n\n    def handle_action_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.text}\"))\n        page.close(cupertino_alert_dialog)\n\n    cupertino_alert_dialog = ft.CupertinoAlertDialog(\n        title=ft.Text(\"Cupertino Alert Dialog\"),\n        content=ft.Text(\"Do you want to delete this file?\"),\n        on_dismiss=dialog_dismissed,\n        actions=[\n            ft.CupertinoDialogAction(\n                text=\"Yes\",\n                is_destructive_action=True,\n                on_click=handle_action_click,\n            ),\n            ft.CupertinoDialogAction(\n                text=\"No\",\n                is_default_action=True,\n                on_click=handle_action_click\n            ),\n            ft.CupertinoDialogAction(\n                text=\"Cancel\",\n                on_click=lambda e: page.close(cupertino_alert_dialog)\n            ),\n        ],\n    )\n\n    page.add(\n        ft.CupertinoFilledButton(\n            text=\"Open CupertinoAlertDialog\",\n            on_click=lambda e: page.open(cupertino_alert_dialog),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Modificando o Estilo do Diálogo\nAlterar o estilo do texto do título e do conteúdo para personalizar a apresentação do diálogo.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def dialog_dismissed(e):\n        page.add(ft.Text(\"Dialog dismissed\"))\n\n    def handle_action_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.text}\"))\n        page.close(cupertino_alert_dialog)\n\n    cupertino_alert_dialog = ft.CupertinoAlertDialog(\n        title=ft.Text(\"Importante\", style=ft.TextStyle(color=ft.colors.RED, weight=\"bold\")),\n        content=ft.Text(\"Você realmente deseja excluir este arquivo?\", style=ft.TextStyle(italic=True)),\n        on_dismiss=dialog_dismissed,\n        actions=[\n            ft.CupertinoDialogAction(\n                text=\"Sim\",\n                is_destructive_action=True,\n                on_click=handle_action_click,\n            ),\n            ft.CupertinoDialogAction(\n                text=\"Não\",\n                is_default_action=True,\n                on_click=handle_action_click\n            ),\n        ],\n    )\n\n    page.add(\n        ft.CupertinoFilledButton(\n            text=\"Abrir Diálogo\",\n            on_click=lambda e: page.open(cupertino_alert_dialog),\n        )\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Adicionando um Ícone ao Botão\nAdicionar um ícone ao botão que abre o diálogo para torná-lo visualmente mais atraente.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n\n    def dialog_dismissed(e):\n        page.add(ft.Text(\"Dialog dismissed\"))\n\n    def handle_action_click(e):\n        page.add(ft.Text(f\"Action clicked: {e.control.text}\"))\n        page.close(cupertino_alert_dialog)\n\n    cupertino_alert_dialog = ft.CupertinoAlertDialog(\n        title=ft.Text(\"Cupertino Alert Dialog\"),\n        content=ft.Text(\"Do you want to delete this file?\"),\n        on_dismiss=dialog_dismissed,\n        actions=[\n            ft.CupertinoDialogAction(\n                text=\"Yes\",\n                is_destructive_action=True,\n                on_click=handle_action_click,\n            ),\n            ft.CupertinoDialogAction(\n                text=\"No\",\n                is_default_action=True,\n                on_click=handle_action_click\n            ),\n        ],\n    )\n\n    page.add(\n        ft.CupertinoFilledButton(\n            text=\"Open Dialog\",\n            icon=ft.Icon(ft.icons.WARNING_AMBER_OUTLINED),\n            on_click=lambda e: page.open(cupertino_alert_dialog),\n        )\n    )\n\nft.app(main)\n```\n\nEstes exemplos ilustram como você pode personalizar e expandir a funcionalidade de diálogos em aplicativos usando Flet, adaptando-se a diferentes requisitos de interface e interação do usuário."
}