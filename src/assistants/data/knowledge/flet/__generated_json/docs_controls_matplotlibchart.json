{
    "file": "docs_controls_matplotlibchart.py",
    "description": "Vamos analisar os três trechos de código fornecidos, explicando suas funções e propriedades. Cada trecho é um exemplo de como usar a biblioteca `matplotlib` para criar gráficos e a biblioteca `flet` para criar uma interface web que exibe esses gráficos.\n\n### Primeiro Código\n\n```python\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport flet as ft\nfrom flet.matplotlib_chart import MatplotlibChart\n\nmatplotlib.use(\"svg\")\n\ndef main(page: ft.Page):\n    fig, ax = plt.subplots()\n    fruits = [\"apple\", \"blueberry\", \"cherry\", \"orange\"]\n    counts = [40, 100, 30, 55]\n    bar_labels = [\"red\", \"blue\", \"red\", \"orange\"]\n    bar_colors = [\"tab:red\", \"tab:blue\", \"tab:red\", \"tab:orange\"]\n    ax.bar(fruits, counts, label=bar_labels, color=bar_colors)\n    ax.set_ylabel(\"fruit supply\")\n    ax.set_title(\"Fruit supply by kind and color\")\n    ax.legend(title=\"Fruit color\")\n    page.add(MatplotlibChart(fig, expand=True))\n\nft.app(main)\n```\n\n**Descrição:**\nEste código cria uma aplicação web usando Flet que mostra um gráfico de barras dos suprimentos de diferentes frutas. O gráfico é criado usando `matplotlib` e exibe quatro tipos de frutas com suas quantidades correspondentes. As barras são coloridas de acordo com a cor associada a cada fruta.\n\n**Funções e propriedades:**\n- `matplotlib.use(\"svg\")`: Configura o `matplotlib` para usar SVG como formato de saída para gráficos, o que geralmente resulta em uma visualização mais limpa em navegadores.\n- `plt.subplots()`: Cria uma figura e um conjunto de subtramas (neste caso, uma única subtrama).\n- `ax.bar()`: Cria um gráfico de barras.\n- `ax.set_ylabel()`, `ax.set_title()`, `ax.legend()`: Definem o rótulo do eixo y, o título do gráfico e a legenda, respectivamente.\n- `MatplotlibChart`: Componente de Flet que incorpora um gráfico `matplotlib` em uma página web.\n- `page.add()`: Adiciona um componente à página web.\n\n### Segundo Código\n\n```python\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport flet as ft\nfrom flet.matplotlib_chart import MatplotlibChart\n\nmatplotlib.use(\"svg\")\n\ndef main(page: ft.Page):\n    np.random.seed(19680801)\n    dt = 0.01\n    t = np.arange(0, 30, dt)\n    nse1 = np.random.randn(len(t))\n    nse2 = np.random.randn(len(t))\n    s1 = np.sin(2 * np.pi * 10 * t) + nse1\n    s2 = np.sin(2 * np.pi * 10 * t) + nse2\n    fig, axs = plt.subplots(2, 1)\n    axs[0].plot(t, s1, t, s2)\n    axs[0].set_xlim(0, 2)\n    axs[0].set_xlabel(\"time\")\n    axs[0].set_ylabel(\"s1 and s2\")\n    axs[0].grid(True)\n    cxy, f = axs[1].cohere(s1, s2, 256, 1.0 / dt)\n    axs[1].set_ylabel(\"coherence\")\n    fig.tight_layout()\n    page.add(MatplotlibChart(fig, expand=True))\n\nft.app(main)\n```\n\n**Descrição:**\nEste código gera uma aplicação web que exibe dois gráficos. O primeiro mostra duas séries de dados temporais com um componente coerente e ruído aleatório. O segundo gráfico mostra a coerência entre essas duas séries.\n\n**Funções e propriedades:**\n- `np.random.seed()`: Define a semente para geração de números aleatórios, garantindo a reproducibilidade.\n- `np.arange()`, `np.random.randn()`: Geram o vetor de tempo e os ruídos, respectivamente.\n- `axs[0].plot()`, `axs[1].cohere()`: Plotam as séries temporais e calculam a coerência entre elas.\n- `axs[0].set_xlim()`, `axs[0].set_xlabel()`, `axs[0].set_ylabel()`, `axs[0].grid()`, `axs[1].set_ylabel()`: Configuram aspectos visuais dos gráficos como limites, rótulos e grade.\n\n### Terceiro Código\n\n```python\ndef main(page: ft.Page):\n    # ...\n    ax.legend(title=\"Fruit color\")\n    chart1 = MatplotlibChart(fig, isolated=True, expand=True)\n    page.add(chart1)\n    sleep(5)\n    ax.legend(title=\"Colors\")\n    chart1.update()\n\nft.app(main)\n```\n\n**Descrição:**\nEste código é um fragmento que parece atualizar um gráfico após um certo tempo. Ele muda a legenda de \"Fruit color\" para \"Colors\" e atualiza o gráfico na interface da aplicação.\n\n**Funções e propriedades:**\n- `MatplotlibChart(isolated=True, expand=True)`: Cria um gráfico com configurações específicas, onde `isolated=True` pode implicar que o gráfico não compartilha estado com outros componentes.\n- `sleep(5)`: Pausa a execução por 5 segundos.\n- `chart1.update()`: Atualiza o gráfico na página web.\n\nCada exemplo demonstra diferentes maneiras de integrar visualizações `matplotlib` em uma interface de usuário web usando `flet`.",
    "examples": "Abaixo estão três exemplos adicionais que demonstram diferentes formas de uso do código com `matplotlib` e `flet`, cada um destacando aspectos distintos como plotagem de histogramas, uso de subplots para diferentes tipos de dados e manipulação interativa de gráficos.\n\n### Exemplo 1: Histograma de Distribuição Normal\nEste exemplo cria um histograma de uma distribuição normal usando `matplotlib` e exibe no `flet`.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport flet as ft\nfrom flet.matplotlib_chart import MatplotlibChart\n\nmatplotlib.use(\"svg\")\n\ndef main(page: ft.Page):\n    # Gerando dados\n    data = np.random.normal(loc=0, scale=1, size=1000)\n    \n    # Criando a figura\n    fig, ax = plt.subplots()\n    ax.hist(data, bins=30, color='blue', alpha=0.7)\n    ax.set_title(\"Histograma de Distribuição Normal\")\n    ax.set_xlabel(\"Valores\")\n    ax.set_ylabel(\"Frequência\")\n\n    # Adicionando ao Flet\n    page.add(MatplotlibChart(fig, expand=True))\n\nft.app(main)\n```\n\n### Exemplo 2: Comparação de Subplots\nEste exemplo mostra como criar múltiplos subplots para diferentes tipos de dados (linha e scatter) em uma única figura.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport flet as ft\nfrom flet.matplotlib_chart import MatplotlibChart\n\nmatplotlib.use(\"svg\")\n\ndef main(page: ft.Page):\n    # Dados\n    t = np.arange(0., 5., 0.2)\n    y1 = np.power(t, 2)\n    y2 = np.exp(t)\n\n    # Criando subplots\n    fig, (ax1, ax2) = plt.subplots(2, 1)\n    ax1.plot(t, y1, 'b-')\n    ax1.set_title(\"Gráfico de Linha - t^2\")\n    ax1.set_ylabel(\"y1\")\n\n    ax2.scatter(t, y2, color='r')\n    ax2.set_title(\"Gráfico de Dispersão - e^t\")\n    ax2.set_xlabel(\"t\")\n    ax2.set_ylabel(\"y2\")\n\n    fig.tight_layout()\n\n    # Adicionando ao Flet\n    page.add(MatplotlibChart(fig, expand=True))\n\nft.app(main)\n```\n\n### Exemplo 3: Atualização Dinâmica de Gráfico\nEste exemplo ilustra como atualizar um gráfico após um intervalo de tempo, modificando o título do gráfico e atualizando a visualização.\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport flet as ft\nfrom flet.matplotlib_chart import MatplotlibChart\nimport time\n\nmatplotlib.use(\"svg\")\n\ndef main(page: ft.Page):\n    # Dados\n    x = np.linspace(0, 10, 100)\n    y = np.sin(x)\n    \n    # Desenho inicial\n    fig, ax = plt.subplots()\n    line, = ax.plot(x, y)\n    ax.set_title(\"Gráfico de Seno - Inicial\")\n    \n    chart = MatplotlibChart(fig, expand=True)\n    page.add(chart)\n    \n    # Espera antes de atualizar\n    time.sleep(5)  # espera 5 segundos\n    \n    # Atualização do gráfico\n    y_new = np.cos(x)\n    line.set_ydata(y_new)\n    ax.set_title(\"Gráfico de Cosseno - Atualizado\")\n    chart.update()\n\nft.app(main)\n```\n\nCada um destes exemplos destaca um uso específico do `matplotlib` dentro do contexto de uma aplicação `flet`, desde a visualização básica de dados até a manipulação dinâmica de gráficos."
}