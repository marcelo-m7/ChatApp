{
    "file": "docs_controls_cupertinolisttile.py",
    "description": "O código em questão é um exemplo de como utilizar a biblioteca Flet para criar uma interface gráfica de usuário (GUI) em um aplicativo que utiliza componentes do estilo Cupertino (estilo visual baseado no iOS).\n\nAqui está uma descrição detalhada de cada parte do código:\n\n1. **Importação da biblioteca Flet:**\n   ```python\n   import flet as ft\n   ```\n   Esta linha importa a biblioteca Flet, que é usada para criar a interface do usuário.\n\n2. **Definição da função principal `main`:**\n   ```python\n   def main(page: ft.Page):\n   ```\n   A função `main` é definida recebendo um argumento `page`, que é um objeto `Page` da biblioteca Flet. Esta função será chamada para configurar a página do aplicativo.\n\n3. **Função de callback para cliques:**\n   ```python\n   def tile_clicked(e):\n       print(\"Tile clicked\")\n   ```\n   Esta função é definida dentro de `main` e será chamada quando um item da lista (tile) for clicado. Ela simplesmente imprime \"Tile clicked\" no console.\n\n4. **Adição de componentes à página:**\n   ```python\n   page.add(\n       ft.CupertinoListTile(...),\n       ft.CupertinoListTile(...)\n   )\n   ```\n   Este método `add` do objeto `page` adiciona componentes à página. Cada componente adicionado é um `CupertinoListTile`, que é um tipo de widget que simula uma linha de lista no estilo iOS.\n\n5. **Configuração dos CupertinoListTiles:**\n   Cada `CupertinoListTile` é configurado com vários parâmetros:\n   - `notched`: Um booleano que indica se o tile deve ter um recorte visual. No segundo tile, `notched=True` faz com que ele tenha um recorte.\n   - `additional_info`: Um widget de texto que aparece como informação adicional no tile.\n   - `bgcolor_activated`: Define a cor de fundo do tile quando ativado.\n   - `leading`: Um ícone que aparece no início do tile.\n   - `title`: O texto principal do tile.\n   - `subtitle`: Um texto secundário.\n   - `trailing`: Um ícone que aparece no final do tile.\n   - `on_click`: Um callback que é chamado quando o tile é clicado.\n\n6. **Iniciando o aplicativo com a função `app`:**\n   ```python\n   ft.app(main)\n   ```\n   Esta linha inicia o aplicativo chamando a função `main` como ponto de entrada, que configura a página.\n\n### Propriedades dos Componentes\n- **CupertinoListTile**: Este widget é uma forma de apresentar uma linha em uma lista com estilo inspirado no iOS. Suporta elementos visuais como ícones à esquerda (leading) e à direita (trailing), título e subtítulo, e pode ser configurado para responder a cliques.\n- **Icon**: Representa um ícone, e o nome do ícone é passado como parâmetro.\n- **Text**: Exibe um texto.\n\nEste código é um exemplo simples de como criar uma interface de usuário interativa com Flet usando componentes específicos do estilo visual Cupertino, com feedback visual e interação através de cliques.",
    "examples": "O código fornecido utiliza a biblioteca Flet para criar uma interface de usuário simples com dois tiles do estilo Cupertino. Vamos expandir esse exemplo para mostrar diferentes maneiras de usar os componentes `CupertinoListTile` com variações de layout, cores e interações:\n\n### Exemplo 1: Alterando Cores e Usando Imagens\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def tile_clicked(e):\n        print(\"Tile clicked:\", e.control.title.text)\n\n    page.add(\n        ft.CupertinoListTile(\n            additional_info=ft.Text(\"Wed Jan 24\"),\n            bgcolor_activated=ft.Colors.GREEN,\n            leading=ft.Image(src=\"https://via.placeholder.com/50\"),\n            title=ft.Text(\"Tile with Image\"),\n            subtitle=ft.Text(\"Using an image as leading\"),\n            trailing=ft.Icon(name=ft.cupertino_icons.RIGHT_CHEVRON),\n            on_click=tile_clicked,\n        ),\n        ft.CupertinoListTile(\n            notched=True,\n            additional_info=ft.Text(\"Thu Jan 25\"),\n            bgcolor=ft.Colors.LIGHT_BLUE_200,\n            leading=ft.Icon(name=ft.cupertino_icons.VIDEO_CAMERA),\n            title=ft.Text(\"Tile with Icon\"),\n            subtitle=ft.Text(\"Video camera icon\"),\n            trailing=ft.Text(\"More info\"),\n            on_click=tile_clicked,\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Customizando com Switch e Checkbox\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def switch_changed(e):\n        print(\"Switch is now:\", e.control.value)\n\n    def checkbox_changed(e):\n        print(\"Checkbox is:\", e.control.value)\n\n    switch = ft.Switch(value=True, on_change=switch_changed)\n    checkbox = ft.Checkbox(value=False, on_change=checkbox_changed)\n\n    page.add(\n        ft.CupertinoListTile(\n            title=ft.Text(\"Settings Option 1\"),\n            subtitle=ft.Text(\"This is a switch\"),\n            trailing=switch,\n        ),\n        ft.CupertinoListTile(\n            title=ft.Text(\"Settings Option 2\"),\n            subtitle=ft.Text(\"This is a checkbox\"),\n            trailing=checkbox,\n        ),\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Usando Diferentes Layouts de Tiles\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def tile_clicked(e):\n        print(\"Clicked on:\", e.control.title.text)\n\n    page.add(\n        ft.CupertinoListTile(\n            title=ft.Text(\"First Tile\"),\n            subtitle=ft.Text(\"This tile is simple\"),\n            on_click=tile_clicked,\n        ),\n        ft.CupertinoListTile(\n            notched=True,\n            title=ft.Text(\"Second Tile\"),\n            subtitle=ft.Text(\"This tile is notched\"),\n            trailing=ft.Icon(name=ft.cupertino_icons.ADD),\n            on_click=tile_clicked,\n        ),\n        ft.CupertinoListTile(\n            title=ft.Text(\"Third Tile\"),\n            subtitle=ft.Text(\"With a long subtitle demonstrating wrapping text in the Cupertino list tile.\"),\n            trailing=ft.Icon(name=ft.cupertino_icons.FORWARD),\n            on_click=tile_clicked,\n        ),\n    )\n\nft.app(main)\n```\n\nEstes exemplos demonstram a flexibilidade do componente `CupertinoListTile` em diferentes cenários, como uso de switches e checkboxes, diferentes elementos de UI para leading e trailing, e a manipulação de eventos de clique."
}