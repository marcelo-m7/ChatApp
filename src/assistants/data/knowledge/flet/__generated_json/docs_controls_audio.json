{
    "file": "docs_controls_audio.py",
    "description": "Os dois códigos que você compartilhou são exemplos de como usar a biblioteca Flet em Python para criar aplicativos de interface gráfica com funcionalidades relacionadas à reprodução de áudio. Vamos descrever cada um deles separadamente:\n\n### Primeiro Código\n\nEste código cria um aplicativo com áudio de fundo que começa a tocar automaticamente ao abrir o aplicativo. Ele usa a classe `ft.Audio` para carregar e reproduzir um arquivo de áudio a partir de uma URL.\n\n- **Importação da biblioteca Flet**: Inicia importando o módulo flet como `ft`.\n- **Função `main`**: Define a função principal que configura a página do aplicativo.\n  - **Audio `audio1`**: Cria um objeto `ft.Audio` com a propriedade `src` definindo a URL do arquivo de áudio e `autoplay` ativado, o que faz o áudio começar a tocar assim que é carregado.\n  - **Overlay**: Adiciona o componente de áudio ao overlay da página, permitindo que ele seja reproduzido por cima de outros elementos visuais.\n  - **Texto e Botão**: Adiciona um texto explicativo e um botão que, quando clicado, chama o método `pause()` do áudio para interromper a reprodução.\n\n### Segundo Código\n\nEste código apresenta um aplicativo mais interativo para controle de reprodução de áudio, incluindo funcionalidades para reproduzir, pausar, ajustar o volume, balancear o áudio e buscar informações sobre a duração e posição atual.\n\n- **Importação e função `main`**: Similar ao primeiro código, importa o módulo e define a função principal.\n- **Funções de controle**: Define várias funções para ajustar o volume e o balanço do áudio, além de manipular a reprodução.\n  - **volume_down e volume_up**: Reduzem e aumentam o volume do áudio.\n  - **balance_left e balance_right**: Ajustam o balanço do áudio para a esquerda e direita.\n- **Objeto `ft.Audio` com eventos**: Cria um objeto de áudio com várias propriedades e eventos:\n  - **Eventos**: `on_loaded`, `on_duration_changed`, `on_position_changed`, `on_state_changed`, e `on_seek_complete` são usados para monitorar e responder a mudanças no estado do áudio, fornecendo feedback no console.\n- **Botões de controle**: Adiciona botões para todas as funções de controle de áudio mencionadas anteriormente.\n- **Informação de duração e posição**: Botões adicionados para obter a duração total e a posição atual do áudio, imprimindo esses valores no console quando clicados.\n\n### Propriedades\n\nAmbos os códigos demonstram a flexibilidade da biblioteca Flet para criar interfaces de usuário ricas e interativas usando Python. Eles mostram como manipular mídia, responder a eventos e interagir com elementos de UI como botões e textos. A integração com eventos permite criar aplicativos complexos com resposta imediata às ações do usuário.",
    "examples": "Vamos demonstrar diferentes formas de uso do componente `Audio` do Flet, expandindo os exemplos fornecidos com novas funcionalidades e interações:\n\n### Exemplo 1: Looping do Áudio e Mute/Unmute\n\nEste exemplo mostra como criar um controle de áudio que permite ao usuário ativar/desativar o looping e silenciar/dessilenciar o áudio.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def toggle_loop(_):\n        audio1.loop = not audio1.loop\n        audio1.update()\n        btn_loop.text = \"Disable Loop\" if audio1.loop else \"Enable Loop\"\n        btn_loop.update()\n\n    def toggle_mute(_):\n        audio1.muted = not audio1.muted\n        audio1.update()\n        btn_mute.text = \"Unmute\" if audio1.muted else \"Mute\"\n        btn_mute.update()\n\n    audio1 = ft.Audio(\n        src=\"https://luan.xyz/files/audio/ambient_c_motion.mp3\",\n        autoplay=True,\n        loop=False,\n        muted=False\n    )\n    page.overlay.append(audio1)\n\n    btn_loop = ft.ElevatedButton(\"Enable Loop\", on_click=toggle_loop)\n    btn_mute = ft.ElevatedButton(\"Mute\", on_click=toggle_mute)\n    page.add(\n        ft.Text(\"Control Loop and Mute\"),\n        btn_loop,\n        btn_mute\n    )\n\nft.app(main)\n```\n\n### Exemplo 2: Reproduzir Lista de Áudios\n\nEste exemplo implementa uma lista de áudios que podem ser selecionados e reproduzidos sequencialmente ou escolhidos pelo usuário.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    playlist = [\n        \"https://luan.xyz/files/audio/ambient_c_motion.mp3\",\n        \"https://github.com/mdn/webaudio-examples/blob/main/audio-analyser/viper.mp3?raw=true\",\n        \"https://file-examples.com/storage/fe921de743f1bba659c0e/2017/11/file_example_MP3_1MG.mp3\"\n    ]\n    current_track = 0\n\n    def play_next(_):\n        nonlocal current_track\n        current_track = (current_track + 1) % len(playlist)\n        audio1.src = playlist[current_track]\n        audio1.play()\n\n    def play_previous(_):\n        nonlocal current_track\n        current_track = (current_track - 1) % len(playlist)\n        audio1.src = playlist[current_track]\n        audio1.play()\n\n    audio1 = ft.Audio(\n        src=playlist[current_track],\n        autoplay=False\n    )\n    page.overlay.append(audio1)\n\n    page.add(\n        ft.ElevatedButton(\"Play Previous\", on_click=play_previous),\n        ft.ElevatedButton(\"Play Next\", on_click=play_next),\n        ft.Text(\"Use the buttons to navigate through the playlist.\")\n    )\n\nft.app(main)\n```\n\n### Exemplo 3: Controle de Velocidade de Reprodução\n\nEste exemplo adiciona a funcionalidade de ajustar a velocidade de reprodução do áudio.\n\n```python\nimport flet as ft\n\ndef main(page: ft.Page):\n    def speed_up(_):\n        audio1.speed += 0.25\n        audio1.update()\n\n    def slow_down(_):\n        audio1.speed -= 0.25\n        audio1.update()\n\n    audio1 = ft.Audio(\n        src=\"https://luan.xyz/files/audio/ambient_c_motion.mp3\",\n        autoplay=True\n    )\n    page.overlay.append(audio1)\n\n    page.add(\n        ft.ElevatedButton(\"Speed Up\", on_click=speed_up),\n        ft.ElevatedButton(\"Slow Down\", on_click=slow_down),\n        ft.Text(\"Adjust the playback speed of the audio.\")\n    )\n\nft.app(main)\n```\n\nCada exemplo acima demonstra como interagir com diferentes aspectos de um componente `Audio` em uma aplicação Flet, oferecendo ao usuário uma interface rica para controle de áudio."
}