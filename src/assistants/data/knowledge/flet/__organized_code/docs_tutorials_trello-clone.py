import flet as ft if __name__ == "__main__":     def main(page: ft.Page):         page.title = "Flet Trello clone"        page.padding = 0        page.bgcolor = colors.BLUE_GREY_200        app = TrelloApp(page)        page.add(app)        page.update()     ft.app(main)

import flet as ft class TrelloApp:    def __init__(self, page: ft.Page):        self.page = page        self.appbar_items = [            ft.PopupMenuItem(text="Login"),            ft.PopupMenuItem(),  # divider            ft.PopupMenuItem(text="Settings")        ]        self.appbar = ft.AppBar(            leading=ft.Icon(ft.Icons.GRID_GOLDENRATIO_ROUNDED),            leading_width=100,            title=ft.Text("Trolli",size=32, text_align="start"),            center_title=False,            toolbar_height=75,            bgcolor=ft.Colors.LIGHT_BLUE_ACCENT_700,            actions=[                ft.Container(                    content=ft.PopupMenuButton(                        items=self.appbar_items                    ),                    margin=ft.margin.only(left=50, right=25)                )            ],        )        self.page.appbar = self.appbar        self.page.update()

import flet as ftfrom sidebar import Sidebarclass AppLayout(ft.Row):    def __init__(self, app, page: ft.Page, *args, **kwargs):        super().__init__(*args, **kwargs)        self.app = app        self.page = page        self.toggle_nav_rail_button = ft.IconButton(            icon=ft.Icons.ARROW_CIRCLE_LEFT,            icon_color=ft.Colors.BLUE_GREY_400,            selected=False,            selected_icon=ft.Icons.ARROW_CIRCLE_RIGHT,            on_click=self.toggle_nav_rail,        )        self.sidebar = Sidebar(self, page)        self._active_view: Control = ft.Column(            controls=[ft.Text("Active View")],            alignment=ft.MainAxisAlignment.CENTER,            horizontal_alignment=ft.CrossAxisAlignment.CENTER,        )        self.controls = [self.sidebar, self.toggle_nav_rail_button, self.active_view]    @property    def active_view(self):        return self._active_view    @active_view.setter    def active_view(self, view):        self._active_view = view        self.update()    def toggle_nav_rail(self, e):        self.sidebar.visible = not self.sidebar.visible        self.toggle_nav_rail_button.selected = not self.toggle_nav_rail_button.selected        self.page.update()

import flet as ftclass Sidebar(ft.Container):    def __init__(self, app_layout, store: DataStore):        self.store: DataStore = store        self.app_layout = app_layout        self.nav_rail_visible = True        self.top_nav_items = [            ft.NavigationRailDestination(                label_content=ft.Text("Boards"),                label="Boards",                icon=ft.Icons.BOOK_OUTLINED,                selected_icon=ft.Icons.BOOK_OUTLINED,            ),            ft.NavigationRailDestination(                label_content=ft.Text("Members"),                label="Members",                icon=ft.Icons.PERSON,                selected_icon=ft.Icons.PERSON,            ),        ]        self.top_nav_rail = ft.NavigationRail(            selected_index=None,            label_type=ft.NavigationRailLabelType.ALL,            on_change=self.top_nav_change,            destinations=self.top_nav_items,            bgcolor=ft.Colors.BLUE_GREY,            extended=True,            height=110,        )        self.toggle_nav_rail_button = ft.IconButton(ft.Icons.ARROW_BACK)        super().__init__(            content=ft.Column(                [                    ft.Row(                        [                            ft.Text("Workspace"),                        ],                        alignment=ft.MainAxisAlignment.SPACE_BETWEEN,                    ),                    # divider                    ft.Container(                        bgcolor=ft.Colors.BLACK26,                        border_radius=ft.border_radius.all(30),                        height=1,                        alignment=ft.alignment.center_right,                        width=220,                    ),                    self.top_nav_rail,                    # divider                    ft.Container(                        bgcolor=ft.Colors.BLACK26,                        border_radius=ft.border_radius.all(30),                        height=1,                        alignment=ft.alignment.center_right,                        width=220,                    ),                ],                tight=True,            ),            padding=ft.padding.all(15),            margin=ft.margin.all(0),            width=250,            bgcolor=ft.Colors.BLUE_GREY,            visible=self.nav_rail_visible,        )    def top_nav_change(self, e):        self.top_nav_rail.selected_index = e.control.selected_index        self.update()

content = ft.Column(    ft.Row([ft.Text("Workspace")], alignment=ft.MainAxisAlignment.CENTER))

if __name__ == "__main__":    def main(page: ft.Page):        page.title = "Flet Trello clone"        page.padding = 0        page.theme = ft.Theme(font_family="Verdana")        page.theme_mode = ft.ThemeMode.LIGHT        page.theme.page_transitions.windows = "cupertino"        page.fonts = {"Pacifico": "/Pacifico-Regular.ttf"}        page.bgcolor = ft.Colors.BLUE_GREY_200        page.update()        app = TrelloApp(page)    ft.app(main, assets_dir="../assets")

self.members_view = ft.Text("members view")self.all_boards_view = ft.Column(    [        ft.Row(            [                ft.Container(                    ft.Text(                        value="Your Boards",                        theme_style=ft.TextThemeStyle.HEADLINE_MEDIUM,                    ),                    expand=True,                    padding=ft.padding.only(top=15),                ),                ft.Container(                    ft.TextButton(                        "Add new board",                        icon=ft.Icons.ADD,                        on_click=self.app.add_board,                        style=ft.ButtonStyle(                            bgcolor={                                ft.ControlState.DEFAULT: ft.Colors.BLUE_200,                                ft.ControlState.HOVERED: ft.Colors.BLUE_400,                            },                            shape={                                ft.ControlState.DEFAULT: ft.RoundedRectangleBorder(                                    radius=3                                )                            },                        ),                    ),                    padding=ft.padding.only(right=50, top=15),                ),            ]        ),        ft.Row(            [                ft.TextField(                    hint_text="Search all boards",                    autofocus=False,                    content_padding=ft.padding.only(left=10),                    width=200,                    height=40,                    text_size=12,                    border_color=ft.Colors.BLACK26,                    focused_border_color=ft.Colors.BLUE_ACCENT,                    suffix_icon=ft.Icons.SEARCH,                )            ]        ),        ft.Row([ft.Text("No Boards to Display")]),    ],    expand=True,)

def hydrate_all_boards_view(self):    self.all_boards_view.controls[-1] = ft.Row(        [            ft.Container(                content=ft.Row(                    [                        ft.Container(                            content=ft.Text(value=b.name),                            data=b,                            expand=True,                            on_click=self.board_click,                        ),                        ft.Container(                            content=ft.PopupMenuButton(                                items=[                                    ft.PopupMenuItem(                                        content=ft.Text(                                            value="Delete",                                            theme_style=ft.TextThemeStyle.LABEL_MEDIUM,                                            text_align=ft.TextAlign.CENTER,                                        ),                                        on_click=self.app.delete_board,                                        data=b,                                    ),                                    ft.PopupMenuItem(),                                    ft.PopupMenuItem(                                        content=ft.Text(                                            value="Archive",                                            theme_style=ft.TextThemeStyle.LABEL_MEDIUM,                                            text_align=ft.TextAlign.CENTER,                                        ),                                    ),                                ]                            ),                            padding=ft.padding.only(right=-10),                            border_radius=ft.border_radius.all(3),                        ),                    ],                    alignment=ft.MainAxisAlignment.SPACE_BETWEEN,                ),                border=ft.border.all(1, ft.Colors.BLACK38),                border_radius=ft.border_radius.all(5),                bgcolor=ft.Colors.WHITE60,                padding=ft.padding.all(10),                width=250,                data=b,            )            for b in self.store.get_boards()        ],        wrap=True,    )    self.sidebar.sync_board_destinations()

self.top_nav_rail = ft.NavigationRail(    selected_index=None,    label_type=ft.NavigationRailLabelType.ALL,    on_change=self.top_nav_change,    destinations=self.top_nav_items,    bgcolor=ft.Colors.BLUE_GREY,    extended=True,    height=110,)self.bottom_nav_rail = ft.NavigationRail(    selected_index=None,    label_type=ft.NavigationRailLabelType.ALL,    on_change=self.bottom_nav_change,    extended=True,    expand=True,    bgcolor=ft.Colors.BLUE_GREY,)...def sync_board_destinations(self):    boards = self.store.get_boards()    self.bottom_nav_rail.destinations = []    for i in range(len(boards)):        b = boards[i]        self.bottom_nav_rail.destinations.append(            ft.NavigationRailDestination(                label_content=ft.TextField(                    value=b.name,                    hint_text=b.name,                    text_size=12,                    read_only=True,                    on_focus=self.board_name_focus,                    on_blur=self.board_name_blur,                    border=ft.InputBorder.NONE,                    height=50,                    width=150,                    text_align=ft.TextAlign.START,                    data=i,                ),                label=b.name,                selected_icon=ft.Icons.CHEVRON_RIGHT_ROUNDED,                icon=ft.Icons.CHEVRON_RIGHT_OUTLINED,            )        )

class TrelloApp(AppLayout):    def __init__(self, page: ft.Page, user=None):        ...        self.page.on_route_change = self.route_change        ...    def initialize(self):        self.page.views.append(            ft.View(                "/",                [self.appbar, self],                padding=ft.padding.all(0),                bgcolor=ft.Colors.BLUE_GREY_200,            )        )        self.page.update()        # create an initial board for demonstration if no boards        if len(self.boards) == 0:            self.create_new_board("My First Board")        self.page.go("/")    def route_change(self, e):        troute = ft.TemplateRoute(self.page.route)        if troute.match("/"):            self.page.go("/boards")        elif troute.match("/board/:id"):            if int(troute.id) > len(self.store.get_boards()):                self.page.go("/")                return            self.set_board_view(int(troute.id))        elif troute.match("/boards"):            self.set_all_boards_view()        elif troute.match("/members"):            self.set_members_view()        self.page.update()

def set_board_view(self, i):    self.active_view = self.store.get_boards()[i]    self.sidebar.bottom_nav_rail.selected_index = i    self.sidebar.top_nav_rail.selected_index = None    self.page.update()

def board_name_focus(self, e):    e.control.read_only = False    e.control.border = ft.InputBorder.OUTLINE    self.page.update()def board_name_blur(self, e):    self.store.update_board(        self.store.get_boards()[e.control.data], {"name": e.control.value}    )    self.app_layout.hydrate_all_boards_view()    e.control.read_only = True    e.control.border = ft.InputBorder.NONE    self.page.update()

def login(self, e):    def close_dlg(e):        if user_name.value == "" or password.value == "":            user_name.error_text = "Please provide username"            password.error_text = "Please provide password"            self.page.update()            return        else:            user = User(user_name.value, password.value)            if user not in self.store.get_users():                self.store.add_user(user)            self.user = user_name.value            self.page.client_storage.set("current_user", user_name.value)        self.page.close(dialog)        self.appbar_items[0] = ft.PopupMenuItem(            text=f"{self.page.client_storage.get('current_user')}'s Profile"        )        self.page.update()    user_name = ft.TextField(label="User name")    password = ft.TextField(label="Password", password=True)    dialog = ft.AlertDialog(        title=ft.Text("Please enter your login credentials"),        content=ft.Column(            [                user_name,                password,                ft.ElevatedButton(text="Login", on_click=close_dlg),            ],            tight=True,        ),        on_dismiss=lambda e: print("Modal dialog dismissed!"),    )    self.page.open(dialog)

self.view = ft.DragTarget(    group="items",    content=ft.Draggable(        group="lists",        content=ft.DragTarget(            group="lists",            content=self.inner_list,            data=self,            on_accept=self.list_drag_accept,            on_will_accept=self.list_will_drag_accept,            on_leave=self.list_drag_leave,        ),    ),    data=self,    on_accept=self.item_drag_accept,    on_will_accept=self.item_will_drag_accept,    on_leave=self.item_drag_leave,)self.inner_list = ft.Container(    content=ft.Column(        [            self.header,            self.new_item_field,            ft.TextButton(                content=ft.Row(                    [                        ft.Icon(ft.Icons.ADD),                        ft.Text("add card", color=ft.Colors.BLACK38),                    ],                    tight=True,                ),                on_click=self.add_item_handler,            ),            self.items,            self.end_indicator,        ],        spacing=4,        tight=True,        data=self.title,    ),    width=250,    border=ft.border.all(2, ft.Colors.BLACK12),    border_radius=ft.border_radius.all(5),    bgcolor=self.color if (self.color != "") else ft.Colors.BACKGROUND,    padding=ft.padding.only(bottom=10, right=10, left=10, top=5),)

def list_drag_accept(self, e):    src = self.page.get_control(e.src_id)    l = self.board.content.controls    to_index = l.index(e.control.data)    from_index = l.index(src.content.data)    l[to_index], l[from_index] = l[from_index], l[to_index]    self.inner_list.border = ft.border.all(2, ft.Colors.BLACK12)    self.page.update()def list_will_drag_accept(self, e):    if e.data == "true":        self.inner_list.border = ft.border.all(2, ft.Colors.BLACK)    self.update()def list_drag_leave(self, e):    self.inner_list.border = ft.border.all(2, ft.Colors.BLACK12)    self.update()

self.view = ft.Draggable(    group="items",    content=ft.DragTarget(        group="items",        content=self.card_item,        on_accept=self.drag_accept,        on_leave=self.drag_leave,        on_will_accept=self.drag_will_accept,    ),    data=self,)self.card_item = ft.Card(    content=ft.Row(        [            ft.Container(                content=ft.Checkbox(label=f"{self.item_text}", width=200),                border_radius=ft.border_radius.all(5),            )        ],        width=200,        wrap=True,    ),    elevation=1,    data=self.list,)def drag_accept(self, e):    src = self.page.get_control(e.src_id)    # skip if item is dropped on itself    if src.content.content == e.control.content:        self.card_item.elevation = 1        self.list.set_indicator_opacity(self, 0.0)        e.control.update()        return    # item dropped within same list but not on self    if src.data.list == self.list:        self.list.add_item(chosen_control=src.data, swap_control=self)        self.card_item.elevation = 1        e.control.update()        return    # item added to different list    self.list.add_item(src.data.item_text, swap_control=self)    # remove from the list to which draggable belongs    src.data.list.remove_item(src.data)    self.list.set_indicator_opacity(self, 0.0)    self.card_item.elevation = 1    self.page.update()def drag_will_accept(self, e):    if e.data == "true":        self.list.set_indicator_opacity(self, 1.0)    self.card_item.elevation = 20 if e.data == "true" else 1    self.page.update()def drag_leave(self, e):    self.list.set_indicator_opacity(self, 0.0)    self.card_item.elevation = 1    self.page.update()

def add_item(    self,    item: str | None = None,    chosen_control: ft.Draggable | None = None,    swap_control: ft.Draggable | None = None,):    controls_list = [x.controls[1] for x in self.items.controls]    to_index = (        controls_list.index(swap_control) if swap_control in controls_list else None    )    from_index = (        controls_list.index(chosen_control) if chosen_control in controls_list else None    )    control_to_add = ft.Column(        [            ft.Container(                bgcolor=ft.Colors.BLACK26,                border_radius=ft.border_radius.all(30),                height=3,                alignment=ft.alignment.center_right,                width=200,                opacity=0.0,            )        ]    )    # rearrange (i.e. drag drop from same list)    if (from_index is not None) and (to_index is not None):        self.items.controls.insert(to_index, self.items.controls.pop(from_index))        self.set_indicator_opacity(swap_control, 0.0)    # insert (drag from other list to middle of this list)    elif to_index is not None:        new_item = Item(self, self.store, item)        control_to_add.controls.append(new_item)        self.items.controls.insert(to_index, control_to_add)    # add new (drag from other list to end of this list, or use add item button)    else:        new_item = (            Item(self, self.store, item)            if item            else Item(self, self.store, self.new_item_field.value)        )        control_to_add.controls.append(new_item)        self.items.controls.append(control_to_add)        self.store.add_item(self.board_list_id, new_item)        self.new_item_field.value = ""    self.page.update()

def resize(self, nav_rail_extended, width, height):    self.board_lists.width = (width - 310) if nav_rail_extended else (width - 50)    self.height = height    self.update()

def page_resize(self, e=None):    if type(self.active_view) is Board:        self.active_view.resize(self.sidebar.visible, self.page.width, self.page.height)    self.page.update()

