import flet as ftfrom flet_spinkit import FletSpinkitdef main(page: ft.Page):    page.vertical_alignment = ft.MainAxisAlignment.CENTER    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER    page.add(        ft.Stack(            [                ft.Container(height=200, width=200, bgcolor=ft.Colors.BLUE_100),                FletSpinkit(opacity=0.5, tooltip="Spinkit tooltip", top=0, left=0),            ]        )    )ft.app(main)

from enum import Enumfrom typing import Any, Optionalfrom flet.core.constrained_control import ConstrainedControlfrom flet.core.control import OptionalNumberfrom flet.core.types import ColorEnums, ColorValueclass FletSpinkit(ConstrainedControl):    """    FletSpinkit Control.    """    def __init__(        self,        #        # Control        #        opacity: OptionalNumber = None,        tooltip: Optional[str] = None,        visible: Optional[bool] = None,        data: Any = None,        #        # ConstrainedControl        #        left: OptionalNumber = None,        top: OptionalNumber = None,        right: OptionalNumber = None,        bottom: OptionalNumber = None,        #        # FletSpinkit specific        #        color: Optional[ColorValue] = None,        size: OptionalNumber = None,    ):        ConstrainedControl.__init__(            self,            tooltip=tooltip,            opacity=opacity,            visible=visible,            data=data,            left=left,            top=top,            right=right,            bottom=bottom,        )        self.color = color        self.size = size    def _get_control_name(self):        return "flet_spinkit"    # color    @property    def color(self) -> Optional[ColorValue]:        return self.__color    @color.setter    def color(self, value: Optional[ColorValue]):        self.__color = value        self._set_enum_attr("color", value, ColorEnums)    # size    @property    def size(self):        return self._get_attr("size")    @size.setter    def size(self, value):        self._set_attr("size", value)

import flet as ftfrom flet_spinkit import FletSpinkitdef main(page: ft.Page):    page.vertical_alignment = ft.MainAxisAlignment.CENTER    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER    page.add(        ft.Stack(            [                ft.Container(height=200, width=200, bgcolor=ft.Colors.BLUE_100),                FletSpinkit(                    opacity=0.5,                    tooltip="Spinkit tooltip",                    top=0,                    left=0,                    color=ft.Colors.YELLOW,                    size=150,                ),            ]        )    )ft.app(main)

# clip_behavior@propertydef clip_behavior(self) -> Optional[ClipBehavior]:    return self._get_attr("clipBehavior")@clip_behavior.setterdef clip_behavior(self, value: Optional[ClipBehavior]):    self._set_attr(        "clipBehavior",        value.value if isinstance(value, ClipBehavior) else value,    )

def before_update(self):    super().before_update()    self._set_attr_json("shape", self.__shape)# shape@propertydef shape(self) -> Optional[OutlinedBorder]:    return self.__shape@shape.setterdef shape(self, value: Optional[OutlinedBorder]):    self.__shape = value

def _get_children(self):        children = []        if self.__content:            self.__content._set_attr_internal("n", "content")            children.append(self.__content)        return children

# on_click@propertydef on_click(self):    return self._get_event_handler("click")@on_click.setterdef on_click(self, handler):    self._add_event_handler("click", handler)

