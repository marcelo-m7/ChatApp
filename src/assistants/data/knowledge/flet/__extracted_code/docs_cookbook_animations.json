{
    "url": "https://flet.dev/docs/cookbook/animations",
    "code_snippets": [
        "import flet as ftdef main(page: ft.Page):    c = ft.Container(        width=150,        height=150,        bgcolor=\"blue\",        border_radius=10,        animate_opacity=300,    )    def animate_opacity(e):        c.opacity = 0 if c.opacity == 1 else 1        c.update()    page.add(        c,        ft.ElevatedButton(            \"Animate opacity\",            on_click=animate_opacity,        ),    )ft.app(main)",
        "from math import piimport flet as ftdef main(page: ft.Page):    c = ft.Container(        width=100,        height=70,        bgcolor=\"blue\",        border_radius=5,        rotate=ft.transform.Rotate(0, alignment=ft.alignment.center),        animate_rotation=ft.animation.Animation(300, ft.AnimationCurve.BOUNCE_OUT),    )    def animate(e):        c.rotate.angle += pi / 2        page.update()    page.vertical_alignment = ft.MainAxisAlignment.CENTER    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER    page.spacing = 30    page.add(        c,        ft.ElevatedButton(\"Animate!\", on_click=animate),    )ft.app(main)",
        "import flet as ftdef main(page: ft.Page):    c = ft.Container(        width=100,        height=100,        bgcolor=\"blue\",        border_radius=5,        scale=ft.transform.Scale(scale=1),        animate_scale=ft.animation.Animation(600, ft.AnimationCurve.BOUNCE_OUT),    )    def animate(e):        c.scale = 2        page.update()    page.vertical_alignment = ft.MainAxisAlignment.CENTER    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER    page.spacing = 30    page.add(        c,        ft.ElevatedButton(\"Animate!\", on_click=animate),    )ft.app(main)",
        "import flet as ftdef main(page: ft.Page):    c = ft.Container(        width=150,        height=150,        bgcolor=\"blue\",        border_radius=10,        offset=ft.transform.Offset(-2, 0),        animate_offset=ft.animation.Animation(1000),    )    def animate(e):        c.offset = ft.transform.Offset(0, 0)        c.update()    page.add(        c,        ft.ElevatedButton(\"Reveal!\", on_click=animate),    )ft.app(main)",
        "import flet as ftdef main(page: ft.Page):    c1 = ft.Container(width=50, height=50, bgcolor=\"red\", animate_position=1000)    c2 = ft.Container(        width=50, height=50, bgcolor=\"green\", top=60, left=0, animate_position=500    )    c3 = ft.Container(        width=50, height=50, bgcolor=\"blue\", top=120, left=0, animate_position=1000    )    def animate_container(e):        c1.top = 20        c1.left = 200        c2.top = 100        c2.left = 40        c3.top = 180        c3.left = 100        page.update()    page.add(        ft.Stack([c1, c2, c3], height=250),        ft.ElevatedButton(\"Animate!\", on_click=animate_container),    )ft.app(main)",
        "import flet as ftdef main(page: ft.Page):    c = ft.Container(        width=150,        height=150,        bgcolor=\"red\",        animate=ft.animation.Animation(1000, ft.AnimationCurve.BOUNCE_OUT),    )    def animate_container(e):        c.width = 100 if c.width == 150 else 150        c.height = 50 if c.height == 150 else 150        c.bgcolor = \"blue\" if c.bgcolor == \"red\" else \"red\"        c.update()    page.add(c, ft.ElevatedButton(\"Animate container\", on_click=animate_container))ft.app(main)",
        "import timeimport flet as ftdef main(page: ft.Page):    i = ft.Image(src=\"https://picsum.photos/150/150\", width=150, height=150)    def animate(e):        sw.content = ft.Image(            src=f\"https://picsum.photos/150/150?{time.time()}\", width=150, height=150        )        page.update()    sw = ft.AnimatedSwitcher(        i,        transition=ft.AnimatedSwitcherTransition.SCALE,        duration=500,        reverse_duration=500,        switch_in_curve=ft.AnimationCurve.BOUNCE_OUT,        switch_out_curve=ft.AnimationCurve.BOUNCE_IN,    )    page.add(        sw,        ft.ElevatedButton(\"Animate!\", on_click=animate),    )ft.app(main)",
        "c = ft.Container(        ft.Text(\"Animate me!\"),        # ...        animate=ft.animation.Animation(1000, \"bounceOut\"),        on_animation_end=lambda e: print(\"Container animation end:\", e.data)    )"
    ]
}