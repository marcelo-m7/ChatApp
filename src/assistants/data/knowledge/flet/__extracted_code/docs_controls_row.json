{
    "url": "https://flet.dev/docs/controls/row",
    "code_snippets": [
        "import flet as ftdef main(page: ft.Page):    def items(count):        items = []        for i in range(1, count + 1):            items.append(                ft.Container(                    content=ft.Text(value=str(i)),                    alignment=ft.alignment.center,                    width=50,                    height=50,                    bgcolor=ft.Colors.AMBER,                    border_radius=ft.border_radius.all(5),                )            )        return items    def gap_slider_change(e):        row.spacing = int(e.control.value)        row.update()    gap_slider = ft.Slider(        min=0,        max=50,        divisions=50,        value=0,        label=\"{value}\",        on_change=gap_slider_change,    )    row = ft.Row(spacing=0, controls=items(10))    page.add(ft.Column([ ft.Text(\"Spacing between items\"), gap_slider]), row)ft.app(main)",
        "import flet as ftdef main(page: ft.Page):    def items(count):        items = []        for i in range(1, count + 1):            items.append(                ft.Container(                    content=ft.Text(value=str(i)),                    alignment=ft.alignment.center,                    width=50,                    height=50,                    bgcolor=ft.Colors.AMBER,                    border_radius=ft.border_radius.all(5),                )            )        return items    def slider_change(e):        row.width = float(e.control.value)        row.update()    width_slider = ft.Slider(        min=0,        max=page.window.width,        divisions=20,        value=page.window.width,        label=\"{value}\",        on_change=slider_change,    )    row = ft.Row(        wrap=True,        spacing=10,        run_spacing=10,        controls=items(30),        width=page.window.width,    )    page.add(        ft.Column(            [                ft.Text(                    \"Change the row width to see how child items wrap onto multiple rows:\"                ),                width_slider,            ]        ),        row,    )ft.app(main)",
        "import flet as ftdef main(page: ft.Page):    def items(count):        items = []        for i in range(1, count + 1):            items.append(                ft.Container(                    content=ft.Text(value=str(i)),                    alignment=ft.alignment.center,                    width=50,                    height=50,                    bgcolor=ft.Colors.AMBER_500,                )            )        return items    def row_with_alignment(align: ft.MainAxisAlignment):        return ft.Column(            [                ft.Text(str(align), size=16),                ft.Container(                    content=ft.Row(items(3), alignment=align),                    bgcolor=ft.Colors.AMBER_100,                ),            ]        )    page.add(        row_with_alignment(ft.MainAxisAlignment.START),        row_with_alignment(ft.MainAxisAlignment.CENTER),        row_with_alignment(ft.MainAxisAlignment.END),        row_with_alignment(ft.MainAxisAlignment.SPACE_BETWEEN),        row_with_alignment(ft.MainAxisAlignment.SPACE_AROUND),        row_with_alignment(ft.MainAxisAlignment.SPACE_EVENLY),    )ft.app(main)",
        "import flet as ftdef main(page: ft.Page):    def items(count):        items = []        for i in range(1, count + 1):            items.append(                ft.Container(                    content=ft.Text(value=str(i)),                    alignment=ft.alignment.center,                    width=50,                    height=50,                    bgcolor=ft.Colors.AMBER_500,                )            )        return items    def row_with_vertical_alignment(align: ft.CrossAxisAlignment):        return ft.Column(            [                ft.Text(str(align), size=16),                ft.Container(                    content=ft.Row(items(3), vertical_alignment=align),                    bgcolor=ft.Colors.AMBER_100,                    height=150,                ),            ]        )    page.add(        row_with_vertical_alignment(ft.CrossAxisAlignment.START),        row_with_vertical_alignment(ft.CrossAxisAlignment.CENTER),        row_with_vertical_alignment(ft.CrossAxisAlignment.END),    )ft.app(main)",
        "r = ft.Row([  ft.TextField(hint_text=\"Enter your name\", expand=True),  ft.ElevatedButton(text=\"Join chat\")])",
        "r = ft.Row([  ft.Container(expand=1, content=ft.Text(\"A\")),  ft.Container(expand=3, content=ft.Text(\"B\")),  ft.Container(expand=1, content=ft.Text(\"C\"))])"
    ]
}