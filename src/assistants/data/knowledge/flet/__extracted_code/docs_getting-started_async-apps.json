{
    "url": "https://flet.dev/docs/getting-started/async-apps",
    "code_snippets": [
        "import flet as ftasync def main(page: ft.Page):    await asyncio.sleep(1)    page.add(ft.Text(\"Hello, async world!\"))ft.app(main)",
        "def page_resize(e):    print(\"New page size:\", page.window.width, page.window.height)page.on_resize = page_resize",
        "async def main(page: ft.Page):    async def button_click(e):        await some_async_method()        page.add(ft.Text(\"Hello!\"))    page.add(ft.ElevatedButton(\"Say hello!\", on_click=button_click))ft.app(main)",
        "page.on_error = lambda e: print(\"Page error:\", e.data)",
        "import asyncioimport flet as ftdef main(page: ft.Page):    async def button_click(e):        await asyncio.sleep(1)        page.add(ft.Text(\"Hello!\"))    page.add(        ft.ElevatedButton(\"Say hello with delay!\", on_click=button_click)    )ft.app(main)",
        "import asyncioimport flet as ftclass Countdown(ft.Text):    def __init__(self, seconds):        super().__init__()        self.seconds = seconds    def did_mount(self):        self.running = True        self.page.run_task(self.update_timer)    def will_unmount(self):        self.running = False    async def update_timer(self):        while self.seconds and self.running:            mins, secs = divmod(self.seconds, 60)            self.value = \"{:02d}:{:02d}\".format(mins, secs)            self.update()            await asyncio.sleep(1)            self.seconds -= 1def main(page: ft.Page):    page.add(Countdown(120), Countdown(60))ft.app(main)"
    ]
}